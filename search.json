[{"path":"/articles/StoX-data-preparation.html","id":"obtaining-data","dir":"Articles","previous_headings":"","what":"Obtaining data","title":"StoX FDA data preparation (baseline)","text":"vignette introduces tools assist correct usage FDA-data, attempt made introducing unfamiliar users peculiarities fisheries dependent sampling. IMR samples provisional guide FDA-data (Norwegian) can found IMR intranet: Kilder fiskeriavhengige data, census data introduction (Norwegian) can found IMR intranet: Fiskeridata Within IMR-computer-network landing data sample data can obtained dataset explorer. Consider using tools-menu download landing data compile sample data, pre-compiled data sets ‘commercial sampling’ suitable. Otherwise landing data available various formats described IMR intranet: Fiskeridata, data publicly available directly FDIR (also Norwegian).","code":""},{"path":"/articles/StoX-data-preparation.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"StoX FDA data preparation (baseline)","text":"RstoxFDA optional package StoX. order use functions introduced vignette StoX user interface, make sure RstoxFDA installed. See installation instructions github: StoXProject/RstoxFDA. install StoX user interface, see instructions github: StoXProject/StoX","code":""},{"path":"/articles/StoX-data-preparation.html","id":"data-formats-in-stox","dir":"Articles","previous_headings":"","what":"Data formats in StoX","title":"StoX FDA data preparation (baseline)","text":"StoX support several types input, records biological measurements (biotic-data), records acoustic observations (acoustic-data) records total weight landed (landing-data). FDA, mainly biotic-data landing-data, interest. types input, StoX may support several file-formats, data-processing visualization supported StoX requires various input format converted StoX-specific standards. Biotic-data must converted RstoxData::StoxBioticData, can done function RstoxData::StoxBiotic, landing data must converted RstoxData::StoxLandingData, can done function RstoxData::StoxLanding. makes sure StoX-functions visualisations StoX user-interface can rely unified definitions important variables. cases unified definition needed, StoX functions may configured handle columns standard variables. columns may added standard StoX-formats use functions like RstoxData::AddToStoxBiotic. addition data types, parameters configurations may read various kind ‘resource-files’. format files described documentation functions import . E.g:","code":"?RstoxFDA::DefineLengthConversionParameters"},{"path":"/articles/StoX-data-preparation.html","id":"sample-data","dir":"Articles","previous_headings":"","what":"Sample data","title":"StoX FDA data preparation (baseline)","text":"StoX supports several input formats biological samples, can read function RstoxData::ReadBiotic. function reads biotic data internal structure, RstoxData::BioticData, rather loosely defined. Data organized several tables different columns, include information source data, otherwise RstoxData::BioticData provide strict format. Biotic data therefore converted RstoxData::StoxBioticData, usually desirable convert biological data format function RstoxData::StoxBiotic. data transformation, filtering, re-coding necessary converting RstoxData::StoxBioticData. Since RstoxData::BioticData defined flexible manner, functions provided perform data-transformations re-codings make sense particular sources biotic-data. Since source biotic-data IMR typically NMDbiotic, functions specific handling data source introduced .","code":""},{"path":"/articles/StoX-data-preparation.html","id":"filtering","dir":"Articles","previous_headings":"Sample data","what":"Filtering","title":"StoX FDA data preparation (baseline)","text":"data-preparation filtering necessary converting RstoxData::StoxBioticData, necessary converting. Data-preparation can done converting generally desirable , since error messages provide clearer link raw data, since generally reduces amount data needs processed. However, also concerns consider respect-re-use StoX-projects. StoX typically used analyses performed annual basis, minor modifications data preparation year. setting useful able make copy StoX-project previous year, make necessary modifications copy. kept mind, RstoxData::BioticData contains tables names corresponding input data-files, input data-files ideally different names different years. means filters configured RstoxData::FilterBiotic, must typically changed one year next, filters configured RstoxData::FilterStoxBiotic typically reusable.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"nmdbiotic","dir":"Articles","previous_headings":"Sample data","what":"NMDbiotic","title":"StoX FDA data preparation (baseline)","text":"Biological samples IMR archived versioned data-format called NMDbiotic (https://www.imr./formats/nmdbiotic/). source biological data NMDbiotic, may find information recorded somewhat differently allows straightforward conversion RstoxData::StoxBiotic. instance, may find fishing date recorded end fishing operation, catches position, fish weights measured gutted fish, rather unprocessed fish. find gear codes different used landing-data. RstoxData provide functions dealing kind issues, presented . functions specific RstoxData::BioticData read NMDbiotic files. source something else (e.g. ICES biotic) usually make sense apply functions, exact behaviour specified function documentation. data input file relevant analysis, number data issues handle can greatly reduced first applying necessary filtering RstoxData::FilterBiotic. mentioned , use RstoxData::FilterBiotic rather RstoxData::FilterStoxBiotic, come caveat filters less re-usable analysis done several years data. good rule thumb try solve standard filters, apply coming years well RstoxData::FilterStoxBiotic, possibly use RstoxData::AddToStoxBiotic.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"fishing-time-information","dir":"Articles","previous_headings":"Sample data > NMDbiotic","what":"Fishing time information","title":"StoX FDA data preparation (baseline)","text":"may find fishing date recorded end fishing operation, since day catch sampled, corresponding fields start fishing operation missing. may also find time (hour minute) filled, since detail may available samplers. Unfortunately, fields (‘stationstartdate’ ‘stationstarttime’ RstoxData::BioticData / NMDbiotic) must set order conversion RstoxData::StoxBiotic preserve time information. downstream analysis may simple annotating quarter month data, case clear warranted know hour minute catch, distinguish start fishing operation end . situations like , function RstoxFDA::SetStartDateBiotic allows impute start date becomes equal stop date fishing operation, function RstoxFDA::SetTimeBiotic allows set arbitrary time day records time missing.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"position-information","dir":"Articles","previous_headings":"Sample data > NMDbiotic","what":"Position information","title":"StoX FDA data preparation (baseline)","text":"sampling still record position catches terms area codes. order visualisations annotation area codes supported RstoxData::StoxBioticData, positional data must provided. area codes provided NMDbiotic records provide sufficient precision, may consider imputing positions area codes, using RstoxFDA::SetAreaPositionsBiotic. See section ‘Area codes’ details. can done, particularities IMR data archive may need handled. Catch locations often provided via ‘FDIR Statistical areas locations’, two-code system first code represents area (NMDbiotic: area), second finer area coding system within area (NMDbiotic: location). codes defined integers, FDIR uses convention prefix single digit integers leading ‘0’, E.g: ‘01’ ‘09’. IMR records, several conventions used area ‘01’ may recorded either ‘01’, ‘1’ ’ 1’ (note whitespace), perhaps additional variants. may corrected using RstoxBase::DefineTranslation RstoxBase::TranslateBiotic. addition issue, FDIR revised coding system 2018, following similar revision ICES areas. NMDbiotic old revised definitions represented different systems area-coding (signified field NMDbiotic: system), nearly identical often used interchangeably. RstoxFDA::SetAreaPositionsBiotic may therefore occur twice StoX project. system ‘2’ (old definition) system ‘10’ (new definition).","code":""},{"path":"/articles/StoX-data-preparation.html","id":"gear-codes","dir":"Articles","previous_headings":"Sample data > NMDbiotic","what":"Gear codes","title":"StoX FDA data preparation (baseline)","text":"NMDbiotic uses four digit gear-coding system organized two first digits code gear-groups. coarser gear-definition sufficient analysis, downstream processing may simplified re-coding gear column first two digits. supported function RstoxFDA::SetShortGearBiotic.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"haul-identification","dir":"Articles","previous_headings":"Sample data > NMDbiotic","what":"Haul identification","title":"StoX FDA data preparation (baseline)","text":"order get position time attributed fishing operations standard StoX way, may sometimes necessary introduce identifiers field ‘station’ RstoxData::BioticData / NMDbiotic, converting StoX biotic. fishing stations known identified fishing operations data set, function RstoxFDA::CopyBiotic may used copy column ‘serialnumber’ column ‘station’. may considered get warnings StoX baseline sayse something along lines ‘one ’serialnumber’ (HaulKey StoxBioticData) x y ‘station’(StationKey StoxBioticData) NMDBiotic data.’. brief explanation given . Hauls fishing operations NMDbiotic recorded fishstations identified serialnumber. concept station, sampling unit, recorded table usually one fishing operation station, makes unnecessary distinguish. several hauls recorded station, given station number. common, use station numbers always disciplined users contributing data NMDbiotic. lead field ‘station’ left blank, repeated mistake. conversion RstoxData::StoxBioticData made accordanse standards since format haul station different levels, hauls missing value ‘station’ field attributed station. Moreover, standard allocation time position RstoxData::StoxBioticData done station, rather haul. Alternatively, time position may added haul level RstoxData::StoxBioticData via function RstoxData::AddToStoxBiotic. workarounds mainly intended dealing historical data. Registration practices dieallt ammended inconventional use field station encountered.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"non-standard-fish-measurments","dir":"Articles","previous_headings":"Sample data > NMDbiotic","what":"Non standard fish measurments","title":"StoX FDA data preparation (baseline)","text":"practicalities fisheries sampling often dictate partially processed products, gutted fish, measured. RstoxData::StoxBioticData supports Live (Round) weights total-length measurements, weights FDA-data often provided gutted (without head) occasionally head-lengths provided (along age). conversions via scalar factors simple regressions acceptable, data can made fit RstoxData::StoxBiotic use functions RstoxFDA::ConvertWeightBiotic RstoxFDA::ConvertLengthBiotic. Conversion tables functions must first defined functions RstoxFDA::DefineLengthConversionParameters, RstoxFDA::DefineWeightConversionFactor. latter offers selection built-official conversion factors, can used. Otherwise conversion tables must provided resource files.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"quality-filters","dir":"Articles","previous_headings":"Sample data > NMDbiotic","what":"Quality filters","title":"StoX FDA data preparation (baseline)","text":"common practice remove extreme outliers data. outliers erroneous records, desirable remove database records, correct information available, rather removing analysis. RstoxFDA provides outlier-filters. mainly provided order reproduce legacy workflows, may relevant apply mostly older data. may also used conjunction report functions verify extreme outliers uncommon absent. function RstoxFDA::FilterAgeLengthOutliersStoxBiotic provides filter von-Bertalannfy regression removing extreme age-length relationships. function RstoxFDA::FilterWeightLengthOutliersStoxBiotic provides filter log-linear model remove extreme weight-length relationships. records missing, suspect data encountered, important provide feedback data-collectors, can correct record possible. order progress analysis, possibly detecting data-issues, one may want filter offending data, include later corrected databases. Dedicated filters purpose recommended (RstoxData::FilterBiotic). filters organised carefully, report filtered may generated function RstoxFDA::ListBioticDifference, lists difference output processes proivde RstoxData::StoxBioticData one providing data RstoxData::BioticData. kind workflow allows discover several issues reporting back data-collectors, provide convenient format reporting issues.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"example-stox-project","dir":"Articles","previous_headings":"Sample data","what":"Example: StoX-project","title":"StoX FDA data preparation (baseline)","text":"summary, depending exact data issues hand, sample data StoX project may handled sequence processes exemplified following table:","code":""},{"path":"/articles/StoX-data-preparation.html","id":"landing-data","dir":"Articles","previous_headings":"","what":"Landing data","title":"StoX FDA data preparation (baseline)","text":"FDA analysis often involve kind ratio-estimation dependent census landed weight species, fishing effort gear. IMR typically get census data via mandatory reporting FDIR. RstoxData provides support reading sales-notes FDIR standardized format via function ReadLanding, often convenient use formats. RstoxFDA therefore offers alternative function reading sales-notes: ReadLandingFDA allows additional formats, available internally IMR. ReadLandingFDA returns data compatible RstoxData::ReadLanding can used function accepts RstoxDAta::LandingData. RstoxData offers function RstoxData::FilterLanding, provides filtering options format, StoX user interface performs best data converted aggregated format processing. RstoxData function RstoxData::StoxLanding aggregates sales-notes format RstoxDAta::StoxLandingData supported processing.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"example-stox-project-1","dir":"Articles","previous_headings":"Landing data","what":"Example: StoX-project","title":"StoX FDA data preparation (baseline)","text":"Typically, landings data included StoX project sequence processes exemplified table :","code":""},{"path":"/articles/StoX-data-preparation.html","id":"area-codes","dir":"Articles","previous_headings":"","what":"Area codes","title":"StoX FDA data preparation (baseline)","text":"Area codes commonly used stratification domain definitions, FDA frequently encounter situations clear definition areas useful. provided StoX spatial strata-files, named polygons describing exactly area-code represents terms latitudes longitudes connected straight lines. RstoxBase provides function RstoxBase::DefineStratumPolygon allows custom spatial strata-system / area codes defined. Since FDA frequently make use standardized areas reporting, provided RstoxFDA built-options via function RstoxFDA::LoadFdaStratumPolygon. area definitions compatible provided RstoxBase::DefineStratumPolygon, can used function accepts RstoxBase::StratumPolygon, alleviates need obtain resource files common coding systems statistical areas used ICES FDIR. general, FDA make use area definitions several purposes besides representing stratification samples. particular used impute positions data area-codes recorded, annotate data spatial domain information used reporting, post-stratified categorical variables covariates estimation models. contrast StoX survey-estimation projects, FDA-projects may well end reading loading several area-definitions.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"imputing-positions","dir":"Articles","previous_headings":"Area codes","what":"Imputing positions","title":"StoX FDA data preparation (baseline)","text":"Positions can imputed area codes, gives acceptable precision. , single position within area (typically centroid) used represent area injected data exact positional information. commonly done order convert back area codes. may seem like roundabout approach, offers great flexibility area codes stratification systems used models defined, makes easy annotate several area-code definitions data, often necessary purposes reporting. use cases important check area codes positions imputed much coarser, preferably contained within, area codes later inferred imputed positions. area definitions loaded StoX via RstoxFDA::LoadFdaStratumPolygon RstoxBase::DefineStratumPolygon, overlap different areas may visualized selecting ‘Show Map’-option. order impute positions, coupling area codes positions must first defined. done function RstoxFDA::DefineAreaPosition. area codes defined polygons sufficient quality using RstoxFDA::LoadFdaStratumPolygon RstoxBase::DefineStratumPolygon, RstoxFDA::DefineAreaPosition can use input provide mapping area codes positions derived directly polygons. Otherwise, mapping must provided resource file. Missing positions may filled samples (RstoxData::BioticData) RstoxFDA::SetAreaPositionsBiotic added new columns landings (RstoxData::StoxLandingData) RstoxFDA::AddAreaPositionStoxLanding. Note since format RstoxData::BioticData already columns positions, RstoxFDA::SetAreaPositionsBiotic fills missing values already existing column, happens converting StoxBioticData. Landings don’t exact positions, case landings positions added RstoxData::StoxLandingData.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"annotating-area-codes","dir":"Articles","previous_headings":"Area codes","what":"Annotating area codes","title":"StoX FDA data preparation (baseline)","text":"data positional information, columns area codes may added using RstoxFDA::AddStratumStoxBiotic RstoxFDA::AddStratumStoxLanding. latter provides several options name column added, can used either add column, change existing area column RstoxData::StoxLandingData. adding several AddStratumStoxLanding-processes StoX project, one area-column (‘Stratum’) can used strata model covariate, one area-column (‘Area’) can used domain definition reporting purposes.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"neighbour-matrix","dir":"Articles","previous_headings":"Area codes","what":"Neighbour matrix","title":"StoX FDA data preparation (baseline)","text":"Reca offers special kind random effect, called CAR-effect, often used spatial covariates requires definition neighborhood instance areas. direct spatial neighbors desired, polygons provided sufficient quality, function RstoxFDA::DefineCarNeighbours can used calculate neighborhood-information areas defined RstoxFDA::LoadFdaStratumPolygon RstoxBase::DefineStratumPolygon.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"example-stox-project-2","dir":"Articles","previous_headings":"Area codes","what":"Example: StoX-project","title":"StoX FDA data preparation (baseline)","text":"Area codes can used imputing positions annotating area codes data position, exemplified sequence processes table :","code":""},{"path":"/articles/StoX-data-preparation.html","id":"harmonising-codes","dir":"Articles","previous_headings":"","what":"Harmonising codes","title":"StoX FDA data preparation (baseline)","text":"FDA samples must typically assigned partitions census. Typically landings partitioned spatial component (area), gear temporal component (period), variables must represented coding systems samples (RstoxData::StoxBioticData) landings (RstoxData::StoxLandingData). samples landings may provided different coding systems instance gear. data may provided different resolution, high resolution adequately utilize available samples. case, re-coding re-grouping codes necessary, functions achieving introduced .","code":""},{"path":"/articles/StoX-data-preparation.html","id":"spatial-component-area-codes","dir":"Articles","previous_headings":"Harmonising codes","what":"Spatial component (Area codes)","title":"StoX FDA data preparation (baseline)","text":"section ‘Area’ describes spatial component can handled RstoxFDA::AddStratumStoxBiotic RstoxFDA::AddStratumStoxLanding, result samples landings annotated area codes.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"temporal-component-period-codes","dir":"Articles","previous_headings":"Harmonising codes","what":"Temporal component (Period codes)","title":"StoX FDA data preparation (baseline)","text":"temporal component can handled functions RstoxFDA::AddPeriodStoxBiotic RstoxFDA::AddPeriodStoxLanding. Similarly RstoxFDA::AddStratumStoxLanding, RstoxFDA::AddPeriodStoxLanding offers several options name column temporal category (period) added , possible add one variable (‘Period’) use strata covariate, one varaible (‘ReportPeriod’) defining domains reporting. RstoxFDA::AddPeriodStoxBiotic RstoxFDA::AddPeriodStoxLanding requires definition temporal category provided function RstoxFDA::DefinePeriod. can refer instance RstoxFDA::DefinePeriod, fact advisable, order ensure coding system used. RstoxFDA::DefinePeriod defines mapping dates periods, allows ‘Quarter’, ‘Month’ custom periods defined.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"gear-codes-1","dir":"Articles","previous_headings":"Harmonising codes","what":"Gear codes","title":"StoX FDA data preparation (baseline)","text":"Gear codes can handled functions RstoxFDA::AddGearGroupStoxBiotic RstoxFDA::AddGearGroupStoxLanding, adds new column ‘GearGroup’ tables. mapping gear codes provided resource file , read Stox function RstoxData::DefineTranslation, setting mapping variable ‘Gear’ ‘NewValue’. ‘NewValue’ harmonized code used samples landings. RstoxData::DefineTranslation allows several ‘Gear’ values mapped ‘NewValue’, gears may grouped fashion. RstoxFDA::AddGearGroupStoxBiotic RstoxFDA::AddGearGroupStoxLanding adds codes ‘NewValue’ new column named ‘GearGroup’. spatial temporal components, estimation reporting may treated differently. can achieved re-coding ‘Gear’-variable either RstoxData::StoxBiotic RstoxData::StoxLanding ‘GearGroup’ added. functions RstoxData::TranslateStoxBiotic RstoxData::TranslateStoxLanding may utilised purpose. source FDA landings data FDIR samples IMR (NMDbiotic), one immediately use common gear-definition landings samples. approach outlined rather defines common gear groups via two instances RstoxData::DefineTranslation. Another approach first translate ‘Gear’-variable samples coding system used landings, use common gear-grouping add ‘GearGroup’. Particularly 2-digit gear codes used sample-data, one needs careful approach make sure re-coding sample-gears complete. Otherwise ‘Gear’-column sample data contain two-digit codes two different coding-standards.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"example-stox-project-3","dir":"Articles","previous_headings":"Harmonising codes","what":"Example: StoX-project","title":"StoX FDA data preparation (baseline)","text":"Coding systems may harmonized samples landings sequence StoX-processes exemplified table :","code":""},{"path":"/articles/StoX-data-preparation.html","id":"stock-splitting-coastal-cod-analysis","dir":"Articles","previous_headings":"","what":"Stock-splitting (coastal cod analysis)","title":"StoX FDA data preparation (baseline)","text":"IMR species stock-typed based otolith readings, Reca provides analysis estimate catch age two domains defined stocks. example relies variables supported RstoxData::StoxBiotic, column stock-types need added using RstoxData::AddToStoxBiotic. addition model parameters analysis can defined StoX-baseline, described section ‘Reca parameters’","code":""},{"path":"/articles/StoX-data-preparation.html","id":"reca-parameters","dir":"Articles","previous_headings":"","what":"Reca parameters","title":"StoX FDA data preparation (baseline)","text":"estimation package Reca, complex parameters statistical models must defined Stox-Baseline, Reca configured use . : RstoxFDA::DefineStockSplittingParameters Defines uncertainty parameters stock-splitting (coastal-cod analysis). RstoxFDA::DefineAgeErrorMatrix Defines uncertainty parameters age readings. RstoxFDA::DefineCarNeighbours Define neighbour-matrix CAR-variable. require resource files, except RstoxFDA::DefineCarNeighbours, may also calculated area defintions, also described section ‘Area codes’.","code":""},{"path":"/articles/StoX-data-preparation.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"StoX FDA data preparation (baseline)","text":"functions introduced vignette enable use IMR samples FDIR landings obtain RstoxData::StoxBiotic RstoxData::StoxLanding data complete records harmonized code, ready analysis reporting. Relevant analysis reporting functions introduced vignettes. See instance Stox Fisheries overview (report) obtaining reports fishing activity sampled, Stox-Reca (analysis) estimating Catch Age Reca.","code":""},{"path":"/articles/Stox-FDA-overview.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"StoX Fisheries overview (report)","text":"RstoxFDA optional package StoX. order use functions introduced vignette StoX user interface, make sure RstoxFDA installed. See installation instructions github: StoXProject/RstoxFDA. install StoX user interface, see instructions github: StoXProject/StoX","code":""},{"path":"/articles/Stox-FDA-overview.html","id":"reports","dir":"Articles","previous_headings":"","what":"Reports","title":"StoX Fisheries overview (report)","text":"report functions display reports StoX. reports displayed StoX, addition written StoX-project directory standardized format tabular data. may imported software change rows sorted generate custom plots.","code":""},{"path":"/articles/Stox-FDA-overview.html","id":"landing-report","dir":"Articles","previous_headings":"Reports","what":"Landing report","title":"StoX Fisheries overview (report)","text":"StoX-baseline functions allows obtaining RstoxData::StoxLandingData aggregated, still rather detailed format. Temporally data aggregated date, landing site, gear, vessel length included highest resolution available. practical summaries landing statistics can obtained function RstoxFDA::ReportFdaLandings. function aggregates total landed weight, combination columns exist RstoxData::StoxLandingData, included columns added StoX-baseline. unit reported weight rounding reported weight configurable. Following R-convention, rounding nearest 10th 100th may specified providing negative numbers. example report tons, aggregated quarter gear-group rounded nearest 1000 tons. variables ‘ReportPeriod’ (Quarter) ‘GearGroup’ added StoX-baseline. table produced process named “LandingsOverview” therefore also located StoX project directory “output/report/LandingsOverview/FisheriesLandings.txt”. input report function set explicit reference StoX-baseline process data fetch . means desired split report several reports according values RstoxData::StoxLandingData, may achieved adding instances RstoxData::FilterStoxLanding StoX-baseline. report instance made several species, configuring filters accordingly.","code":""},{"path":"/articles/Stox-FDA-overview.html","id":"sampling-report","dir":"Articles","previous_headings":"Reports","what":"Sampling report","title":"StoX Fisheries overview (report)","text":"often desired inspect sampling programs covered fishing activity. can done defining partitions fisheries. instance one might one partition fishery gear, quarter area, tabulate sampling covered partition. necessary samples landing data coded harmonized fashion, using instance gear-codes. case, RstoxFDA::ReportFdaSampling can used generate tables comparison. variables define partition provided function parameter ‘GroupingVariables’ (e.g. ‘GearGroup’, ‘Stratum’, ‘Period’ gear, area quarter). Since FDA-data typically sampled highly clustered fashion, effective sample sizes simply determined number observations made (length measurements age readings), also number catches vessels measurements obtained . common clustering factors therefore reported along count observations. RstoxFDA::ReportFdaLandings, units rounding configurable. example depicts comparison samples landings. Notice partitioning fishery occur leftmost columns, along total landed weight partition (columns ‘GearGroup’, ‘Stratum’, ‘Period’ ‘LandedRoundWeight’). Since variables defining partition need defined coding system sample data landing data, RstoxFDA::ReportFdaSampling requires column name, provide columns option ‘GroupingVariables’. case GearGroup, Stratum Period obtained adding re-coding variables StoX-baseline RstoxData::StoxLandingData RstoxData::StoxBioticData. may note Demershal Seine (D. Seine) Stratum s500 sampled quarter 2 (Q2). may also note somewhat peculiar fact Trawl Stratum s300-400 sampled quarter 1 (Q1), even recorded landings . occurs time time need handled many kinds analysis, changing gear-groups, periodicity kinds data re-configuration. main reason occurs samples often provided higher temporal spatial resolution landings. Samples catches known fishing operation typically assigned temporal spatial variables describe fishing operation, landing consist many fishing operations dominant spatio-temporal variables reported landings. issue may also occasionally arise due error sample-records sales-notes.","code":""},{"path":"/articles/Stox-FDA-overview.html","id":"tabulating-multiple-sampling-programs","dir":"Articles","previous_headings":"Reports > Sampling report","what":"Tabulating multiple sampling programs","title":"StoX Fisheries overview (report)","text":"evaluating sampling coverage several sampling programs, may interest inspect sampling programs cover parts fisheries. sampling program identified variable RstoxData::StoxBioticData, variable can provided ‘SamplingVariable’ RstoxFDA::ReportFdaSampling order specify partitioning data. example illustrates variable ‘missiontypename’ identifies sampling programs. Note leftmost columns represent partitioning fishery repeated. particular ‘LandedRoundWeight’ repeated, sum column longer represent total landings. Immediately right ‘LandedRoundWeight’, sampling variable ‘missiontypename’ listed. represent different sampling programs samples collected , sample summaries columns right partitioned sampling program. ‘missiontypename’ regular column RstoxData::StoxBioticData, added function RstoxData::AddToStoxBiotic, data sourced NMDbiotic.","code":""},{"path":"/articles/Stox-FDA-overview.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"StoX Fisheries overview (report)","text":"functions introduced vignette enable use IMR samples FDIR landings obtain simple reports fishing activity covered sampling programs. analysis introduced vignettes. analysis relies proper data preparation described vignette StoX FDA data preparation (baseline).","code":""},{"path":"/articles/stox-reca.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"StoX-Reca (analysis)","text":"RstoxFDA Reca optional packages StoX. order use functions introduced vignette StoX user-interface, make sure RstoxFDA Reca installed. See installation instructions github: StoXProject/RstoxFDA. install StoX user-interface, see instructions github: StoXProject/StoX.","code":""},{"path":"/articles/stox-reca.html","id":"reca","dir":"Articles","previous_headings":"","what":"Reca","title":"StoX-Reca (analysis)","text":"ECA bayesian framework estimating total harvest stock age. refer estimates just ‘catch--age’. estimates based samples fisheries census (complete record) landing-data (sales-notes). framework implemented Norwegian Computing Center (Norsk Regnesentral) R-package called ‘Reca’. concepts models employed explained three papers Hirst et al. (2004, 2005, 2012). concepts treated papers implemented Reca-package, thorough technical description provided earlier implementation ECA, Rognebakke et al. (2016). Reca package follows closely description Rognebakke et al., model effects made configurable Reca, model effects described Rognebakke et al. included, effects may included addition instead. effects season, gear, region, boat, described Rognebakke et al. considered examples fixed effects (season gear), random effects (boat), conditional autoregressive variable (region). vignette introduces concepts Reca-package order guide practitioners configuring estimation using StoX. thorough introduction, please consult references cited introductory texts Bayesian statistics. tutorial covers use Reca via StoX user-interface, also possible use Reca directly R, independent StoX user-interface package RstoxFDA. use Reca, consult function documentation Reca, particularly functions: Reca::eca.estimate Reca::eca.predict.","code":""},{"path":"/articles/stox-reca.html","id":"bayesian-estimation","dir":"Articles","previous_headings":"Reca","what":"Bayesian estimation","title":"StoX-Reca (analysis)","text":"Bayesian inference assigns probability possible values parameter interest, total number fish caught certain age group, statistical distribution (posterior distribution) estimated parameter. interest quantify parameter single number, can deduced distribution. instance total number fish caught certain age group typically reported mean distribution. Similarly, interval can reported estimate capture range values parameter likely . StoX reports total catch age age 8, standard deviation, interval; actually mean, standard deviation, interval posterior distribution parameter ‘total catch age age 8’. different many ways estimating, single value estimated parameter another single value variance, confidence interval statistical distribution constructed based . bayesian statistics distribution comes first, point estimates intervals deduced . may sometimes lead confusing nomenclature, estimate total catch--age may referred ‘mean’, mean population catches, mean posterior distribution total catch age. interpretation point estimates intervals Bayesian models also different frequentist statistics, often referred ‘credible-intervals’, rather ‘confidence-intervals’. Consult introductory text bayesian statistics closer introduction differences interpretation. estimated distributions contingent model formulation, including notion ‘prior probabilities’, typically interpreted quantification belief one parameter consulting data. ECA prior probabilities (prior distributions) -called uninformed priors, means configured close agnostic parameters. Roughly speaking parameter values considered likely model sees data. Even different prior notion parameter-values may , Reca offer way configure prior beliefs. means Reca given little data, give wrong answers, wrong sense reflecting prior-distributions, purposefully un-informed. Likewise, iterations run, Reca able extract useful information data, looking results much influenced Recas prior distributions tentative parameter-values randomly assigned. therefore need assurance convergence results order interpret Reca-estimates. See section ‘Convergence’. posterior distributions parameters proportion--age mean weight--age found randomly proposing tentative values simulation, evaluating likelihood. likelihood reflects probable observed data (samples) ECA-models, using randomly proposed set values parameter. likely parameter-values assigned higher probability posterior distributions, less likely parameters assigned low probability. refer process parameterisation, performed StoX-function RstoxFDA::ParameterizeRecaModels, covered section ‘Parameterisation’. actually three models parameterised process. One model represents proportion age-group catches, one model represent relationship age length fish catches, one relates length weight. division three models, allows posterior distribution total catch different age-groups utilize incomplete data. instance catch-samples may length-observations, may length weight observations. allows supplementary samples without age-readings utilized, provides approximately unbiased handling length-stratified age-sampling. however possible run Reca without age-observations, package used length-structured stocks, even though Reca produces catch--length estimates age-structured stocks. posterior distribution total catch age age-groups obtained parameterisation, second simulation step. estimation- prediction- step draws values converged posterior distributions parameters needed calculate total catch--age, performs calculation iteration, producing posterior distribution final estimate. step, likelihood-calculations done, result simply derived converged simulations parameters. calculation performed iteration similar classical ratio-estimate, essence total catch age derived estimates proportion catch age-group, mean weight age, total landed weight. prediction-step separate simulation step, performed parameterisation, StoX-function RstoxFDA::RunRecaModels, covered section ‘Prediction’. Reca provides framework estimation, exact model configuration must tailored specific estimation tasks based specifics fishery sampling covers . configurations done data preparation step, performed StoX-function RstoxFDA::PrepareRecaEstimate, covered section ‘Data preparation’.","code":""},{"path":"/articles/stox-reca.html","id":"data-preparation","dir":"Articles","previous_headings":"Reca","what":"Data preparation","title":"StoX-Reca (analysis)","text":"Data preparation mainly done StoX-baseline, introduced vignette StoX FDA data preparation (baseline). Stox-baseline prepares set samples set landing-data (sale notes), converted format accepted Reca function RstoxFDA::PrepareRecaEstimate. parameters function also specifies cells (explained ), age-groups, length-groups, Reca-parameters data-formatting implications. function RstoxFDA::PrepareRecaEstimate also performs extensive checking make sure Reca halt due data-incompleteness issues codes used categorical variables. warnings error-messages issued function can usually amended addressing data preparation StoX-baseline. Data preparation involves configuring covariates model. Covariates typically variables categorizing samples categories expected distinct posterior distributions due natural differences fish fisheries. refer different variables covariate can levels covariate. instance ‘gear’ may configured covariate, may different levels, like ‘gillnet’, ‘trawl’, ‘seine’, detailed representation, FAO-gear codes. ‘vessel’ covariate, different levels values identifying vessel. Reca directly impose restriction coded, gears may regrouped renamed Stox-baseline, long consistently encoded samples landings. Reca uses information adapt parameterisation fact catches may differ different gears (different levels covariates), even need know covariate represents gear. covariates hard-coded Reca (haul-effect), number covariates can principle added, Reca need know whether treat ‘fixed’ effect, ‘random’ effect ‘CAR’ effect. terms explained later.","code":""},{"path":"/articles/stox-reca.html","id":"supplementary-length-samples","dir":"Articles","previous_headings":"Reca > Data preparation","what":"Supplementary length samples","title":"StoX-Reca (analysis)","text":"three-model structure ECA allows information drawn supplemental length-samples, accompanying age-information. incurs simulation missing ages proportion--age model take extra time, depending quality sampling may incur extra convergence issues. Whether include additional length data solely controlled filtering StoX-baseline. Reca uses available information. desired remove extra length-data, care taken remove lengths samples length-stratified age-sampling done. NMDbiotic data, means one filter codes sample-type, rather presence absence age-observations.","code":""},{"path":"/articles/stox-reca.html","id":"definining-cells","dir":"Articles","previous_headings":"Reca > Data preparation","what":"Definining cells","title":"StoX-Reca (analysis)","text":"‘cell’ terminology ECA, partition fishery (e.g. area, gear period), ECA applies model estimate total catch--age cell, adds grand total. addition, ECA terms parameterised independently cell. cell configuration differentiate parts fishery may different proportion different age-groups landed, different age-length relationships, different length-weight relationships, different variability . particular needs account difference follow sampling process (whether design ). cells defined simply making columns define (e.g. area, gear period) occur landings (RstoxData::StoxLandingData) samples (RstoxData::StoxBioticData) name, coding system. Consistency naming coding systems must ensured StoX-baseline.","code":""},{"path":"/articles/stox-reca.html","id":"cell-effect","dir":"Articles","previous_headings":"Reca > Data preparation > Definining cells","what":"Cell effect","title":"StoX-Reca (analysis)","text":"main reason defining cell specify combinations covariates appropriate landed weight fish assigned estimation parameters specific segment fishery. addition model may configured cell specific effect, modeled interaction term. random-effect covariate whose levels combination levels covariates define cell. can configured StoX option. ‘CellEffect’ RstoxFDA::PrepareRecaEstimate.","code":""},{"path":"/articles/stox-reca.html","id":"fixed-and-random-effects","dir":"Articles","previous_headings":"Reca > Data preparation > Definining cells","what":"Fixed and random effects","title":"StoX-Reca (analysis)","text":"covariate added configuration, term added Reca-models, decided whether terms added ‘fixed effect’, ‘random effect’, special kind random effect, called ‘CAR-effect’. fixed effects, parameters parameterised independently level covariate (e.g. ‘gillnet’, ‘trawl’ ‘seine’ covariate ‘gear’). prior-distribution introduced level, affected parameters get separate posterior distribution level covariate, hence independent mean values. calculating total catch age, terms ECA model sampled posterior distribution specific exact level covariate relevant cell. covariates part cell definition may configured fixed effects, cell correspond one unique level fixed effect covariates. random effects, different levels (e.g. ‘gillnet’, ‘trawl’ ‘seine’) represented terms drawn distribution, variance / precision specific level. parameterisation determines likely mean distribution, values specific precisions. formulation requires representative sample different covariate-values observed, thus allow inference segments fishery also contain unobserved levels. comes cost representing parameters covariate values mean, samples levels covariate allowed influence parameterisation levels. errors different different levels, levels sampled, implicit inference unobserved values dubious. Random-effect modelling covariates possible values best motivated sampling efficient, values unsampled poorly sampled, also ones corresponding low fishing activity low landing-volumes. Otherwise random-effect modelling good way capture clustering (may instance imposed multi-stage sampling). cases large number possible values covariate, sampled representative manner. instance vessel-effect can modeled way. Gear typically rather candidate fixed effect, particularly samples stratified gear. Typically, desirable model gear, time, area fixed effects, ensure samples used belong, practice can achieved area, gear time represented coarse resolution. important restriction order treat effects fixed, combinations fixed effects must sampled sufficient extent, definitely extent . combinatorics quickly becomes unfeasible gears, areas quarters represented fine resolution. modest resolution 4 gear types, 4 areas 4 periods (quarters) results 64 cells. Since total landed weight usually unevenly distributed cells, since sampling capacity limited, covering cells adequate sampling direct conflict directing sampling effort cells high activity. Commonly, gears areas therefore grouped together groups presumably similar catch-composition (reducing resolution). achieved StoX-baseline. addition, covariates may pragmatically configured random effects. , often covariates one like model fixed effects find sufficient data model configuration. cases one must consider either reducing number values covariates (grouping gears, instance), reconfigure covariate random effect. general grouping desirable categories similar catch-compositions can merged. unsampled poorly sampled combinations fixed effects fractions fisheries small volume landings, reconfiguring random effect can done minor sacrifices accuracy precision. inefficient sampling, parts fisheries landings poorly sampled, one careful random-effect configurations, rather necessary grouping variables make sure samples minor part fishery allowed dominate estimation. order make informed decisions effect-configurations may necessary analyse sampling. support provided StoX described vignette Stox Fisheries overview (report). Particularly, function RstoxFDA::ReportFdaSampling useful comparing sampling coverage possible cell-configurations. can reveal sampling succeeded covering cells landed catch well (wrp random-effect configuration), can reveal fixed-effect configurations possible, additional grouping covariate levels can make possible.","code":""},{"path":"/articles/stox-reca.html","id":"car-effect","dir":"Articles","previous_headings":"Reca > Data preparation > Definining cells","what":"CAR effect","title":"StoX-Reca (analysis)","text":"Reca also allows CAR-effect configured (Conditional-autoregressive effect). random effect, somewhat complex representation distributions ‘shared’ effect levels. CAR-effect allows user configure levels covariate allowed influence others corresponding terms ECA models. commonly used spatial covariate (area), allow neighboring areas influence . terms data-requirements, area (one neighbours) must sampled combination fixed effects. user can specify neighbour-relation, reflect spatial adjacency. neighbour-definition set StoX-baseline. Unlike fixed regular random effects, Reca allows one CAR-effect configured.","code":""},{"path":"/articles/stox-reca.html","id":"data-configuration","dir":"Articles","previous_headings":"Reca > Data preparation > Definining cells","what":"Data configuration","title":"StoX-Reca (analysis)","text":"variables treated ‘fixed’, ‘random’ ‘CAR’ specified function RstoxFDA::PrepareRecaEstimate. function age groups also specified (max min age), length groups specified (max-length length-resolution). length resolution specified, models use modal minimum length-difference catches length resolution. parameter ‘HatchDay’ indicates fish assumed hatch, customarily set 1, 1st January. RstoxFDA::PrepareRecaEstimate offers special options ‘UseStockSplitting’ ‘UseAgingError’, treated later sections. RstoxFDA::PrepareRecaEstimate run, extensive data checks performed check minimal requirements configuration met. Errors warnings issued stage assist user excluding model configurations run provided data.","code":""},{"path":"/articles/stox-reca.html","id":"sampling-desings-and-model-effects","dir":"Articles","previous_headings":"Reca > Data preparation","what":"Sampling desings and model effects","title":"StoX-Reca (analysis)","text":"Reca flexible, can configured utilize observational ad-hoc samples, biases can corrected appropriate configuration covariates. Rigorous sampling designs may contain ‘biases’ design, sense may deviate simple random sampling. happens instance common sampling techniques stratification clustered-sampling employed. cases, information available correct sampling effects, Reca can informed correct configuration model covariates.","code":""},{"path":"/articles/stox-reca.html","id":"stratification-and-fixed-effects","dir":"Articles","previous_headings":"Reca > Data preparation > Sampling desings and model effects","what":"Stratification and fixed effects","title":"StoX-Reca (analysis)","text":"order stratified selection landings fishing operations correctly handled, strata cell, correct assignment total landings strata assured. variables defining strata configured fixed effects, sampling effort typically specified independently strata.","code":""},{"path":"/articles/stox-reca.html","id":"clustering-and-random-effects","dir":"Articles","previous_headings":"Reca > Data preparation > Sampling desings and model effects","what":"Clustering and random effects","title":"StoX-Reca (analysis)","text":"Random effects hand, well suited represent clustered sampling, clusters sampled equal probability. Since fish sampled via fishing operation, Reca non-configurable random effect representing ‘haul’. practice ‘haul’ can approximation fishing operation, instance total-day catch. multi-stage clustered sampling, may several stages selection haul-selection performed. sampling units selected initial stages represented random effects, unless good reasons believe interfere assumptions independent selection hauls. intermediate stages can selection vessel, indicating vessel-effect included random effect. Correct model-configuration affect variability bias results, can important distinguish two. Reca models assumes sampling done simple random manner within cell, case, result biased simply due sampling bias. therefore important cell-, covariate- configuration correctly reflects approximate stratification sampling designs, provide reasonable post-stratification ad-hoc -documented sampling. Apart , advantageous terms precision estimate, cells configured similar catches appear similar cells. may therefore relevant include cell-configuration covariates dictated sampling. addition covariates Reca models increases model complexity, hence demands sample sizes. Tradeoffs may necessary, important respect configure model exclude sources bias sampling. easy sampling well controlled, biases introduced places design (stratification clustered sampling). less stringent sampling complex sampling, one may make decisions covariates important include.","code":""},{"path":"/articles/stox-reca.html","id":"parameterisation","dir":"Articles","previous_headings":"Reca","what":"Parameterisation","title":"StoX-Reca (analysis)","text":"data preparation steps done, may perform parameterisation step, using function RstoxFDA::ParameterizeRecaModels.","code":""},{"path":"/articles/stox-reca.html","id":"growth-model","dir":"Articles","previous_headings":"Reca > Parameterisation","what":"Growth model","title":"StoX-Reca (analysis)","text":"one model choice make step, type growth-model use. model choices done data-configuration step. stocks ‘log-linear’ growth assumed. fish flat asymptotic length, ‘non-linear’ model may considered. ‘non-linear’ option specifies Schnute-Richards growth model. added ECA models adapted use herring-stocks. Herring strong decline growth maturation, log-linear model found poor fit.","code":""},{"path":"/articles/stox-reca.html","id":"simulation-parameters","dir":"Articles","previous_headings":"Reca > Parameterisation","what":"Simulation parameters","title":"StoX-Reca (analysis)","text":"important parameters decide upon running model number iterations run. , deciding many sufficient, since one principle like run many possible. necessarily pragmatic choice, discussed section ‘Convergence’. now suffice say configured parameters ‘Nsamples’, ‘Burnin’ ‘Thin’, running time increases number iterations. common run short exploratory runs, remaining data issues can detected early, preliminary output available configuring reports, setting convergence checks. ‘Nsamples’ determine number samples used represent posterior distributions final results, also parameter implications intermediate storage results (see section Estimate). ‘Burnin’ number iterations parameterisation routine run ‘Nsamples’ iteration. included posterior distributions. ‘Thin’ specifies number samples run ‘Nsamples’ iterations, also included posterior distributions.","code":""},{"path":"/articles/stox-reca.html","id":"cached-data","dir":"Articles","previous_headings":"Reca > Parameterisation","what":"Cached data","title":"StoX-Reca (analysis)","text":"Since production runs time-consuming, one may consider using option ‘UseCachedData’. allows previous runs Reca restored, instead running models . check input parameters performed, use previous runs allowed input parameters exactly last run. includes implicitly set parameters, ‘Seed’. See function documentation RstoxFDA::ParameterizeRecaModels information.","code":""},{"path":"/articles/stox-reca.html","id":"temporary-storage","dir":"Articles","previous_headings":"Reca > Parameterisation","what":"Temporary storage","title":"StoX-Reca (analysis)","text":"Reca requires temporary storage efficient communication different steps estimation. storage space must specified parameter ‘ResultDirectory’. implications transferrability StoX-projects computers. running project configured different computer, expect change parameter.","code":""},{"path":"/articles/stox-reca.html","id":"prediction","dir":"Articles","previous_headings":"Reca","what":"Prediction","title":"StoX-Reca (analysis)","text":"model parameterised, may compute estimates, done prediction-step. done function RstoxFDA::RunRecaModels. function performs estimation parameterised models provided set landings. landings may different used data configuration step, restrictions detailed function documentation. particular, subset landings used data-preparation acceptable. Estimation may also done groups defined columns landings, rather entire fishery. defining groups, combination categorical variables acceptable. may ones defining cells, may differ, may even different encodings information. instance models may use one area definition covariate, still predictions may done different area definition (e.g. ICES areas). groups estimations done provided argument ‘GroupingVariables’. practice reporting different variables ECA treats covariates convenient often necessary meet reporting demands. kept mind though, may misrepresent quality estimates recipients reports. Reports fine spatial grid may implicitly suggest entire grid sampled. RstoxFDA::RunRecaModels report estimated numbers age length groups, requested groups, iterations done parameterisation (‘Nsamples’ RstoxFDA::ParameterizeRecaModels). may amount large table, may fact exhaust memory available tabulation R. Since reports require results length-groups, RstoxFDA::RunRecaModels offers option ‘CollapseLength’ merges length groups one. possible set several estimations parameterisation, configure detailed groups collapsed lengths, less detailed groups without collapsed lengths. practice usually sufficient get necessary final reports, avoiding memory-exhaustion problems. option ‘TemporalResolution’ specifies accuracy fractional ages internally Reca. time catch determines time death fish, fish fished early year considered younger time catch fish year-class fished late year. implication estimations via age-length relationships, practice little concern. ‘TemporalResolution’ match temporal covariate model. may specified Quarter, even Periods defined covariates, even temporal covariate configured .","code":""},{"path":"/articles/stox-reca.html","id":"convergence","dir":"Articles","previous_headings":"Reca","what":"Convergence","title":"StoX-Reca (analysis)","text":"interpretation results computed Reca dependent converged representation posterior distributions. One really prove convergence, signs lack convergence can detected, simulations can extended indications either absent, can considered unlikely practical consequence. also formal convergence criteria, can use convergence metrics allow simulations compared standards field. practice, parameters many observations approximate converged values much sooner parameters observations. Unconverged remnants may therefore often seen rare age-groups, (sampling efficient) fractions fisheries little catch. may acceptable values small, information supports small, justifies exclusion values reports. instance, may many stocks expected biological point view catch oldest sampled age groups small. fish certain age groups priori expected uncommon, also expected determined low accuracy even converged parameterisations, practitioners accept estimates, even convergence criteria met age groups.","code":""},{"path":"/articles/stox-reca.html","id":"result-convergence","dir":"Articles","previous_headings":"Reca > Convergence","what":"Result convergence","title":"StoX-Reca (analysis)","text":"One approach inspecting convergence plot entire posterior distribution results. plotted order iterations, called traceplots. ideal traceplot looks like random noice. Rare peculiarities iterations impact summary posterior distributions (mean, standard deviations, intervals) must well sampled order consider parameterisation converged. Isolated spikes traceplots indications non-convergence, can usually addressed running burnin-iterations. reason plotting traceplots order iterations known artifact simulation algorithm used Reca may cause sequential iterations entirely independent . shows traceplots autocorrelations. pragmatic way address use ‘Thin’ parameter RstoxFDA::ParameterizeRecaModels.","code":""},{"path":"/articles/stox-reca.html","id":"parameter-convergence","dir":"Articles","previous_headings":"Reca > Convergence","what":"Parameter convergence","title":"StoX-Reca (analysis)","text":"somewhat rigorous approach convergence checking carefully check every parameter models converged. One common criteria, accompanying rule--thumb proposed Gelman & Rubin (1992). Gelman-Rubins R-statistic computed repeated Reca-runs (chains), simulations considered converged independent runs longer distinguishable sense within-chain variation -chain variation. R-statistic quantifies divergence ratio interpretable different models, common rule thumb consider simulations converged parameters Gelman-Rubins R less 1.1. Like rules thumb, threshold 1.1 universally relevant, experimenting sensitivity results quantitative yardsticks convergence can help build confidence model configurations. Another useful aspect convergence criteria calculated parameter, makes easy sort parameters slow converge. allows reasoning causes issues convergence, reasoning caveats involved accepting unconverged results. order set analysis Gelman-Rubins R-statistic StoX, three separate parameterisations must run (RstoxFDA::ParameterizeRecaModels) number iterations. parameterisations can summarised accumulated report-tab StoX user-interface, using RstoxFDA::ReportRecaParameterStatistics, R-statistic can computed RstoxFDA::ReportParameterConvergence.","code":""},{"path":"/articles/stox-reca.html","id":"stox-project","dir":"Articles","previous_headings":"Reca","what":"StoX project","title":"StoX-Reca (analysis)","text":"summary, Reca can run StoX user-interface configuring least tree functions exemplified table , analysis-tab:","code":""},{"path":"/articles/stox-reca.html","id":"reports","dir":"Articles","previous_headings":"Reca","what":"Reports","title":"StoX-Reca (analysis)","text":"RstoxFDA::RunRecaModels provides entire posterior distribution age length groups, usually summarizing results necessary. useful report-functions Reca-results listed table . can added report-tab StoX user-interface. summarize within groups defined RstoxFDA::RunRecaModels. general aggregation reporting (area, quarter, etc.) defined RstoxFDA::RunRecaModels, reporting options, PlusGroups, units, number decimals length-groups configured report function. reporting estimates poorly converged age-groups, reports provide ‘Threshold’ option allows exclusion low-abundance age-groups reports. addition functions relevant context, may also used estimation approaches Reca:","code":""},{"path":"/articles/stox-reca.html","id":"stock-splitting","dir":"Articles","previous_headings":"Reca","what":"Stock splitting","title":"StoX-Reca (analysis)","text":"stocks defined parameters observed individual fish, identified species landings. total catch stocks must estimated samples. Reca supports kind estimation cross-categorization stock age groups, separate age-length relationsship stock. specifics model formulation tightly connected coding schemes used cod, classified coastal-cod atlantic / North-east arctic cod, based otolith-typing. addition typing coastal, NEA-cod, two codes used reflect classification uncertainty. principle, domain estimates potential difference age-length relationship can estimated framework, adaptation cod coding-scheme necessary. order use Stock-splitting. function RstoxFDA::DefineStockSplittingParameters must added StoX baseline, function RstoxFDA::PrepareRecaEstimate must configured appropriate options. data-preparation configured way, RstoxFDA::RunRecaModels produces reports column ‘Stock’ grouping variable. addition grouping variable specified report-function.","code":""},{"path":"/articles/stox-reca.html","id":"aging-error","dir":"Articles","previous_headings":"Reca","what":"Aging error","title":"StoX-Reca (analysis)","text":"Reca allows quantification bias variability age-readings represented models. can done including aging-error matrix StoX-baseline (RstoxFDA::DefineAgeErrorMatrix), configuring RstoxFDA::PrepareRecaEstimate accordingly. Reliable sources overall bias age readings rare, information variability can estimated age-reading workshops. functionality may also used hypothetical reading errors explore relative importance reading-error sampling error determining total catch age.","code":""},{"path":"/articles/stox-reca.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"StoX-Reca (analysis)","text":"Hirst et al. 2004 Hirst, David, Sondre Aanes, Geir Storvik, Ragnar Bang Huseby, Ingunn Fride Tvete. 2004. “Estimating Catch Age Market Sampling Data Using Bayesian Hierarchical Model.” Journal Royal Statistical Society: Series C (Applied Statistics) 53 (1): 1–14. https://doi.org/10.1111/j.1467-9876.2004.00422.x. Hirst et al. 2005 Hirst, David, Geir Storvik, Magne Aldrin, Sondre Aanes, Ragnar Bang Huseby. 2005. “Estimating Catch--Age Combining Data Different Sources” 62: 9. Hirst et al. 2012 Hirst, David, Geir Storvik, Hanne Rognebakke, Magne Aldrin, Sondre Aanes, Jon Helge Vølstad. 2012. “Bayesian Modelling Framework Estimation Catch--Age Commercially Harvested Fish Species.” Edited Terrance Quinn. Canadian Journal Fisheries Aquatic Sciences 69 (12): 2064–76. https://doi.org/10.1139/cjfas-2012-0075. Rognebakke et al. 2016 Rognebakke, Hanne, David Hirst, Sondre Aanes, Geir Storvik. n.d. “Catch--Age – Version 4.0: Technical Report,” SAMBA/54/16, https://nr./publikasjon/1416083/ Gelman & Rubin 1992 Gelman, Andrew, Donald B. Rubin. 1992. “Inference Iterative Simulation Using Multiple Sequences.” Statistical Science 7 (4). https://doi.org/10.1214/ss/1177011136.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Arne Johannes Holmin. Maintainer, author. Edvin Fuglebakk. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Holmin , Fuglebakk E (2023). RstoxFDA: Fisheries Dependent Analysis RstoX. R package version 1.3.0-9001, https://github.com/StoXProject/RstoxFDA.","code":"@Manual{,   title = {RstoxFDA: Fisheries Dependent Analysis with RstoX},   author = {Arne Johannes Holmin and Edvin Fuglebakk},   year = {2023},   note = {R package version 1.3.0-9001},   url = {https://github.com/StoXProject/RstoxFDA}, }"},{"path":"/index.html","id":"rstoxfda","dir":"","previous_headings":"","what":"Fisheries Dependent Analysis with RstoX","title":"Fisheries Dependent Analysis with RstoX","text":"Fisheries Dependent Analysis Rstox. Documentation can found : https://stoxproject.github.io/RstoxFDA/index.html . Functions, data formats, data objects documented ‘Reference’ tutorials get started provided ‘Articles’.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fisheries Dependent Analysis with RstoX","text":"Install latest release: r     install.packages(\"RstoxFDA\", repos = c(\"https://stoxproject.github.io/repo\", \"https://cloud.r-project.org\")) Install latest version GitHub: r     remotes::install_github(\"https://github.com/StoXProject/RstoxFDA\")","code":""},{"path":"/index.html","id":"stox","dir":"","previous_headings":"","what":"StoX","title":"Fisheries Dependent Analysis with RstoX","text":"RstoxFDA contains functions adheres StoX 3 function-contracts can included StoX-processes via StoX user interfaces. includes functions StoX-Reca template. RstoxFDA come bundled StoX, needs installed addition StoX packages, following instructions .","code":""},{"path":"/index.html","id":"not-stox","dir":"","previous_headings":"","what":"Not StoX","title":"Fisheries Dependent Analysis with RstoX","text":"RstoxFDA analysis-library also works independently StoX functions available StoX user interface. functions available StoX user interface starts capital letter listed https://stoxproject.github.io/RstoxFDA/reference/index.html#stox-functions.","code":""},{"path":"/index.html","id":"reporting-problems","dir":"","previous_headings":"","what":"Reporting problems","title":"Fisheries Dependent Analysis with RstoX","text":"preferred way communicate problems raising issue RstoxFDA github page. Users encouraged also report documentation lacking, erroneous ambiguous. reporting bugs, please report versions using R, RstoxFDA, operating system. Please also report error messages, possible include instructions reproduce problem.","code":""},{"path":"/index.html","id":"reca","dir":"","previous_headings":"","what":"Reca","title":"Fisheries Dependent Analysis with RstoX","text":"Reca library estimating total catch age commerical catches. RstoxFDA contains functions adapting data Reca, running estimates, plotting tabulating results. functions availble StoX user interface. addition functions provided adapting Reca data formats just ones supported Stox. Reca primarily available : https://github.com/NorskRegnesentral/Reca. One may also consider installing fork https://github.com/StoXProject/reca StoX repository https://stoxproject.github.io/repo/, resources considered experimental, backed maintenance policy: ","code":"remotes::install_github(\"https://github.com/StoXProject/reca\") install.packages(\"Reca\", repos=c(\"https://stoxproject.github.io/repo/\"))"},{"path":"/index.html","id":"reca-on-managed-systems","dir":"","previous_headings":"Reca","what":"Reca on managed systems","title":"Fisheries Dependent Analysis with RstoX","text":"Special considerations may made managed systems, Reca needs start programs bundled package needs necessary system permission . Problems related executing Reca insufficient system permissions indicated error messages stating program CAA_MA~1.EXE failed run. instance Windows-users IMR may want adress installing Reca R-session started administrator. Installing Reca administrator may lead several copies Reca installed, one also make sure R chooses right one. One way ensure first uninstall Reca package installed common way: * open R regular user * uninstall Reca remove.packages() * close R * open R administrator * install Reca, e.g.: install.packages(“Reca”, repos=c(“https://stoxproject.github.io/repo/”)) * close R.","code":""},{"path":"/index.html","id":"maintainance-policy","dir":"","previous_headings":"","what":"Maintainance policy","title":"Fisheries Dependent Analysis with RstoX","text":"still process developing policy exactly versions R operating systems strive keep RstoxFDA working , often revise policy. page updated policies av finalized, users prepared necessary keep environment date continued used RstoxFDA. also make public policy backwards compatibility, order us manage deprecation functions. Currently latest release/pre-release RstoxFDA tested following R versions: R 4.0 (mac, linux, windows) R 4.1 (mac, linux, windows) R 4.2 (mac, linux, windows) R 4.3 (windows)","code":""},{"path":"/reference/AddAreaPositionStoxLanding.html","id":null,"dir":"Reference","previous_headings":"","what":"Append position to landings data — AddAreaPositionStoxLanding","title":"Append position to landings data — AddAreaPositionStoxLanding","text":"StoX function Appends position landings data, based Area Location codes.","code":""},{"path":"/reference/AddAreaPositionStoxLanding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append position to landings data — AddAreaPositionStoxLanding","text":"","code":"AddAreaPositionStoxLanding(   StoxLandingData,   AreaPosition,   LocationVariable = c(\"None\", \"Location\", \"Coastal\") )"},{"path":"/reference/AddAreaPositionStoxLanding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append position to landings data — AddAreaPositionStoxLanding","text":"StoxLandingData landing data, see StoxLandingData AreaPosition coordinates Area Location codes, see AreaPosition LocationVariable Specify column 'StoxLandingsData' represented 'Location' 'AreaPosition'. See details.","code":""},{"path":"/reference/AddAreaPositionStoxLanding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append position to landings data — AddAreaPositionStoxLanding","text":"StoxLandingData columns latitude longitude appended.","code":""},{"path":"/reference/AddAreaPositionStoxLanding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Append position to landings data — AddAreaPositionStoxLanding","text":"Positions appended new columns 'Latitude' 'Longitude' 'LocationVariable' specified 'None' Area looked 'AreaPosition', using row 'Location' missing. 'LocationVariable' specified 'Location', 'Area' 'Location' 'StoxLandingData' looked 'Area' 'Location' 'AreaPosition'. 'LocationVariable' specified 'Coastal', 'Area' 'Costal' 'StoxLandingData' looked 'Area' 'Location' 'AreaPosition'.","code":""},{"path":"/reference/AddGearGroupStoxBiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Gear group to StoxBioticData — AddGearGroupStoxBiotic","title":"Add Gear group to StoxBioticData — AddGearGroupStoxBiotic","text":"Adds column StoxBioticData gear groups","code":""},{"path":"/reference/AddGearGroupStoxBiotic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Gear group to StoxBioticData — AddGearGroupStoxBiotic","text":"","code":"AddGearGroupStoxBiotic(StoxBioticData, Translation)"},{"path":"/reference/AddGearGroupStoxBiotic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Gear group to StoxBioticData — AddGearGroupStoxBiotic","text":"StoxBioticData StoxBioticData data annotated. Translation Translation table (Translation). See details.","code":""},{"path":"/reference/AddGearGroupStoxBiotic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Gear group to StoxBioticData — AddGearGroupStoxBiotic","text":"StoxBioticData column 'GearGroup' appended. See StoxBioticData.","code":""},{"path":"/reference/AddGearGroupStoxBiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Gear group to StoxBioticData — AddGearGroupStoxBiotic","text":"Gear groups defined translations gear code gear group. Translation need defined VariableName 'Gear' (see Translation). provided Translation map values ('Gear' Translation) variable 'Gear'table 'Haul' 'StoxBioticData' gear group ('NewValue' Translation). gear group added 'StoxBioticData' column 'GearGroup' comparison co-analysis landing data, Translation defined StoxLandingData gear groups.","code":""},{"path":[]},{"path":"/reference/AddGearGroupStoxLanding.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Gear group to StoxLandingData — AddGearGroupStoxLanding","title":"Add Gear group to StoxLandingData — AddGearGroupStoxLanding","text":"Adds column StoxLandingData gear groups","code":""},{"path":"/reference/AddGearGroupStoxLanding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Gear group to StoxLandingData — AddGearGroupStoxLanding","text":"","code":"AddGearGroupStoxLanding(StoxLandingData, Translation)"},{"path":"/reference/AddGearGroupStoxLanding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Gear group to StoxLandingData — AddGearGroupStoxLanding","text":"StoxLandingData StoxLandingData data annotated. Translation Translation table (Translation). See details.","code":""},{"path":"/reference/AddGearGroupStoxLanding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Gear group to StoxLandingData — AddGearGroupStoxLanding","text":"StoxLandingData column 'GearGroup' appended.","code":""},{"path":"/reference/AddGearGroupStoxLanding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Gear group to StoxLandingData — AddGearGroupStoxLanding","text":"Gear groups defined translations gear code gear group. Translation need defined VariableName 'Gear' (see Translation). provided Translation map values ('Gear' Translation) variable 'Gear' 'StoxBioticData' gear group ('NewValue' Translation). gear group added 'StoxLandingData' column 'GearGroup' comparison co-analysis sample data, Translation defined StoxBioticData gear groups.","code":""},{"path":[]},{"path":"/reference/AddPeriodStoxBiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Period to StoxBioticData — AddPeriodStoxBiotic","title":"Add Period to StoxBioticData — AddPeriodStoxBiotic","text":"Add column 'Period' 'Station' StoxBioticData temporal category, 'quarter'.","code":""},{"path":"/reference/AddPeriodStoxBiotic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Period to StoxBioticData — AddPeriodStoxBiotic","text":"","code":"AddPeriodStoxBiotic(   StoxBioticData,   TemporalDefinition,   ColumnName = character() )"},{"path":"/reference/AddPeriodStoxBiotic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Period to StoxBioticData — AddPeriodStoxBiotic","text":"StoxBioticData StoxLandingData data annotated period. TemporalDefinition TemporalDefinition definition temporal category. ColumnName specifies column area added . Defaults Period.","code":""},{"path":"/reference/AddPeriodStoxBiotic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Period to StoxBioticData — AddPeriodStoxBiotic","text":"StoxBioticData column appended. See StoxBioticData. DefinePeriod configuring temporal definition, AddStratumStoxLanding similar function landing data, PrepareRecaEstimate use 'Period' effect Reca-estimation, ReportFdaSampling use 'Period' aggregation variable comparing sampling landed volume.","code":""},{"path":"/reference/AddPeriodStoxBiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Period to StoxBioticData — AddPeriodStoxBiotic","text":"'Period' added based column 'DateTime' table 'Station' 'StoxBioticData'. Temporal definitions (TemporalDefinition) may produced DefinePeriod","code":""},{"path":"/reference/AddPeriodStoxLanding.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Period to StoxLandingData — AddPeriodStoxLanding","title":"Add Period to StoxLandingData — AddPeriodStoxLanding","text":"Add column StoxLandingData temporal category, quarters.","code":""},{"path":"/reference/AddPeriodStoxLanding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Period to StoxLandingData — AddPeriodStoxLanding","text":"","code":"AddPeriodStoxLanding(   StoxLandingData,   TemporalDefinition,   ColumnName = character() )"},{"path":"/reference/AddPeriodStoxLanding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Period to StoxLandingData — AddPeriodStoxLanding","text":"StoxLandingData StoxLandingData data annotated. TemporalDefinition TemporalDefinition definition temporal category. ColumnName Name added column. Defaults Period.","code":""},{"path":"/reference/AddPeriodStoxLanding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Period to StoxLandingData — AddPeriodStoxLanding","text":"StoxLandingData column appended. See StoxLandingData.","code":""},{"path":"/reference/AddPeriodStoxLanding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Period to StoxLandingData — AddPeriodStoxLanding","text":"column temporal category added based column 'CatchDate' 'StoxLandingData'. Temporal definitions (TemporalDefinition) may produced DefinePeriod Since may useful use different temporal categories instance parameterization reporting two choices offered name added column (see argument 'ColumnName').","code":""},{"path":[]},{"path":"/reference/AddStratumStoxBiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds Stratum to StoxBioticData — AddStratumStoxBiotic","title":"Adds Stratum to StoxBioticData — AddStratumStoxBiotic","text":"Adds column 'Stratum' StoxBioticData spatial strata row belongs .","code":""},{"path":"/reference/AddStratumStoxBiotic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds Stratum to StoxBioticData — AddStratumStoxBiotic","text":"","code":"AddStratumStoxBiotic(StoxBioticData, StratumPolygon, ColumnName = character())"},{"path":"/reference/AddStratumStoxBiotic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds Stratum to StoxBioticData — AddStratumStoxBiotic","text":"StoxBioticData StoxBioticData data annotated. Needs postions appended. See details. StratumPolygon Definition spatial strata. See StratumPolygon ColumnName specifies column area added . Defaults Stratum.","code":""},{"path":"/reference/AddStratumStoxBiotic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds Stratum to StoxBioticData — AddStratumStoxBiotic","text":"StoxBioticData column appended data.table 'Station'. See StoxBioticData.","code":""},{"path":"/reference/AddStratumStoxBiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds Stratum to StoxBioticData — AddStratumStoxBiotic","text":"strata added new column 'Stratum'.","code":""},{"path":[]},{"path":"/reference/AddStratumStoxLanding.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds Strata to StoxLandingData — AddStratumStoxLanding","title":"Adds Strata to StoxLandingData — AddStratumStoxLanding","text":"Adds column StoxLandingData spatial strata row belongs .","code":""},{"path":"/reference/AddStratumStoxLanding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds Strata to StoxLandingData — AddStratumStoxLanding","text":"","code":"AddStratumStoxLanding(   StoxLandingData,   StratumPolygon,   ColumnName = character() )"},{"path":"/reference/AddStratumStoxLanding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds Strata to StoxLandingData — AddStratumStoxLanding","text":"StoxLandingData StoxLandingData data annotated. Needs postions appended. See details. StratumPolygon Definition spatial strata. See StratumPolygon ColumnName specifies column area added . See details. Defaults Stratum.","code":""},{"path":"/reference/AddStratumStoxLanding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds Strata to StoxLandingData — AddStratumStoxLanding","text":"StoxLandingData column appended. See StoxLandingData.","code":""},{"path":"/reference/AddStratumStoxLanding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds Strata to StoxLandingData — AddStratumStoxLanding","text":"strata added new column specified ColumName. 'ColumnName' 'Area', column 'Area' StoxLandingData overwritten. columns StoxLandingData may specified. StoxLandingData contain columns positions, need added columns 'Latitude' 'Longitude' calling function. AddAreaPositionStoxLanding may used append positions, based area codes.","code":""},{"path":[]},{"path":"/reference/AgeErrorMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Age Error Matrix (AgeErrorMatrix) — AgeErrorMatrix","title":"Age Error Matrix (AgeErrorMatrix) — AgeErrorMatrix","text":"Table (data.table) defining probabilities misreading age.","code":""},{"path":"/reference/AgeErrorMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Age Error Matrix (AgeErrorMatrix) — AgeErrorMatrix","text":"columns 1..n numeric() [0,1]. Probability reading read age, given true age column name. ReadAge read age. Columns sum 1.","code":""},{"path":"/reference/AreaPosition.html","id":null,"dir":"Reference","previous_headings":"","what":"Area Code Positions (AreaPosition) — AreaPosition","title":"Area Code Positions (AreaPosition) — AreaPosition","text":"Table (data.table) defining position area codes.","code":""},{"path":"/reference/AreaPosition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Area Code Positions (AreaPosition) — AreaPosition","text":"Area Area code. (key) Location optional subdivision 'Area' Latitude WGS84 Latitude, decimal degrees Longitude WGS84 Longitude, decimal degrees location provided, case missing location also encoded.","code":""},{"path":"/reference/CarNeighbours.html","id":null,"dir":"Reference","previous_headings":"","what":"Area Neighbour Definition (CarNeighbours) — CarNeighbours","title":"Area Neighbour Definition (CarNeighbours) — CarNeighbours","text":"Table (data.table) defining neighbours CAR-variable (Conditional autoregressive variable).","code":""},{"path":"/reference/CarNeighbours.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Area Neighbour Definition (CarNeighbours) — CarNeighbours","text":"CarValue Values variable used CAR-variable Neighbours Comma-separated list neighbours table symmetric, b neighbour . also neighbour b.","code":""},{"path":"/reference/ConvertLengthBiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert lengths Biotic — ConvertLengthBiotic","title":"Convert lengths Biotic — ConvertLengthBiotic","text":"Convert lengths approximate values desired length measurement. Typically 'total length'.","code":""},{"path":"/reference/ConvertLengthBiotic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert lengths Biotic — ConvertLengthBiotic","text":"","code":"ConvertLengthBiotic(   BioticData,   LengthConversionTable,   TargetLengthMeasurement = character() )"},{"path":"/reference/ConvertLengthBiotic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert lengths Biotic — ConvertLengthBiotic","text":"BioticData BioticData lengths converted LengthConversionTable LengthConversionTable parameters converting lengths 'TargetLengthMeasurement'. TargetLengthMeasurement desired length measurement. Typically code 'total length'.","code":""},{"path":"/reference/ConvertLengthBiotic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert lengths Biotic — ConvertLengthBiotic","text":"BioticData converted lengths.","code":""},{"path":"/reference/ConvertLengthBiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert lengths Biotic — ConvertLengthBiotic","text":"Different length measurements may defined fish, 'total length', 'standard length' 'fork length'. partially processed fish, measurements may available, 'head-length'. desired length measurment measured, 'total length' length measurement may approximated regression model. records variable 'catchcategory' table 'catchsample' matches 'Species' variable 'LengthConversionTable' function converts lengths ('length' 'Individual'-table) desired measurement type ('TargetLengthMeasurement') matching 'lengthmeasurement' variable corresponding 'catchsample'-table 'MeasurementType' 'LengthConversionTable' applying formula L_desired = 0.01 \\* Alpha + Beta \\* L_MeasurementType. factor 0.01 applied lengths Biotic defined m, 'Alpha' 'LengthConversionTable' defined cm. conversion 'lengthmeasurement'-variable changed reflect converted length. , set 'TargetLengthMeasurement'. variables tables data originating NMDBiotic (http://www.imr./formats/nmdbiotic/). bioticdata conform , modifications done.","code":""},{"path":[]},{"path":"/reference/ConvertWeightBiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert weights Biotic — ConvertWeightBiotic","title":"Convert weights Biotic — ConvertWeightBiotic","text":"Convert weights approximate weight desired product type. Appropriate BioticData read NMDbiotic.","code":""},{"path":"/reference/ConvertWeightBiotic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert weights Biotic — ConvertWeightBiotic","text":"","code":"ConvertWeightBiotic(   BioticData,   ConversionType = c(\"All\", \"CatchWeights\", \"IndividualWeight\"),   WeightConversionTable,   TargetProductType = character() )"},{"path":"/reference/ConvertWeightBiotic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert weights Biotic — ConvertWeightBiotic","text":"BioticData BioticData weights converted ConversionType defines weights convert, may '', 'CacthWeight', 'SampleWeight', 'IndividualWeight' WeightConversionTable WeightConversionTable parameters converting weights 'TargetProductType'. TargetProductType desired producttype. Typically code Round fish.","code":""},{"path":"/reference/ConvertWeightBiotic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert weights Biotic — ConvertWeightBiotic","text":"BioticData converted weights.","code":""},{"path":"/reference/ConvertWeightBiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert weights Biotic — ConvertWeightBiotic","text":"Different products fish may measured round weight (live weight) product type may approximated multiplying scalar conversion factor. records variable 'catchcategory' table 'catchsample' matches 'Species' variable 'WeightConversionTable' function converts weights desired product type ('TargetProductType') matching 'producttype'-variables 'ProductType' 'WeightConversionTable'. following weights may converted, depending parameter 'ConversionType': '' 'CatchWeights' 'catchweight' table 'catchsample' converted based 'catchproducttype' '' 'CatchWeights' 'lengthsampleweight' table 'catchsample' converted based 'sampleproducttype' '' 'IndividualWeight' 'individualweight' converted based 'individualproducttype' table 'individual' conversion 'producttype'-variables changed reflect converted weight. set 'TargetProductType'. 'WeightConversionTable' contains NAs 'WeightFactor', converted weights NA. may useful dealing species whoose weights needed subsequent analysis. variables 'catchvolume', 'lengthsamplevolume', 'individualvolume' also dependent product type. set NA weight converted. variables tables data originating NMDBiotic (http://www.imr./formats/nmdbiotic/). bioticdata conform , modifications done.","code":""},{"path":[]},{"path":"/reference/DefineAgeErrorMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Age Error Matrix — DefineAgeErrorMatrix","title":"Define Age Error Matrix — DefineAgeErrorMatrix","text":"Defines probabilities misreading ages.","code":""},{"path":"/reference/DefineAgeErrorMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Age Error Matrix — DefineAgeErrorMatrix","text":"","code":"DefineAgeErrorMatrix(   processData,   DefinitionMethod = c(\"ResourceFile\"),   FileName = character(),   UseProcessData = F )"},{"path":"/reference/DefineAgeErrorMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Age Error Matrix — DefineAgeErrorMatrix","text":"processData AgeErrorMatrix returned function DefinitionMethod 'ResourceFile'. See details. FileName path resource file UseProcessData TRUE, bypasses execution function returns existing 'processData'","code":""},{"path":"/reference/DefineAgeErrorMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Age Error Matrix — DefineAgeErrorMatrix","text":"Age Error Matrix, see: AgeErrorMatrix.","code":""},{"path":"/reference/DefineAgeErrorMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Age Error Matrix — DefineAgeErrorMatrix","text":"Defines probabilities misreading ages, assumed probabilites determining fish age 'x' given actually age 'y'. Definitions read tab separated file headers row names first column. row column names integers representing ages. matrix encodes probability observing age (rows), given true age (columns), columns must sum 1.","code":""},{"path":[]},{"path":"/reference/DefineAreaPosition.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Area Code Positions — DefineAreaPosition","title":"Define Area Code Positions — DefineAreaPosition","text":"Define positions areas spatial coding system.","code":""},{"path":"/reference/DefineAreaPosition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Area Code Positions — DefineAreaPosition","text":"","code":"DefineAreaPosition(   processData,   DefinitionMethod = c(\"ResourceFile\", \"StratumPolygon\"),   FileName = character(),   StratumPolygon,   UseProcessData = F )"},{"path":"/reference/DefineAreaPosition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Area Code Positions — DefineAreaPosition","text":"processData AreaPosition returned function. DefinitionMethod 'ResourceFile' 'StratumPolygon', see details. FileName path resource file StratumPolygon StratumPolygon extract area positions . UseProcessData TRUE, bypasses execution function returns existing 'processData'","code":""},{"path":"/reference/DefineAreaPosition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Area Code Positions — DefineAreaPosition","text":"AreaPosition.","code":""},{"path":"/reference/DefineAreaPosition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Area Code Positions — DefineAreaPosition","text":"Defines association area codes positions represent area code. example area code associated centre mass area, point within area. may useful providing approximate coordinates locations identified area codes. soruce area-position association may table appropriately formatted polygon-definition (StratumPolygon). DefinitionMethod 'ResourceFile': Definitions read tab separated, UTF-8 encoded file headers. Columns defined : Column 1: 'Area' Area code (key) Column 2: 'Location' optional subdivision area. provided, positions missing locations encoded well. Column 3: 'Latitude' WGS84 Latitude, decimal degrees Column 4: 'Longitude' WGS84 Longitude, decimal degrees DefinitionMethod 'StratumPolygon': Definitions extracted StratumPolygon: 'Area' AreaPosition derived column 'StratumName' StratumPolygon. 'Location' AreaPosition encoded missing. 'Latitude' 'Longitude' AreaPosition coordinates set polygon StratumPolygon.","code":""},{"path":[]},{"path":"/reference/DefineCarNeighbours.html","id":null,"dir":"Reference","previous_headings":"","what":"Define CAR neighbours — DefineCarNeighbours","title":"Define CAR neighbours — DefineCarNeighbours","text":"Define values categorical variable considered neighbours, used CAR-variable (Conditional AutoRegressive variable) Reca.","code":""},{"path":"/reference/DefineCarNeighbours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define CAR neighbours — DefineCarNeighbours","text":"","code":"DefineCarNeighbours(   processData,   DefinitionMethod = c(\"ResourceFile\", \"StratumPolygon\"),   FileName = character(),   StratumPolygon,   UseProcessData = F )"},{"path":"/reference/DefineCarNeighbours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define CAR neighbours — DefineCarNeighbours","text":"processData CarNeighbours returned function DefinitionMethod 'ResourceFile' 'StratumPolygon'. See details. FileName path file resource StratumPolygon Definition spatial strata neighbours calculated (StratumPolygon). UseProcessData TRUE, bypasses execution function returns existing 'processData'","code":""},{"path":"/reference/DefineCarNeighbours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define CAR neighbours — DefineCarNeighbours","text":"Area Neighbour Definition, see: CarNeighbours.","code":""},{"path":"/reference/DefineCarNeighbours.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define CAR neighbours — DefineCarNeighbours","text":"CAR-variable (condititional autoregressive variable) Reca typically spatial variable reflecting location catch. CarNeighbours defines values (e.g. areas) considered neighbouts parameterisation. spatial variables typically configured geographic neighbours, definitions possible. Geomtric neighbour may calcuated StratumPolygon defines spatial variable, selecting appropriate 'DefinitionMethod'. DefinitionMethod 'ResourceFile': Definitions read tab separated file headers. Columns defined : Column 1: 'CarValue' Value CAR-variable (key) Column 2: 'Neigbhour' Comma-separated list neighbours (occur Column 1) neighbour definition must symmetric among neighbours b, b must also among neighbours . DefinitionMethod 'StratumPolygon': CarNeighbours table calculated provided 'StratumPolygon'. Strata geographic neighbours (touching ) considered neighbours. runing time correctness calcuation may depend quality complexity 'StratumPolygon'.","code":""},{"path":[]},{"path":"/reference/DefineLengthConversionParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Length Conversion Parameters — DefineLengthConversionParameters","title":"Define Length Conversion Parameters — DefineLengthConversionParameters","text":"Define length conversion parameters approximating one type length measurement measurments another type, based linear regression fit measurement types. E.g. calculating 'total length' measured 'fork length'.","code":""},{"path":"/reference/DefineLengthConversionParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Length Conversion Parameters — DefineLengthConversionParameters","text":"","code":"DefineLengthConversionParameters(   processData,   DefinitionMethod = c(\"ResourceFile\"),   FileName = character(),   UseProcessData = F )"},{"path":"/reference/DefineLengthConversionParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Length Conversion Parameters — DefineLengthConversionParameters","text":"processData LengthConversionTable returned function DefinitionMethod 'ResourceFile'. See details. FileName path resource file UseProcessData TRUE, bypasses execution function returns existing 'processData'","code":""},{"path":"/reference/DefineLengthConversionParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Length Conversion Parameters — DefineLengthConversionParameters","text":"LengthConversionTable","code":""},{"path":"/reference/DefineLengthConversionParameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Length Conversion Parameters — DefineLengthConversionParameters","text":"DefinitionMethod 'ResourceFile': Definitions read tab separated, UTF-8 encoded file headers. Columns defined : Column 1: 'Description' Free-text description product Column 2: 'Species' Identifier species conversion applies Column 3: 'MeasurmentType' Identifier type length measurement measured length Column 4: 'Alpha' scalar value representing intercept (cm) linear regression fit length measurements. Column 5: 'Beta' scalar value representing slope linear regression fit length measurements. See also LengthConversionTable","code":""},{"path":[]},{"path":"/reference/DefinePeriod.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Periods — DefinePeriod","title":"Define Periods — DefinePeriod","text":"Define periods, temporal categories 'Quarter', 'Month' custom defintion.","code":""},{"path":"/reference/DefinePeriod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Periods — DefinePeriod","text":"","code":"DefinePeriod(   processData,   TemporalCategory = c(\"Quarter\", \"Month\", \"Custom\"),   CustomPeriods = character(),   UseProcessData = F )"},{"path":"/reference/DefinePeriod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Periods — DefinePeriod","text":"processData TemporalDefinition returned function. TemporalCategory type temporal category: 'Quarter', 'Month' 'Custom', defaults 'Quarter' CustomPeriods provide temporalCategory 'Custom', vector strings formatted DD-MM DD-MM-YYYY, giving start date temporal category. See 'details' UseProcessData TRUE, bypasses execution function returns existing 'processData'","code":""},{"path":"/reference/DefinePeriod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Periods — DefinePeriod","text":"Temporal Categories, see: TemporalDefinition.","code":""},{"path":"/reference/DefinePeriod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Periods — DefinePeriod","text":"Periods define association dates categorical variable definition, 'Month', 'Quarter' custom definition. Periods may seasonal, means dates associated categories based day month . distinction matter data year. 'TemporalCategory'-options 'Quarter' 'Month' produce seasonal definitions, Jan 1st 2015 Jan 1st 2016 belon category (e.g. \"Q1\" 'TemporalCategory' 'Quarter'). order make custom seasonal definitions, use TemporalCategory'-option 'Custom' without providing years 'CustomPeriods': \"DD-MM\". Periods defined way automatically \"wrap around\" dates January may grouped together dates December. order make non-seasonal definitions Quarter Month, provide 'CustomPeriods' years interest format \"DD-MM-YYYY\". years provided periods \"wrap around\" categories automatically extended entire year, necesesarry. category starting 1. Jan added present, likewise category ending 31. Dec.","code":""},{"path":[]},{"path":"/reference/DefinePeriod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Periods — DefinePeriod","text":"","code":"# Define seasonal periods quarter  DefinePeriod(TemporalCategory = \"Quarter\") #>    Period StartDay StartMonth #> 1:     Q1        1          1 #> 2:     Q2        1          4 #> 3:     Q3        1          7 #> 4:     Q4        1         10    # Define two periods \"15th March - 15th Sep\" and \"15th Sep - 15th March\"  DefinePeriod(TemporalCategory = \"Custom\", CustomPeriods = c(\"15-09\", \"15-03\")) #>            Period StartDay StartMonth #> 1: [15-03, 15-09>       15          3 #> 2: [15-09, 15-03>       15          9   # Add years to speficiation to define four periods \"15th March 2015 - 31st Dec 2015\" ...  DefinePeriod(TemporalCategory = \"Custom\", CustomPeriods = c(\"15-09-2105\", \"15-03-2015\")) #>                      Period StartDay StartMonth StartYear #> 1: [01-01-2015, 15-03-2015>        1          1      2015 #> 2: [15-03-2015, 15-09-2105>       15          3      2015 #> 3: [15-09-2105, 31-12-2105>       15          9      2105 #> 4: [31-12-2105, 01-01-2015>       31         12      2105"},{"path":"/reference/DefineStockSplittingParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Stock Splitting Parameters — DefineStockSplittingParameters","title":"Define Stock Splitting Parameters — DefineStockSplittingParameters","text":"Defines parameters stock-splitting analysis Reca, including parameters misclassifying determining stock membership specimen.","code":""},{"path":"/reference/DefineStockSplittingParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Stock Splitting Parameters — DefineStockSplittingParameters","text":"","code":"DefineStockSplittingParameters(   processData,   DefinitionMethod = c(\"ResourceFile\", \"FunctionParameters\"),   FileName = character(),   StockNameCC = character(),   StockNameS = character(),   ProbabilityType1As1 = numeric(),   ProbabilityType5As1 = numeric(),   ProbabilityType2As2 = numeric(),   ProbabilityType4As2 = numeric(),   ProbabilityType2As4 = numeric(),   ProbabilityType4As4 = numeric(),   ProbabilityType1As5 = numeric(),   ProbabilityType5As5 = numeric(),   UseProcessData = F )"},{"path":"/reference/DefineStockSplittingParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Stock Splitting Parameters — DefineStockSplittingParameters","text":"processData data.table() returned function DefinitionMethod 'ResourceFile' 'FunctionParameters', see details. FileName path resource file StockNameCC Variable StockSplittingParameters StockNameS Variable StockSplittingParameters ProbabilityType1As1 Variable StockSplittingParameters ProbabilityType5As1 Variable StockSplittingParameters ProbabilityType2As2 Variable StockSplittingParameters ProbabilityType4As2 Variable StockSplittingParameters ProbabilityType2As4 Variable StockSplittingParameters ProbabilityType4As4 Variable StockSplittingParameters ProbabilityType1As5 Variable StockSplittingParameters ProbabilityType5As5 Variable StockSplittingParameters UseProcessData TRUE, bypasses execution function returns existing 'processData'","code":""},{"path":"/reference/DefineStockSplittingParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Stock Splitting Parameters — DefineStockSplittingParameters","text":"StockSplittingParameters.","code":""},{"path":"/reference/DefineStockSplittingParameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Stock Splitting Parameters — DefineStockSplittingParameters","text":"DefinitionMethod 'ResourceFile', definitions read UTF-8 encoded tab separated file headers one row headers corresponding column names StockSplittingParameters. see StockSplittingParameters explanation coding system. DefinitionMethod 'FunctionParameters' defintions constructed parameters function.","code":""},{"path":[]},{"path":"/reference/DefineWeightConversionFactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Weight Conversion Factors — DefineWeightConversionFactor","title":"Define Weight Conversion Factors — DefineWeightConversionFactor","text":"Define weight conversion factors calculating approximate weights product type (e.g. round fish) weight fish products, gutted fish.","code":""},{"path":"/reference/DefineWeightConversionFactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Weight Conversion Factors — DefineWeightConversionFactor","text":"","code":"DefineWeightConversionFactor(   processData,   DefinitionMethod = c(\"ResourceFile\", \"FDIR.VIII.2022\"),   FileName = character(),   UseProcessData = F )"},{"path":"/reference/DefineWeightConversionFactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Weight Conversion Factors — DefineWeightConversionFactor","text":"processData WeightConversionTable returned function DefinitionMethod 'ResourceFile' 'FDIR.VIII.2022'. See details. FileName path resource file UseProcessData TRUE, bypasses execution function returns existing 'processData'","code":""},{"path":"/reference/DefineWeightConversionFactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Weight Conversion Factors — DefineWeightConversionFactor","text":"WeightConversionTable","code":""},{"path":"/reference/DefineWeightConversionFactor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Weight Conversion Factors — DefineWeightConversionFactor","text":"DefinitionMethod 'ResourceFile': Definitions read tab separated, UTF-8 encoded file headers. Columns defined : Column 1: 'Description' Free-text description product Column 2: 'Species' Identifier species conversion applies Column 3: 'ProductType' Identifier type product conversion applies Column 4: 'WeightFactor' scalar value weights given 'ProductType' can multiplied approximate desired product type (w.g. round fish). DefinitionMethod 'FDIR.VIII.2022', table FDIR.factors.VIII.2022 used Missing values WeightFactor interpreted NA, result NA weights conversion.","code":""},{"path":[]},{"path":"/reference/FDIR.factors.VIII.2022.html","id":null,"dir":"Reference","previous_headings":"","what":"Weigh conversion Factors (FDIR VIII, 2022) — FDIR.factors.VIII.2022","title":"Weigh conversion Factors (FDIR VIII, 2022) — FDIR.factors.VIII.2022","text":"Conversion factors converting gutted weight round (live) weight. dataset contains selection conversion factors official conversion factors published Norwegian Directorate fisheries (Document \"Norske Omregningsfaktorer\" version VIII, valid 2022-01-01).  Codes converting gutted fish without head, round cut (GWOH), gutted fish head (GWH) provided selected species.","code":""},{"path":"/reference/FDIR.factors.VIII.2022.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weigh conversion Factors (FDIR VIII, 2022) — FDIR.factors.VIII.2022","text":"","code":"data(FDIR.factors.VIII.2022)"},{"path":"/reference/FDIR.factors.VIII.2022.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Weigh conversion Factors (FDIR VIII, 2022) — FDIR.factors.VIII.2022","text":"WeightConversionTable.","code":""},{"path":"/reference/FDIR.factors.VIII.2022.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weigh conversion Factors (FDIR VIII, 2022) — FDIR.factors.VIII.2022","text":"ProductTypes species codes encoded NMDBiotic v3. code 3 GWH 4 GWOH, IMR-species codes (usually identical ITIS tsn number)","code":""},{"path":"/reference/FilterAgeLengthOutliersStoxBiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter outliers — FilterAgeLengthOutliersStoxBiotic","title":"Filter outliers — FilterAgeLengthOutliersStoxBiotic","text":"Removes fish records fall outside acceptable age-length region  defined von-Bertalanffy growth curve: length=Linf(1-exp(-K\\*age))\\*exp(epsilon); epsilon~N(0,sigma^2) parameters corresponding arguments function.","code":""},{"path":"/reference/FilterAgeLengthOutliersStoxBiotic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter outliers — FilterAgeLengthOutliersStoxBiotic","text":"","code":"FilterAgeLengthOutliersStoxBiotic(   StoxBioticData,   FilterUpwards = FALSE,   Linf = numeric(),   K = numeric(),   sigma = numeric(),   kAl = numeric(),   kAu = numeric() )"},{"path":"/reference/FilterAgeLengthOutliersStoxBiotic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter outliers — FilterAgeLengthOutliersStoxBiotic","text":"StoxBioticData StoxBioticData filtered FilterUpwards Whether filter action propagate upwards direction (removing Samples, Stations, etc. fish records removed). Default FALSE. Linf Asymptotic length von-Bertalanffy growth curve (cm) K growth coefficient von-Bertalanffy growth curve sigma standard deviation length von-Bertalanffy growth curve (cm) kAl Number standard deviations (log scale) defines lower limit acceptable region kAu Number standard deviations (log scale) defines upper limit acceptable region. Defaults value kAl.","code":""},{"path":"/reference/FilterAgeLengthOutliersStoxBiotic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter outliers — FilterAgeLengthOutliersStoxBiotic","text":"StoxBioticData individuals outside acceptable region removed.","code":""},{"path":"/reference/FilterAgeLengthOutliersStoxBiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter outliers — FilterAgeLengthOutliersStoxBiotic","text":"function intended provide filtering offered ECA 3.x ECA 4.x  removing outliers based von-Bertalanffy growth curves,  function arguments named correspond naming convention used ECA. Records removed length fall outside range :  Linf\\*(1-exp(-K\\*(AGE)))\\*exp(kAu\\*sigma)   Linf\\*(1-exp(-K\\*(AGE)))\\*exp(-kAl\\*sigma) Age provided resolutation 1/12 year, approximated  adding M/12 integer age, M number month catch (e.g. 2 february).  reason, 'DateTime' must provided 'Stations' 'StoxBioticData' records missing length age removed. Note kAl kAu given log scale, acceptable region  symmetric around growth curve kAl=kAu. parameterizations used stocks IMR: cod.27.1-2 (Gadus morhua) Linf=232.98028344, K=0.05284384 sigma=0.16180306 kAl=kAu=4 .27.1-2 (Melanogrammus aeglefinus) Linf=69.7075536, K=0.2158570, sigma=0.1441575 kAl=kAu=4 pok.27.1-2 (Pollachius virens) Linf=100.5282683, K=0.1392982, sigma=0.0996507 kAl=kAu=4 pelagic stocks North Atlantic Linf=37.2490509 K=0.3128122 sigma=0.009681094 kAl=kAu=4","code":""},{"path":[]},{"path":"/reference/FilterWeightLengthOutliersStoxBiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter length-weight outliers — FilterWeightLengthOutliersStoxBiotic","title":"Filter length-weight outliers — FilterWeightLengthOutliersStoxBiotic","text":"Removes fish records fall outside acceptable weight-length region defined log-linear model weight=alfa\\*length^beta\\*exp(epsilon); epsilon~N(0,sigma^2) alfa=exp(logalfa), logalfa parameters corresponding arguments function.","code":""},{"path":"/reference/FilterWeightLengthOutliersStoxBiotic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter length-weight outliers — FilterWeightLengthOutliersStoxBiotic","text":"","code":"FilterWeightLengthOutliersStoxBiotic(   StoxBioticData,   FilterUpwards = FALSE,   logalfa = numeric(),   beta = numeric(),   sigma = numeric(),   kAl = numeric(),   kAu = numeric() )"},{"path":"/reference/FilterWeightLengthOutliersStoxBiotic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter length-weight outliers — FilterWeightLengthOutliersStoxBiotic","text":"StoxBioticData StoxBioticData filtered FilterUpwards Whether filter action propagate upwards direction (removing Samples, Stations, etc. fish records removed). Default FALSE. logalfa alfa parameter (log scale) log-linear model. See details units. beta beta parameter log-linear model. See details units. sigma standard deviation weight log-linear model. See details units. kAl Number standard deviations (log scale) defines lower limit acceptable region kAu Number standard deviations (log scale) defines upper limit acceptable region","code":""},{"path":"/reference/FilterWeightLengthOutliersStoxBiotic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter length-weight outliers — FilterWeightLengthOutliersStoxBiotic","text":"StoxBioticData individuals outside acceptable region removed.","code":""},{"path":"/reference/FilterWeightLengthOutliersStoxBiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter length-weight outliers — FilterWeightLengthOutliersStoxBiotic","text":"function intended provide filtering offered ECA 3.x ECA 4.x removing outliers based log-linear weight-length model, function arguments named correspond naming convention used ECA. Records removed weights outside range : alfa\\*L^beta\\*exp(kAu\\*sigma) alfa\\*L^beta\\*exp(-kAl\\*sigma) records missing length weight removed. Parameters 'logalfa', 'beta' 'sigma' must appropriate weights recorded gram, lengths recorded cm. Note kAl kAu given log scale, acceptable region symmetric around growth curve kAl=kAu. parameterizations used stocks IMR: cod.27.1-2 (Gadus morhua) logalfa = -5.0061, beta = 3.0716, sigma = 0.1454, kAl = kAu = 4 .27.1-2 (Melanogrammus aeglefinus) logalfa = -4.9620, beta = 3.0919, sigma = 0.1282, kAl = kAu = 4 pok.27.1-2 (Pollachius virens) logalfa = -4.7718, beta = 3.0287, sigma = 0.1338, kAl = kAu = 4","code":""},{"path":[]},{"path":"/reference/GSAsubArea.html","id":null,"dir":"Reference","previous_headings":"","what":"GFCM sub areas (mixed area codes) — GSAsubArea","title":"GFCM sub areas (mixed area codes) — GSAsubArea","text":"General Fisheries Commission Mediterranean - GFCM area coding system (FAO Major Fishing Area 37)  Polygons defined Divisions, Geographic Subareas annotated column F_SUBAREA.","code":""},{"path":"/reference/GSAsubArea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GFCM sub areas (mixed area codes) — GSAsubArea","text":"","code":"data(GSAsubArea)"},{"path":"/reference/GSAsubArea.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"GFCM sub areas (mixed area codes) — GSAsubArea","text":"SpatialPolygonsDataFrame area names identified column 'StratumName'. See StratumPolygon.","code":""},{"path":"/reference/GSAsubArea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GFCM sub areas (mixed area codes) — GSAsubArea","text":"Polygons defined WGS84 coordinates (unprojected). data contains following columns rows area: F_AREA FAO Major fishing Area (37) F_SUBAREA GSAs (Geographical subareas) F_DIVISION GFCM divisions, subdividing GSAs.","code":""},{"path":"/reference/GSAsubArea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GFCM sub areas (mixed area codes) — GSAsubArea","text":"","code":"# plot divisions  data(GSAsubArea)  plotArea(areaDef=GSAsubArea)     # plot subareas  RstoxFDA::plotArea(areaDef=GSAsubArea, areaNameCol = \"F_SUBAREA\")"},{"path":"/reference/GearGroupFdirTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Gear groups — GearGroupFdirTable","title":"Gear groups — GearGroupFdirTable","text":"Example metier table assigning gear groups NS9400 / Norwegian Directorate fisheries","code":""},{"path":"/reference/GearGroupFdirTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gear groups — GearGroupFdirTable","text":"","code":"data(GearGroupFdirTable)"},{"path":"/reference/GearGroupFdirTable.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gear groups — GearGroupFdirTable","text":"MetierTable column 'gearcode' identifying gear codes used Norwegian fisheries data (derived NS 9400)","code":""},{"path":"/reference/GearGroupFdirTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gear groups — GearGroupFdirTable","text":"","code":"data(GearGroupFdirTable) data(activityCensus) annotated <- appendMetier(activityCensus,                           GearGroupFdirTable,                           \"gearNS\",                           metierColName = \"Hovedgruppe Redskap\") table(annotated$gearFAO, annotated$\"Hovedgruppe Redskap\") #>       #>       D.SEINE GILLNET HOOKS  MIS OTHER SEINE TRAPS TRAWL #>   DRB       0       0     0    0     2     0     0     0 #>   FPO       0       0     0    0     0     0    12     0 #>   GEN       0    1080     0    0     0     0     0     0 #>   GN        0     571     0    0     0     0     0     0 #>   GNC       0      39     0    0     0     0     0     0 #>   GNS       0     252     0    0     0     0     0     0 #>   HAR       0       0     0    0     4     0     0     0 #>   HMP       0       0     0    0     1     0     0     0 #>   LA        0       0     0    0     0     3     0     0 #>   LHM       0       0     4    0     0     0     0     0 #>   LHP       0       0     2    0     0     0     0     0 #>   LL        0       0   358    0     0     0     0     0 #>   LLD       0       0    10    0     0     0     0     0 #>   LLS       0       0   454    0     0     0     0     0 #>   LTL       0       0     2    0     0     0     0     0 #>   OT        0       0     0    0     0     0     0    12 #>   OTB       0       0     0    0     0     0     0  2069 #>   OTM       0       0     0    0     0     0     0   282 #>   OTT       0       0     0    0     0     0     0   144 #>   PS        0       0     0    0     0   228     0     0 #>   PS1       0       0     0    0     0   558     0     0 #>   PS2       0       0     0    0     0    69     0     0 #>   PT        0       0     0    0     0     0     0    48 #>   PTB       0       0     0    0     0     0     0   324 #>   PTM       0       0     0    0     0     0     0   239 #>   SDN       9       0     0   24     0     0     0     0 #>   SPR     105       0     0    0     0     0     0     0 #>   SSC    1342       0     0    0     0     0     0     0 #>   SV      567       0     0    0     0     0     0     0 #>   SX        0       0     0    0     0     3     0     0 #>   TB        0       0     0    0     0     0     0  1057 #>   TBN       0       0     0    0     0     0     0    50 #>   TBS       0       0     0    0     0     0     0   896 #>   TM        0       0     0    0     0     0     0   333 #>   TMS       0       0     0    0     0     0     0    26 #>   TX        0       0     0    0     0     0     0    58"},{"path":"/reference/ICESareas.html","id":null,"dir":"Reference","previous_headings":"","what":"ICES areas (mixed area codes from 2018) — ICESareas","title":"ICES areas (mixed area codes from 2018) — ICESareas","text":"Definition FAO Northeast Atlantic (Major Fishing Area 27) area coding system used ICES data calls, defined 2018 inclusive. Polygons defined finest available level aggregation, either Subarea, Division, Subdivision Unit.","code":""},{"path":"/reference/ICESareas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ICES areas (mixed area codes from 2018) — ICESareas","text":"","code":"data(ICESareas)"},{"path":"/reference/ICESareas.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ICES areas (mixed area codes from 2018) — ICESareas","text":"SpatialPolygonsDataFrame area names identified column 'StratumName'. See StratumPolygon.","code":""},{"path":"/reference/ICESareas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ICES areas (mixed area codes from 2018) — ICESareas","text":"addition columns identifying polygons FAO nomenclature, column area square kilometers included. Polygons derived shapefiles provided ICES web-portals, edited simplifications. Notably detailed coast-lines removed, favor drawing area borders land-mass. Polygons defined WGS84 coordinates (unprojected). data contains following columns rows area: Area_km2 Area ICES area squared kilometers Area_Full Code full ICES area, including FAO area code (27). Area_27 Code full ICES area, excluding FAO area code (27). data also contains columns individual components full ICES area code: <Major_FA>.<SubArea>.<Division>.<SubDivision>.<Unit>","code":""},{"path":[]},{"path":"/reference/ICESareas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ICES areas (mixed area codes from 2018) — ICESareas","text":"","code":"# plot ICES areas  data(ICESareas)  plotArea(areaDef=ICESareas)"},{"path":"/reference/ICESdivision.html","id":null,"dir":"Reference","previous_headings":"","what":"ICES Divisions (area codes from 2018) — ICESdivision","title":"ICES Divisions (area codes from 2018) — ICESdivision","text":"Definition ICES Divisions defined 2018 inclusive.","code":""},{"path":"/reference/ICESdivision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ICES Divisions (area codes from 2018) — ICESdivision","text":"","code":"data(ICESdivision)"},{"path":"/reference/ICESdivision.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ICES Divisions (area codes from 2018) — ICESdivision","text":"SpatialPolygonsDataFrame area names identified column 'StratumName'. See StratumPolygon.","code":""},{"path":"/reference/ICESdivision.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ICES Divisions (area codes from 2018) — ICESdivision","text":"Polygons derived shapefiles provided ICES web-portals, edited simplifications. Notably detailed coast-lines removed, favor drawing area borders land-mass. Polygons defined WGS84 coordinates (unprojected).","code":""},{"path":"/reference/ICESdivision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ICES Divisions (area codes from 2018) — ICESdivision","text":"","code":"# plot ICES areas  data(ICESdivision)  plotArea(areaDef=ICESdivision)"},{"path":"/reference/ICESrectangles.html","id":null,"dir":"Reference","previous_headings":"","what":"ICES rectangles — ICESrectangles","title":"ICES rectangles — ICESrectangles","text":"Definitions ICES rectangles. ICES rectangles defined grids made integer longitudes, integer latitudes, bisection pair latitudes. derive name rectangular mercator projection.","code":""},{"path":"/reference/ICESrectangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ICES rectangles — ICESrectangles","text":"","code":"data(ICESrectangles)"},{"path":"/reference/ICESrectangles.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ICES rectangles — ICESrectangles","text":"SpatialPolygonsDataFrame rectange names identified column 'StratumName'. See StratumPolygon.","code":""},{"path":"/reference/ICESrectangles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ICES rectangles — ICESrectangles","text":"data contains following columns rows rectangle: ICESNAME name rectangle standard ICES notation SOUTH southern border rectangle (latitude) WEST western border rectangle (longitude) NORTH northern border rectangle (latitdue) EAST eastern border rectangle (longitude) Area_Full Code full ICES area, including FAO area code (27). Area_27 Code full ICES area, excluding FAO area code (27). data also contains columns individul components full ICES area code: <Major_FA>.<SubArea>.<Division>.<SubDivision>.<Unit> Polygons derived shapefiles provided ICES web-portals. Polygons defined WGS84 coordinates (unprojected).","code":""},{"path":"/reference/ICESrectangles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ICES rectangles — ICESrectangles","text":"","code":"# plot statistical rectangles in 27.3.a  rect27.3.a <- RstoxFDA::ICESrectangles[     RstoxFDA::ICESrectangles$SubArea==3 &      RstoxFDA::ICESrectangles$Division==\"a\",]       RstoxFDA::plotArea(areaDef = rect27.3.a)"},{"path":"/reference/ICESsubArea.html","id":null,"dir":"Reference","previous_headings":"","what":"ICES sub-areas (area codes from 2018) — ICESsubArea","title":"ICES sub-areas (area codes from 2018) — ICESsubArea","text":"Definition ICES SubAreas defined 2018 inclusive.","code":""},{"path":"/reference/ICESsubArea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ICES sub-areas (area codes from 2018) — ICESsubArea","text":"","code":"data(ICESsubArea)"},{"path":"/reference/ICESsubArea.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ICES sub-areas (area codes from 2018) — ICESsubArea","text":"SpatialPolygonsDataFrame area names identified column 'StratumName'. See StratumPolygon.","code":""},{"path":"/reference/ICESsubArea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ICES sub-areas (area codes from 2018) — ICESsubArea","text":"Polygons derived shapefiles provided ICES web-portals, edited simplifications. Notably detailed coast-lines removed, favor drawing area borders land-mass. Polygons defined WGS84 coordinates (unprojected).","code":""},{"path":"/reference/ICESsubArea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ICES sub-areas (area codes from 2018) — ICESsubArea","text":"","code":"# plot ICES areas  data(ICESsubArea)  plotArea(areaDef=ICESsubArea)"},{"path":"/reference/ICESsubDivision.html","id":null,"dir":"Reference","previous_headings":"","what":"ICES sub-divisions (area codes from 2018) — ICESsubDivision","title":"ICES sub-divisions (area codes from 2018) — ICESsubDivision","text":"Definition ICES SubDivisions defined 2018 inclusive.","code":""},{"path":"/reference/ICESsubDivision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ICES sub-divisions (area codes from 2018) — ICESsubDivision","text":"","code":"data(ICESsubDivision)"},{"path":"/reference/ICESsubDivision.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ICES sub-divisions (area codes from 2018) — ICESsubDivision","text":"SpatialPolygonsDataFrame area names identified column 'StratumName'. See StratumPolygon.","code":""},{"path":"/reference/ICESsubDivision.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ICES sub-divisions (area codes from 2018) — ICESsubDivision","text":"Polygons derived shapefiles provided ICES web-portals, edited simplifications. Notably detailed coast-lines removed, favor drawing area borders land-mass. Polygons defined WGS84 coordinates (unprojected).","code":""},{"path":"/reference/ICESsubDivision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ICES sub-divisions (area codes from 2018) — ICESsubDivision","text":"","code":"# plot ICES areas  data(ICESsubDivision)  plotArea(areaDef=ICESsubDivision)"},{"path":"/reference/ICESunit.html","id":null,"dir":"Reference","previous_headings":"","what":"ICES units (area codes) — ICESunit","title":"ICES units (area codes) — ICESunit","text":"Definition ICES Units (area codes).","code":""},{"path":"/reference/ICESunit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ICES units (area codes) — ICESunit","text":"","code":"data(ICESunit)"},{"path":"/reference/ICESunit.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ICES units (area codes) — ICESunit","text":"SpatialPolygonsDataFrame area names identified column 'StratumName'. See StratumPolygon.","code":""},{"path":"/reference/ICESunit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ICES units (area codes) — ICESunit","text":"Polygons derived shapefiles provided ICES web-portals, edited simplifications. Notably detailed coast-lines removed, favor drawing area borders land-mass. Polygons defined WGS84 coordinates (unprojected).","code":""},{"path":"/reference/ICESunit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ICES units (area codes) — ICESunit","text":"","code":"# plot ICES areas  data(ICESunit)  plotArea(areaDef=ICESunit)"},{"path":"/reference/KommunePolygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Kommune polygons — KommunePolygons","title":"Kommune polygons — KommunePolygons","text":"SpatialPolygonsDataFrame area names identified column 'StratumName'. See StratumPolygon. Polygons defined WGS84 coordinates (unprojected). data contains following columns rows area: id Offical code muncipality (kommunenummer) name Official name muncipality StratumName Equal id","code":""},{"path":"/reference/LandingData.html","id":null,"dir":"Reference","previous_headings":"","what":"Landing data (LandingData) — LandingData","title":"Landing data (LandingData) — LandingData","text":"See LandingData","code":""},{"path":"/reference/LandingsArchiveData.html","id":null,"dir":"Reference","previous_headings":"","what":"Landings archive (LandingsArchiveData) — LandingsArchiveData","title":"Landings archive (LandingsArchiveData) — LandingsArchiveData","text":"Landings (aggregated sales notes). Format used landings archive delivered IMR FDIR.  Additional documentation (Norwegian) can found files:  docs/documentation_landingsdata_archive_norwegian.csv  docs/selected_code_lists_landingsdata_archive_norwegian.xlsx  docs/supplementary_documentation_landingsdata_archive_norwegian.csv Note 'AAR' 'AAR2' denotes year catch, may differ year landing. convention adopted use 13 'LEVMND' (month landing), catch landed January year catch. AAR integer. Two last digits year catch AAR2 integer. Year catch (4 digits) FARTLAND character. Code vessel flag (Norwegian, UTL non-Norwegian) LEVAAR integer. Two last digits year landing) LEVMND integer. Month landing (1=January, 12=December, 13=January following year)). Values larger 13 likely errors. KYST integer. Code whether catch caught within coastal region (12 nautical miles coast). Code 0 denotes oceanic catch, code 8 9 denotes coastal catch.) HOMR character. Main area catch. identified column 'StratumName' mainareaFdir2017), except leading zeroes used areas 0-9. LOK character. Location catch. identified column 'Lokasjon' locationsFdir2017), together Main area (column HAVOMR), except neither use leading zeroes. REDS character. Gear code defined standard NS9400. See code lists. LEVHERRD character. Common official code muncipality (kommune) catch landed. using leading zeroes LEVHERRD2 character. Common official code muncipality (kommune) catch landed. Using leading zeroes LEVFYLKE character. Common official code muncipality (fylke) catch landed. two leading digits LEVHERRD2. Using leading zeroes FISK character. Code species landed FISK_NAVN character. Norwegian name species landed. BIPROD character. Code product landed (0 codes main-product, 1-8 codes bi-products.) ANVEND character. Code usage landing (human consumption vs industiral usage). See code lists.) UTBET numeric. prize paid fisher Norwegian currency time purchase. Consult supplementary documentation details. VEKT numeric. Live weight (Round weight) landed catch kg. Listed zero bi-products.","code":""},{"path":"/reference/LengthConversionTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Length Conversion Table (LengthConversionTable) — LengthConversionTable","title":"Length Conversion Table (LengthConversionTable) — LengthConversionTable","text":"Length conversion parameters realting different length measurements.","code":""},{"path":"/reference/LengthConversionTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Length Conversion Table (LengthConversionTable) — LengthConversionTable","text":"Length conversion factors relating different length measurements, 'standard length' 'fork length'  based linear regression fit length measurements:  L1 = alpha + beta \\* L2,  L1 L2 different length measurements  'alpha' 'beta' species-specific coefficients. data.table columns: 'Description' character: Free-text description product 'Species' character: Identifier species conversion applies 'MeasurmentType' character: Identifier type length measurement independent variable (L2 ) 'Alpha' numeric: scalar value representing intercept (cm) linear regression fit length measurements. 'Beta' numeric: scalar value representing slope linear regression fit length measurements.","code":""},{"path":"/reference/ListBioticDifference.html","id":null,"dir":"Reference","previous_headings":"","what":"List Difference — ListBioticDifference","title":"List Difference — ListBioticDifference","text":"List difference NMDbiotic v 3.x data set StoxBiotic data set. Appropriate BioticData read NMDbiotic.","code":""},{"path":"/reference/ListBioticDifference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Difference — ListBioticDifference","text":"","code":"ListBioticDifference(StoxBioticData, BioticData)"},{"path":"/reference/ListBioticDifference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Difference — ListBioticDifference","text":"StoxBioticData StoxBioticData data set. BioticData BioticData read NMDbiotic v 3.x file","code":""},{"path":"/reference/ListBioticDifference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Difference — ListBioticDifference","text":"BioticData data found 'StoxBioticData'.","code":""},{"path":"/reference/ListBioticDifference.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List Difference — ListBioticDifference","text":"Lists missions, fishstations, catchsamples individuals NMDbiotic v 3.x data set present given StoxBiotic data set. may used summarize effect filters data conversions.","code":""},{"path":"/reference/LoadFdaStratumPolygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Load common area definitions — LoadFdaStratumPolygon","title":"Load common area definitions — LoadFdaStratumPolygon","text":"Loads standard area definitions often used analysis fisheries.","code":""},{"path":"/reference/LoadFdaStratumPolygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load common area definitions — LoadFdaStratumPolygon","text":"","code":"LoadFdaStratumPolygon(   processData,   StrataSystem = c(\"FDIR.2017\", \"FDIR.2018\", \"ICES.2018\", \"ICES.SubArea.2018\",     \"ICES.Division.2018\", \"ICES.SubDivision.2018\", \"ICES.Unit.2018\",     \"ICES.Rectangles.2018\", \"NAFO\", \"NAFO.FDIR.2017\", \"NAFO.FDIR.2018\"),   UseProcessData = F )"},{"path":"/reference/LoadFdaStratumPolygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load common area definitions — LoadFdaStratumPolygon","text":"processData StratumPolygon returned function StrataSystem strata system load UseProcessData TRUE, bypasses execution function returns existing 'processData'","code":""},{"path":"/reference/LoadFdaStratumPolygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load common area definitions — LoadFdaStratumPolygon","text":"StratumPolygon desired strata definition.","code":""},{"path":"/reference/LoadFdaStratumPolygon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load common area definitions — LoadFdaStratumPolygon","text":"function effect DefineStratumPolygon, loads polygons RstoxFDA package, rather requiring resource file. options available : \"FDIR.2017\" Main areas defined Norwegian Directorate Fisheries, defined 2017 inclusive. Derived mainareaFdir2017. \"FDIR.2018\" Main areas defined Norwegian Directorate Fisheries, defined 2018 inclusive. Derived mainareaFdir2018. \"ICES.2018\" ICES areas defined 2018 inclusive. Areas provided finest available spatial resolution (Sub-area, division, sub-division unit), full naming convention used (e.g. 27.3.d.27 27.4.b). Derived ICESareas. \"ICES.SubArea.2018\" ICES areas defined 2018 inclusive. Areas provided 'sub-areas' defined, full naming convention used (e.g. 27.3). Derived ICESsubArea. \"ICES.Division.2018\" ICES areas defined 2018 inclusive. Areas provided 'divisions' defined, full naming convention used (e.g. 27.3.d). Derived ICESdivision. \"ICES.SubDivision.2018\" ICES areas defined 2018 inclusive. Areas provided 'sub-divisions' defined, full naming convention used (e.g. 27.3.d.27). Derived ICESsubDivision. \"ICES.Unit.2018\" ICES areas defined 2018 inclusive. Areas provided 'unit' defined, full naming convention used (e.g. 27.3.d.28.1). Derived ICESunit. \"ICES.Rectangles.2018\" ICES rectangles (e.g. 15C2) defined 2018 inclusive. Derived ICESrectangles. \"NAFO\" NAFO areas. NAFO naming convention used. Derived NAFOareas. \"NAFO.FDIR.2017\" NAFO areas combined FDIR.2017. naming convention Norwegian Directorate fisheries used. \"NAFO.FDIR.2018\" NAFO areas combined FDIR.2018. naming convention Norwegian Directorate fisheries used. FDIR.2017 corresponds area coding referred system 2 IMR. FDIR.2018 corresponds area coding referred system 10 IMR.","code":""},{"path":"/reference/LocodeTable.html","id":null,"dir":"Reference","previous_headings":"","what":"LOCODE table (LocodeTable) — LocodeTable","title":"LOCODE table (LocodeTable) — LocodeTable","text":"Table United Nations Codes Trade Transport Locations  (UN/LOCODE)  Country ISO 3166 alpha-2 Country Code country location placed. Location 3-character code identifying location within country NameWoDiacritics Name location without diacritic signs. Subdivision ISO 1-3 character alphabetic /numeric code administrative division country concerned (latter part complete ISO 3166-2 code element (hyphen).) Status code status code. E.g. Codes starting various official approvals. Function string codes classifying function location. contains 1, location seaport. Coordinates latitude longitude degrees minutes. Remarks general remark location change coding latitude latitude decimal degrees longitude longitude decimal degrees","code":""},{"path":"/reference/LstLogbookData.html","id":null,"dir":"Reference","previous_headings":"","what":"Logbooks (LstLogbookData) — LstLogbookData","title":"Logbooks (LstLogbookData) — LstLogbookData","text":"Logbooks read lst format delivered Directorate Fisheries (FDIR). format matched WMS records contains less detail format read  readErsFile row represent one fishing operation, defined legislation current time reporting. Additional documentation (Norwegian) can found file:  doc/documentation_logbookdata_lst.xls FAAR character. Year catch (4 digits) REGM character License number fishing vessel (registreringsmerke) FM character. Month catch. number leading zeroes. 1=January, 12=December FD character. Day catch. number leading zeroes DBNR character. Logbook number. TUR character. Trip number. FM character. Month departure (start trip). number leading zeroes. 1=January, 12=December FD character. Day departure (start trip). number leading zeroes. AH character. Port departure (start trip). Code identifying port. LM character. Month landing catch. number leading zeroes. 1=January, 12=December LD character. Day landing catch. number leading zeroes. LH character. Port catch landed. Code identifying port. RE character. Gear. Main gear fishing operation definitions allow several. MA character. Mesh size (mm) meshed gear. HA character. Number hauls/sets fishing operation definitions allow several. VAR numeric. Total fishing time (hours). OMRA character. International area code (ICES, NAFO, etc.) OKSO character. Economic zone. Three letter code. HO character. Main area catch. identified column 'StratumName' mainareaFdir2017 mainareaFdir2018) LO character. Location catch. identified column 'Lokasjon' locationsFdir2017 locationsFdir2018, together Main area (column HAVOMR) LENG numeric. vessel length (m). BTON character. Gross tonnage vessel. TENH character. Tonnage units vessel. HEST character. Engine effect vessel (Hp) FISK character. Code species landed. NS9400. VEKT numeric Liveweight (Roundweight) kg.","code":""},{"path":"/reference/MetierTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Metier table — MetierTable","title":"Metier table — MetierTable","text":"Table (data.table) defining metiers.","code":""},{"path":"/reference/MetierTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Metier table — MetierTable","text":"Fishing activity metiers approximate decompositions fleets commonly used Europe. table defines approximate definition metiers custom gear code. Metiers used EU-regulations EU-member states, therefore often required ICES data formats Metiers formal strings encoding decomposition idealized fleet set trips, target species gear clearly unambigiously identified. metier system recognize parameters always clearly unamibigiously identified desired resolution, allows grouping omission parameters, coding information missing. makes metier system flexible, also provides poor standardization ICES databases data-calls may provide code-lists allowed metiers, sometimes different metiers requested different areas. effect metier annotations completely standardized, must configurable conversion tables like . Often annotation approximate. metier system spesified EU - Data Collection Framework: https://datacollection.jrc.ec.europa.eu/wordef/fishing-activity-metier, briefly metier fully specified string: <gear>_<target species>_<gear mesh size>_<selectivity device>_<selectivity device mesh size>_<vessel length class>, coding systems grouping conventions defined variables. Common trunctations strings also used. E.g.: Metier level 6 (truncation): <gear>_<target species>_<gear mesh size>_<selectivity device>_<selectivity device mesh size> Metier level 5 : <gear>_<target species> Metier level 4 : <gear> term \"metier\" also used derived systems, instance data-calls requests code intended usage catch (industrial vs human consumption) appended metiers gear target species missing. example, intercatch, code OTB_DEF_>=120_0_0_all identifies bottom trawl otter boards (OTB) targeting demershal fish (DEF), mesh size larger equal 120 mm, selectivity device (0_0) vessel size ()  metier character() metier-string, e.g.: OTB_DEF_>=120_0_0_all gearcode character() encoding gear target character(), optional, target species meshedGear logical(), optional, whether gear meshed gear. provided none gears. lowerMeshSize integer(), optional, lower mesh size include metier. provided rows meshedGear True, rows. upperMeshSize integer(), optional, upper mesh size include metier. provided rows meshedGear True, rows. selectivityDevice character(), optional, encoding selectivity device. meshedSelectivityDevice logical(), optional, encoding selectivity device. provided none selectivity devices. selDevLowerMeshSize integer(), optional, lower mesh size selectivity device include metier. provided rows meshedSelectivityDevice True, rows. selDevUpperMeshSize integer(), optional, upper mesh size selectivity device include metier. provided rows meshedSelectivityDevice True, rows. metier-defining parameters written camelCase, parameters may used distinguish applicability different metierdefinitions writter UPPER case.","code":""},{"path":"/reference/NAFOareas.html","id":null,"dir":"Reference","previous_headings":"","what":"NAFO areas — NAFOareas","title":"NAFO areas — NAFOareas","text":"Definition FAO Northwest Atlantic (Major Fishing Area 21) area coding system. NAFO areas used Norwegian fisheries reporting. coding convention reporting areas extention main areas defined Norwegian Directorate Fisheries identifies areas columns 'StratumName' 'homr'. International convetion identified column 'nafo_names'.","code":""},{"path":"/reference/NAFOareas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NAFO areas — NAFOareas","text":"","code":"data(NAFOareas)"},{"path":"/reference/NAFOareas.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NAFO areas — NAFOareas","text":"SpatialPolygonsDataFrame location names identified column 'StratumName'. See StratumPolygon.","code":""},{"path":"/reference/NAFOareas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NAFO areas — NAFOareas","text":"Polygons defined Divisions Major Fishing Area 21, except Subarea 21.0, Subarea 21.5 subarea 21.6. single polygon defined Subarea 21.0 21.5, two subarea 21.6. subarea 21.6, one polygon comprise Division 21.6.-C, one 21.6.D-H Division 21.3P 21.4V polygon defined subdivision. Polygons defined WGS84 coordinates (unprojected).","code":""},{"path":"/reference/NAFOareas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NAFO areas — NAFOareas","text":"","code":"# combine NAFO and mainarea and plot  combo <- rbind(RstoxFDA::NAFOareas[,\"StratumName\"],      RstoxFDA::mainareaFdir2018[,\"StratumName\"])  RstoxFDA::plotArea(areaDef = combo)    # conversion table Norwegian and international convention  RstoxFDA::NAFOareas@data[,c(\"homr\", \"nafo_names\")] #>    homr nafo_names #> 0    64        0AB #> 1    65         1A #> 2    66         1B #> 3    67         1C #> 4    68         1D #> 5    69         1E #> 6    75         1F #> 7    86         4R #> 8    76         2G #> 9    77         2H #> 10   78         2J #> 11   79         3K #> 12   80         3L #> 13   81         3M #> 14   82         3N #> 15   83         3O #> 16   84        3Pn #> 17   85        3Ps #> 18   87         4S #> 19   88         4T #> 20   89        4Vn #> 21   90        4Vs #> 22   91         4W #> 23   94       6ABC #> 24   95     6DEFGH #> 25   92         4X #> 26   93        5YZ"},{"path":"/reference/ParameterConvergenceData.html","id":null,"dir":"Reference","previous_headings":"","what":"Convergence Report for simulated parameters (ParameterConvergenceData) — ParameterConvergenceData","title":"Convergence Report for simulated parameters (ParameterConvergenceData) — ParameterConvergenceData","text":"Convergence Report multi-chained simulated parameters,   MCMC simulations Reca.  'chains' respect refers statistically independent simulations. list one members 'ConvergenceReport',  data.table containing following columns: Parameter Identifies parameter summarized. InterVariance Mean-Squared-Deviation means parameter chain, mean across chains IntraVariance mean within-chain variances parameter GelmanRubinR Gelman-Rubins R","code":""},{"path":"/reference/ParameterConvergenceData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convergence Report for simulated parameters (ParameterConvergenceData) — ParameterConvergenceData","text":"Gelman-Rubins R described Gelman Rubin (Statistical Science, 1992):  DOI: https://doi.org/10.1214/ss/1177011136","code":""},{"path":[]},{"path":"/reference/ParameterizationSummaryData.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistics for simulated parameters (ParameterizationSummaryData) — ParameterizationSummaryData","title":"Summary statistics for simulated parameters (ParameterizationSummaryData) — ParameterizationSummaryData","text":"Summary statistics (potentially multi-chained) simulated parameters,   MCMC simulations Reca.  'chains' respect refers statistically independent simulations. list two members 'ParameterSummary' 'RunParameters',  data.tables. 'ParameterSummary'  contains parameter statistics simulations following columns: Parameter Identifies parameter summarized. Mean Mean parameter Variance Variance parameter chainId Identifies parameterization chain. RunParameters summarizes global control parameters chain columns: chainId Identifies parameterization chain. Iterations number iterations parameter simulation","code":""},{"path":[]},{"path":"/reference/ParameterizeRecaModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameterize Reca. — ParameterizeRecaModels","title":"Parameterize Reca. — ParameterizeRecaModels","text":"Runs estimation parameters Reca models. Invokes eca.estimate.","code":""},{"path":"/reference/ParameterizeRecaModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameterize Reca. — ParameterizeRecaModels","text":"","code":"ParameterizeRecaModels(   RecaData,   Nsamples = integer(),   Burnin = integer(),   Thin = integer(),   ResultDirectory = character(),   Lgamodel = c(\"log-linear\", \"non-linear\"),   Delta.age = numeric(),   Seed = numeric(),   UseCachedData = FALSE )"},{"path":"/reference/ParameterizeRecaModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameterize Reca. — ParameterizeRecaModels","text":"RecaData RecaData returned PrepareRecaEstimate Nsamples number MCMC samples made available eca.predict. See documentation eca.estimate, Burnin number MCMC samples run discarded eca.estimate samples saved. See documentation eca.estimate. Thin controls many iterations run samples saved. Defaults 0. may set account autocorrelation introduced Metropolis-Hastings simulation. see documentation eca.estimate ResultDirectory directory Reca may store temp-files eca.estimate eca.predict. See details. Lgamodel length age relationship use length-age fits (options: \"log-linear\", \"non-linear\": Schnute-Richards model). See documentation eca.estimate. Defaults log-linear Delta.age see documentation eca.estimate. Defaults 0.001. Seed see documentation eca.estimate. Defaults random seed. UseCachedData TRUE Parameterization run, previous runs exactly arguments returned.","code":""},{"path":"/reference/ParameterizeRecaModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameterize Reca. — ParameterizeRecaModels","text":"RecaParameterData results Reca Model Parameterization.","code":""},{"path":"/reference/ParameterizeRecaModels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameterize Reca. — ParameterizeRecaModels","text":"eca.estimate performs Markov-chain Monte Carlo (MCMC) simulations determine maximum likelihood parameters given samples. computationally intensive run time may noticable. given model configuration running time mainly determined parameters 'Nsample', 'Burnin' 'Thin'.","code":""},{"path":"/reference/ParameterizeRecaModels.html","id":"seed","dir":"Reference","previous_headings":"","what":"Seed","title":"Parameterize Reca. — ParameterizeRecaModels","text":"'Seed' provided random seed chosen. stored returned data (RecaParameterData$GlobalVariables$Seed). seed passed Reca, versions Reca provided exact reproducability given seed, behaviour dependent installed Reca-version.","code":""},{"path":"/reference/ParameterizeRecaModels.html","id":"caching","dir":"Reference","previous_headings":"","what":"Caching","title":"Parameterize Reca. — ParameterizeRecaModels","text":"argument 'UseCachedData' allows previously computed parameterization returned stead parameterizing . previous run located 'ResultDirectory', arguments data passed Reca differs previous run, execution halt error 'UseCachedData'. respect may also useful note counter intuitive aspect argument 'Seed'. 'Seed' provided previous run, arguments considered equal seed set value returned previous run (RecaParameterData$GlobalVariables$Seed).","code":""},{"path":"/reference/ParameterizeRecaModels.html","id":"resultdirectory-files-","dir":"Reference","previous_headings":"","what":"ResultDirectory files:","title":"Parameterize Reca. — ParameterizeRecaModels","text":"Various report functions may use output function function eca.predict samples posterior distributions parameters. Communication eca.estimate eca.predict managed writing reading files, directory storing intermediate calculations must provided parameter 'ResultDirectory'. multi-chain analysis, different directory provided chain. result directory created exist. aware breaks general design StoX somewhat limits transferrability StoX projects computers.","code":""},{"path":[]},{"path":"/reference/PlotCatchAtAgeTotals.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Catch At Age — PlotCatchAtAgeTotals","title":"Plot Catch At Age — PlotCatchAtAgeTotals","text":"Plots total catch age group barplot error bars.","code":""},{"path":"/reference/PlotCatchAtAgeTotals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Catch At Age — PlotCatchAtAgeTotals","text":"","code":"PlotCatchAtAgeTotals(ReportFdaCatchAtAgeData)"},{"path":"/reference/PlotCatchAtAgeTotals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Catch At Age — PlotCatchAtAgeTotals","text":"ReportFdaCatchAtAgeData ReportFdaCatchAtAgeData catch age estimates plot","code":""},{"path":"/reference/PlotCatchAtAgeTotals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Catch At Age — PlotCatchAtAgeTotals","text":"PlotCatchAtAgeTotalsData","code":""},{"path":"/reference/PlotCatchAtAgeTotals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Catch At Age — PlotCatchAtAgeTotals","text":"Error bars correspond columns 'High' 'Low' 'ReportFdaCatchAtAgeData'  'ReportFdaCatchAtAgeData' grouping variables bar plotted group age-group,  bars grouped age group","code":""},{"path":[]},{"path":"/reference/PlotCatchAtAgeTotals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Catch At Age — PlotCatchAtAgeTotals","text":"","code":"catchAtAgeReport <- RstoxFDA::ReportRecaCatchAtAge(RstoxFDA::RecaCatchAtAgeExample,         PlusGroup = 13)  RstoxFDA::PlotCatchAtAgeTotals(catchAtAgeReport)"},{"path":"/reference/PlotCatchAtAgeTotalsData.html","id":null,"dir":"Reference","previous_headings":"","what":"Total catch by age plot (PlotCatchAtAgeTotalsData) — PlotCatchAtAgeTotalsData","title":"Total catch by age plot (PlotCatchAtAgeTotalsData) — PlotCatchAtAgeTotalsData","text":"ggplot object renders estimated total catch age.","code":""},{"path":"/reference/PlotFisheriesOverviewSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spatial distribution of fisheries — PlotFisheriesOverviewSpatial","title":"Plot spatial distribution of fisheries — PlotFisheriesOverviewSpatial","text":"Plots catch density landings polygons.","code":""},{"path":"/reference/PlotFisheriesOverviewSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spatial distribution of fisheries — PlotFisheriesOverviewSpatial","text":"","code":"PlotFisheriesOverviewSpatial(   ReportFdaLandingData,   StratumPolygon,   AreaLabels = F )"},{"path":"/reference/PlotFisheriesOverviewSpatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spatial distribution of fisheries — PlotFisheriesOverviewSpatial","text":"ReportFdaLandingData ReportFdaLandingData StratumPolygon StratumPolygon AreaLabels TRUE, labels area codes plotted map.","code":""},{"path":"/reference/PlotFisheriesOverviewSpatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot spatial distribution of fisheries — PlotFisheriesOverviewSpatial","text":"PlotFisheriesOverviewSpatialData","code":""},{"path":"/reference/PlotFisheriesOverviewSpatial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot spatial distribution of fisheries — PlotFisheriesOverviewSpatial","text":"'ReportFdaLandingData' must configured one grouping variable, must match  area names StratumPolygon$StratumName","code":""},{"path":[]},{"path":"/reference/PlotFisheriesOverviewSpatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot spatial distribution of fisheries — PlotFisheriesOverviewSpatial","text":"","code":"landingsReport <- RstoxFDA::ReportFdaLandings(        RstoxFDA::StoxLandingDataExample, c(\"Area\")        )  RstoxFDA::PlotFisheriesOverviewSpatial(landingsReport, RstoxFDA::mainareaFdir2018)"},{"path":"/reference/PlotFisheriesOverviewSpatialData.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial landings overview data (PlotFisheriesOverviewSpatialData) — PlotFisheriesOverviewSpatialData","title":"Spatial landings overview data (PlotFisheriesOverviewSpatialData) — PlotFisheriesOverviewSpatialData","text":"ggplot object renders catch density landings polygons.","code":""},{"path":"/reference/PlotFisheriesOverviewTemporal.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot landings — PlotFisheriesOverviewTemporal","title":"Plot landings — PlotFisheriesOverviewTemporal","text":"Plots landings date catch grouping variables.","code":""},{"path":"/reference/PlotFisheriesOverviewTemporal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot landings — PlotFisheriesOverviewTemporal","text":"","code":"PlotFisheriesOverviewTemporal(ReportFdaLandingData)"},{"path":"/reference/PlotFisheriesOverviewTemporal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot landings — PlotFisheriesOverviewTemporal","text":"ReportFdaLandingData ReportFdaLandingData","code":""},{"path":"/reference/PlotFisheriesOverviewTemporal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot landings — PlotFisheriesOverviewTemporal","text":"PlotFisheriesOverviewTemporalData","code":""},{"path":"/reference/PlotFisheriesOverviewTemporal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot landings — PlotFisheriesOverviewTemporal","text":"\"CatchDate\" must among grouping variables 'ReportFdaLandingData'","code":""},{"path":[]},{"path":"/reference/PlotFisheriesOverviewTemporal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot landings — PlotFisheriesOverviewTemporal","text":"","code":"landingsReport <- RstoxFDA::ReportFdaLandings(        RstoxFDA::StoxLandingDataExample, c(\"CatchDate\")        )  RstoxFDA::PlotFisheriesOverviewTemporal(landingsReport)   landingsReportGear <- RstoxFDA::ReportFdaLandings(        RstoxFDA::StoxLandingDataExample, c(\"GearGroup\", \"CatchDate\")        )  RstoxFDA::PlotFisheriesOverviewTemporal(landingsReportGear)"},{"path":"/reference/PlotFisheriesOverviewTemporalData.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal landings overview data (PlotFisheriesOverviewTemporalData) — PlotFisheriesOverviewTemporalData","title":"Temporal landings overview data (PlotFisheriesOverviewTemporalData) — PlotFisheriesOverviewTemporalData","text":"ggplot object renders landings date catch grouping variables.","code":""},{"path":"/reference/PlotMeanLengthAtAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot length at age — PlotMeanLengthAtAge","title":"Plot length at age — PlotMeanLengthAtAge","text":"Plot mean individual length age group, along interval representation error mean.  interval plotted configured 'ReportFdaLengthAtAgeData' (interval Low / High) represented dashed lines. interval represent range weights occurring age group, error estimate mean length grouping variables configured argument 'ReportFdaLengthAtAgeData', groups plotted different colors.","code":""},{"path":"/reference/PlotMeanLengthAtAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot length at age — PlotMeanLengthAtAge","text":"","code":"PlotMeanLengthAtAge(ReportFdaLengthAtAgeData)"},{"path":"/reference/PlotMeanLengthAtAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot length at age — PlotMeanLengthAtAge","text":"ReportFdaLengthAtAgeData ReportFdaLengthAtAgeData mean weight statistics Reca simulations","code":""},{"path":"/reference/PlotMeanLengthAtAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot length at age — PlotMeanLengthAtAge","text":"PlotMeanLengthAtAgeData","code":""},{"path":[]},{"path":"/reference/PlotMeanLengthAtAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot length at age — PlotMeanLengthAtAge","text":"","code":"lengthAtAge <- RstoxFDA::ReportRecaLengthAtAge(RstoxFDA::RecaCatchAtAgeExample,         PlusGroup = 13)  RstoxFDA::PlotMeanLengthAtAge(lengthAtAge)"},{"path":"/reference/PlotMeanLengthAtAgeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean length at age plot (PlotMeanLengthAtAgeData) — PlotMeanLengthAtAgeData","title":"Mean length at age plot (PlotMeanLengthAtAgeData) — PlotMeanLengthAtAgeData","text":"ggplot object renders estimated mean length age.","code":""},{"path":"/reference/PlotMeanWeightAtAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot weight at age — PlotMeanWeightAtAge","title":"Plot weight at age — PlotMeanWeightAtAge","text":"Plot mean individual weight age group, along interval representation error mean.  interval plotted configured 'ReportFdaWeightAtAgeData' (interval Low / High) represented dashed lines. interval represent range length occurring age group, error estimate mean weight grouping variables configured argument 'ReportFdaWeightAtAgeData', groups plotted different colors.","code":""},{"path":"/reference/PlotMeanWeightAtAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot weight at age — PlotMeanWeightAtAge","text":"","code":"PlotMeanWeightAtAge(ReportFdaWeightAtAgeData)"},{"path":"/reference/PlotMeanWeightAtAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot weight at age — PlotMeanWeightAtAge","text":"ReportFdaWeightAtAgeData ReportFdaWeightAtAgeData mean weight statistics Reca simulations","code":""},{"path":"/reference/PlotMeanWeightAtAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot weight at age — PlotMeanWeightAtAge","text":"PlotMeanWeightAtAgeData","code":""},{"path":[]},{"path":"/reference/PlotMeanWeightAtAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot weight at age — PlotMeanWeightAtAge","text":"","code":"weightAtAge <- RstoxFDA::ReportRecaWeightAtAge(RstoxFDA::RecaCatchAtAgeExample,         PlusGroup = 13)  RstoxFDA::PlotMeanWeightAtAge(weightAtAge)"},{"path":"/reference/PlotMeanWeightAtAgeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean weight at age plot (PlotMeanWeightAtAgeData) — PlotMeanWeightAtAgeData","title":"Mean weight at age plot (PlotMeanWeightAtAgeData) — PlotMeanWeightAtAgeData","text":"ggplot object renders estimated mean weight age.","code":""},{"path":"/reference/PlotPosteriorTraces.html","id":null,"dir":"Reference","previous_headings":"","what":"Reca Traceplots — PlotPosteriorTraces","title":"Reca Traceplots — PlotPosteriorTraces","text":"Plots posterior distribution parameters estimated Reca. Useful corroborate convergence simulations. distribution plotted order iterations, issues autocorrelation simulation can detected. Autocorrelation issues may addressed adjusting argument 'Thin' ParameterizeRecaModels upper lower quantiles distributions highlighted, rare spikes multi-modalities can detected. Rare spikes multi-modalities can addressed adjusting argument 'Burnin' ParameterizeRecaModels order provide overview many age-groups . Several panels created age-groups closer mean values plotted together. achieved k-means clustering (kmeans), key parameters clustering algorithm provided options Nclust, Iter.max, Nstart, grouping variables length groups 'RecaCatchAtAge' incorporated age group definition. tends crowd plots, may make unreadable. desirable ensure parameters converged ages, grouping variables length groups, often necessary compromise. One may increase 'LengthInterval' Default collapse length groups entirely adjust 'PlusGroup' Reduces total number age groups adjust 'CatLimit' removes legends crowded plots remove grouping variables make additional estimates parameterisation, fewer grouping variables. See: RunRecaModels 'LengthInterval' specifies one length-group. Length groups removed plot legends. Additional convergence checks can set using several parameterisation runs functions ReportRecaParameterStatistics ReportParameterConvergence. analysis checks convergence model parameters, rather estimated parameters, supports handling large number model parameters, filter indications non-convergence.","code":""},{"path":"/reference/PlotPosteriorTraces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reca Traceplots — PlotPosteriorTraces","text":"","code":"PlotPosteriorTraces(   RecaCatchAtAge,   Parameter = c(\"TotalCatch\", \"MeanLength\", \"MeanWeight\"),   PlusGroup = integer(),   LengthInterval = numeric(),   UseDefaultPlotSettings = TRUE,   Nclust = integer(),   Iter.max = integer(),   Nstart = integer(),   LowerQuant = numeric(),   UpperQuant = numeric(),   CatLimit = integer(),   Legend = TRUE )"},{"path":"/reference/PlotPosteriorTraces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reca Traceplots — PlotPosteriorTraces","text":"RecaCatchAtAge Results MCMC simulations (RecaCatchAtAge). Parameter parameter plot traceplots \"TotalCatch\", \"MeanLength\", \"MeanWeight\", Defaults PlusGroup given, ages 'PlusGroup' older included plus group. LengthInterval width length bins cm, TotalCatch traceplots. provided, length inteval set maximum length group.. UseDefaultPlotSettings TRUE default plot settings used, rather values provided Nclust, Iter.max, Nstart, LowerQuant, UpperQuant, CatLimit, Legend Nclust number plots distribute ages plus group . Defaults 4. Iter.max maximal number iterations k-means clustering deciding ages plotted plot. Defaults 20. Nstart number random sets chosen k-means clustering. Defaults 10. LowerQuant lower quantile age group plot points. Defaults . UpperQuant upper quantile age group plot points. Defaults 0.95. CatLimit upper limit number ages plot using categorical coloring. Plots number age greoups use gradient coloring scheme. Defaults 30. Legend true legend plotted.","code":""},{"path":"/reference/PlotPosteriorTraces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reca Traceplots — PlotPosteriorTraces","text":"PlotPosteriorTracesData","code":""},{"path":[]},{"path":"/reference/PlotPosteriorTraces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reca Traceplots — PlotPosteriorTraces","text":"","code":"RstoxFDA::PlotPosteriorTraces(RstoxFDA::RecaCatchAtAgeExample, PlusGroup = 13)   RstoxFDA::PlotPosteriorTraces(RstoxFDA::RecaCatchAtAgeExample, PlusGroup = 13,           Parameter = \"MeanWeight\")"},{"path":"/reference/PlotPosteriorTracesData.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace plot (PlotPosteriorTracesData) — PlotPosteriorTracesData","title":"Trace plot (PlotPosteriorTracesData) — PlotPosteriorTracesData","text":"ggplot object renders traceplot Reca predictions.","code":""},{"path":"/reference/PlotSamplingCoverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Coverage plot — PlotSamplingCoverage","title":"Coverage plot — PlotSamplingCoverage","text":"Plots barplot landings color codes much part fishery sampled.","code":""},{"path":"/reference/PlotSamplingCoverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coverage plot — PlotSamplingCoverage","text":"","code":"PlotSamplingCoverage(   ReportFdaSamplingData,   Cumulative = FALSE,   OtherPercentage = numeric(),   ColorScheme = c(\"CellPlot\", \"Gradient\"),   Measurement = c(\"AgeReadings\", \"LengthMeasurements\", \"WeightMeasurements\"),   UseDefaultColorSettings = TRUE,   MinVessels = integer(),   MinCatches = integer(),   MinMeasurements = integer(),   ColorNoSamples = character(),   ColorFewMeasurements = character(),   ColorFewCatches = character(),   ColorFewVessels = character(),   ColorGoodSampling = character(),   SamplingUnit = c(\"Vessels\", \"Catches\", \"Measurements\"),   GradientLowColor = character(),   GradientMidColor = character(),   GradientHighColor = character() )"},{"path":"/reference/PlotSamplingCoverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coverage plot — PlotSamplingCoverage","text":"ReportFdaSamplingData ReportFdaSamplingData sampling report plot Cumulative logical indicating cumulative fraction landed weight plotted secondary axis. OtherPercentage Controls many bars shown. smallest 'OtherPercentage' % bars combined one bar. ColorScheme 'CellPlot' 'Gradient'. See details. Defaults CellPlot. Measurement kind fish measurement used determine color cell. Defaults AgeReadings. UseDefaultColorSettings Logical, whether use default color settings values specified arguments function. MinVessels color scheme \"CellPlot\". minimum number vessels sampled quality \"Good\" coloring cell. Defaults 2. MinCatches color scheme \"CellPlot\". minimum number catches sampled quality \"Good\" \"vessels\" coloring cell. Defaults 2. MinMeasurements color scheme \"CellPlot\". minimum number measurements (parameter 'Measurement') quality \"Good\", \"vessels\" \"catches\" coloring cell. Defaults 100. ColorNoSamples Color use cells sampled. Defaults #ffffcc. ColorFewMeasurements Color use cells measurements. Defaults #c2e699. ColorFewCatches Color use cells Catches. See details. Defaults #78c679. ColorFewVessels Color use cells Vessels See details. Defaults #31a354. ColorGoodSampling Color use cells Good sampling. See details. Defaults #006837. SamplingUnit color scheme \"Gradient\". sampling unit used: \"Vessels\",\"Catches\", \"Measurement\" GradientLowColor Color use low end color gradient. See details. Defaults #ffffcc. GradientMidColor Color use middle color gradient. See details. Defaults #c2e699. GradientHighColor Color use high end color gradient. See details. Defaults #006837.","code":""},{"path":"/reference/PlotSamplingCoverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coverage plot — PlotSamplingCoverage","text":"PlotSamplingCoverageData","code":""},{"path":"/reference/PlotSamplingCoverage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coverage plot — PlotSamplingCoverage","text":"Plots ordered barplot landings part fishery identified grouping variables 'ReportFdaSamplingData'. visualizes efficiency sampling, sense sampling intensity compared total landings. bars, representing part fishery colored representing sampling part, according one following color schemes:","code":""},{"path":"/reference/PlotSamplingCoverage.html","id":"color-scheme-gradient-","dir":"Reference","previous_headings":"","what":"color scheme 'Gradient'","title":"Coverage plot — PlotSamplingCoverage","text":"color scheme 'Gradient' colors bars according many sampling units sampled. sampling unit counted controlled argument 'SamplingUnit': \"Vessels\" gradient reflect number vessels sampled \"Cacthes\" gradient reflect number cacthes sampled \"Measurements\" gradient reflect number measurements taken (see argment 'Measurement') colors used gradient controlled arguments GradientLowColor, GradientMidColor, GradientHighColor","code":""},{"path":"/reference/PlotSamplingCoverage.html","id":"color-scheme-cellplot-","dir":"Reference","previous_headings":"","what":"color scheme 'Cellplot'","title":"Coverage plot — PlotSamplingCoverage","text":"color scheme \"CellPlot\" colors bars similar color scheme used PlotSamplingOverviewCell. uses color coding indicates five categories sampling depending many vessels, catches, individuals sampled cell. coloring controlled arguments 'MinVessels', 'MinCatches', 'MinMeasurements': Good Cell sufficient number individuals, catches vessels sampled. vessels Cell sufficient number individuals catches sampled, sufficient number vessels catches Cell sufficient number individuals sampled, sufficient number catches samples Cell sampled","code":""},{"path":[]},{"path":"/reference/PlotSamplingCoverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coverage plot — PlotSamplingCoverage","text":"","code":"#plot to inspect sampling coverage  samplingReport <- RstoxFDA::ReportFdaSampling(RstoxFDA::StoxBioticDataExample,             RstoxFDA::StoxLandingDataExample,             GroupingVariables = c(\"Quarter\", \"GearGroup\", \"Stratum\"))  PlotSamplingCoverage(samplingReport, Cumulative = TRUE, OtherPercentage = 5)"},{"path":"/reference/PlotSamplingCoverageData.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling variables plot data (PlotSamplingCoverageData) — PlotSamplingCoverageData","title":"Sampling variables plot data (PlotSamplingCoverageData) — PlotSamplingCoverageData","text":"ggplot object renders barplot landings color codes much part fishery sampled.","code":""},{"path":"/reference/PlotSamplingOverviewCell.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell plot — PlotSamplingOverviewCell","title":"Cell plot — PlotSamplingOverviewCell","text":"Makes 'cell plot' overview samples landings.","code":""},{"path":"/reference/PlotSamplingOverviewCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell plot — PlotSamplingOverviewCell","text":"","code":"PlotSamplingOverviewCell(   ReportFdaSamplingData,   ColumnVariable,   Measurement = c(\"AgeReadings\", \"LengthMeasurements\", \"WeightMeasurements\"),   UseDefaultColorSettings = T,   MinVessels = integer(),   MinCatches = integer(),   MinMeasurements = integer(),   ColorNoSamples = character(),   ColorFewMeasurements = character(),   ColorFewCatches = character(),   ColorFewVessels = character(),   ColorGoodSampling = character(),   TextSize = numeric() )"},{"path":"/reference/PlotSamplingOverviewCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell plot — PlotSamplingOverviewCell","text":"ReportFdaSamplingData ReportFdaSamplingData sampling report plot ColumnVariable grouping variable 'ReportFdaSamplingData' used columns cell plot Measurement kind fish measurement used determine color cell. Defaults AgeReadings. UseDefaultColorSettings Logical, whether use default color settings value specified function parameters MinVessels, MinCatches, MinMeasurements, ColorNoSamples, ColorFewCatches, ColorFewVessels, ColorGoodSampling MinVessels minimum number vessels sampled quality \"Good\" coloring cell. Defaults 2. MinCatches minimum number catches sampled quality \"Good\" \"vessels\" coloring cell. Defaults 2. MinMeasurements minimum number measurements (parameter 'Measurement') quality \"Good\", \"vessels\" \"catches\" coloring cell. Defaults 100. ColorNoSamples Color use cells sampled. Defaults #ffffcc. ColorFewMeasurements Color use cells measurements. Defaults #c2e699. ColorFewCatches Color use cells Catches. See details. Defaults #78c679. ColorFewVessels Color use cells Vessels See details. Defaults #31a354. ColorGoodSampling Color use cells Good sampling. See details. Defaults #006837. TextSize size text cellplot. provided, suitable size calculated.","code":""},{"path":"/reference/PlotSamplingOverviewCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell plot — PlotSamplingOverviewCell","text":"PlotSamplingOverviewCellData","code":""},{"path":"/reference/PlotSamplingOverviewCell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cell plot — PlotSamplingOverviewCell","text":"part 'cell' fishery identified groupingvariables ReportFdaSamplingData report visualised cell two dimensional grid, annotated information much landed 'cell'. Cells sampled also annotated triplet (#vessels, #catches, #individuals) indicating number sampled vessels, catches individuals. cells also color coded reflect well sampled. visualisation gives overview part fishery samples, may suggest ways group post-stratify variables estimation. extension also suggests supplemental sampling can improved, instance revealing small extra sampling effort prevents need grouping post-stratifying. plot provide direct visualisation efficiency sampling. Efficient sampling may well leave many cells unsampled, activity (e.g. volume landed) may different cells. color coding indicates five categories sampling depending many vessels, catches, individuals sampled cell. #'  coloring controlled arguments 'MinVessels', 'MinCatches', 'MinMeasurements': Good Cell sufficient number individuals, catches vessels sampled. vessels Cell sufficient number individuals catches sampled, sufficient number vessels catches Cell sufficient number individuals sampled, sufficient number catches measurements Cell sufficient number individuals sampled, sufficient number catches samples Cell sampled Landings Cell sampled, official landings recorded cell. See documentation ReportFdaSampling explanation category 'landings' may occur. thresholds considered sufficient sampling vessels, catches individuals, respectively, configured arguments 'MinVessels', 'MinCatches', 'MinMeasurements' Colors specified ggplot convention may specified name (e.g. 'red'), number (e.g. '2') hex-code (e.g. '#78c679').","code":""},{"path":[]},{"path":"/reference/PlotSamplingOverviewCell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cell plot — PlotSamplingOverviewCell","text":"","code":"#plot to inspect sampling og key covariate (spatial, temporal, gear)  samplingReport <- RstoxFDA::ReportFdaSampling(RstoxFDA::StoxBioticDataExample,             RstoxFDA::StoxLandingDataExample,             GroupingVariables = c(\"Quarter\", \"GearGroup\", \"Stratum\"))  PlotSamplingOverviewCell(samplingReport, ColumnVariable = \"Stratum\")     #plot to suggest regrouping categorical variables for fixed effect configuration in Reca  fixedEffectReport <- RstoxFDA::ReportFdaSampling(RstoxFDA::StoxBioticDataExample,               RstoxFDA::StoxLandingDataExample,               GroupingVariables = c(\"Quarter\", \"GearGroup\"), Unit = \"ton\")  PlotSamplingOverviewCell(fixedEffectReport, ColumnVariable = \"GearGroup\")    #same plot with regroping of quarter (Period)  fixedEffectReport <- RstoxFDA::ReportFdaSampling(RstoxFDA::StoxBioticDataExample,               RstoxFDA::StoxLandingDataExample,               GroupingVariables = c(\"Period\", \"GearGroup\"), Unit = \"ton\")  PlotSamplingOverviewCell(fixedEffectReport, ColumnVariable = \"GearGroup\")"},{"path":"/reference/PlotSamplingOverviewCellData.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling Overview cell-plot data (PlotSamplingOverviewCellData) — PlotSamplingOverviewCellData","title":"Sampling Overview cell-plot data (PlotSamplingOverviewCellData) — PlotSamplingOverviewCellData","text":"ggplot object renders colored 'cell plot' overview samples landings.","code":""},{"path":"/reference/PlotSamplingVariables.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sampling variables — PlotSamplingVariables","title":"Plot sampling variables — PlotSamplingVariables","text":"Plots barplot sample quantity,   illustrating number samples sample variables 'ReportFdaSamplingData'.  fishery partitioned grouping variables stacked barplot produced.  Total landings may plotted secondary axis.","code":""},{"path":"/reference/PlotSamplingVariables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sampling variables — PlotSamplingVariables","text":"","code":"PlotSamplingVariables(   ReportFdaSamplingData,   Quantity = c(\"Catches\", \"Vessels\", \"WeightMeasurements\", \"LengthMeasurements\",     \"AgeReadings\", \"WeightOfSampledCatches\"),   Landings = FALSE )"},{"path":"/reference/PlotSamplingVariables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sampling variables — PlotSamplingVariables","text":"ReportFdaSamplingData ReportFdaSamplingData sampling report plot Quantity sample quantity plot sampling variable: \"Catches\", \"Vessels\", \"WeightMeasurements\", \"LengthMeasurements\", \"AgeReadings\", \"WeightOfSampledCatches\" Landings TRUE total landings part fishery ('GroupingVariables' ReportFdaSamplingData) plotted secondary axis.","code":""},{"path":"/reference/PlotSamplingVariables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot sampling variables — PlotSamplingVariables","text":"PlotSamplingVariablesData","code":""},{"path":[]},{"path":"/reference/PlotSamplingVariables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot sampling variables — PlotSamplingVariables","text":"","code":"#Plot to inspect how many samples (catches) where taken for each producttype  samplingReport <- RstoxFDA::ReportFdaSampling(RstoxFDA::StoxBioticDataExample,             RstoxFDA::StoxLandingDataExample,             GroupingVariables = c(\"Quarter\", \"GearGroup\"), SamplingVariables=c(\"sampleproducttype\"))  PlotSamplingVariables(samplingReport, Quantity = \"Catches\", Landings = TRUE)"},{"path":"/reference/PlotSamplingVariablesData.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling variables plot data (PlotSamplingVariablesData) — PlotSamplingVariablesData","title":"Sampling variables plot data (PlotSamplingVariablesData) — PlotSamplingVariablesData","text":"ggplot object renders stacked barplot sampling variables part fishery, total landings secondary axis.","code":""},{"path":"/reference/PrepareRecaEstimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for Reca. — PrepareRecaEstimate","title":"Prepare data for Reca. — PrepareRecaEstimate","text":"Performs data checks data conversions, stores data-related parameters preparation running ParameterizeRecaModels.","code":""},{"path":"/reference/PrepareRecaEstimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for Reca. — PrepareRecaEstimate","text":"","code":"PrepareRecaEstimate(   StoxBioticData,   StoxLandingData,   FixedEffects = character(),   RandomEffects = character(),   UseCarEffect = FALSE,   CarEffect = character(),   CarNeighbours,   UseAgingError = FALSE,   AgeErrorMatrix,   UseStockSplitting = FALSE,   UseStockSplittingError = FALSE,   StockSplittingParameters,   CellEffect = c(\"Off\", \"All\"),   MinAge = integer(),   MaxAge = integer(),   MaxLength = numeric(),   LengthResolution = numeric(),   HatchDay = integer() )"},{"path":"/reference/PrepareRecaEstimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for Reca. — PrepareRecaEstimate","text":"StoxBioticData StoxBioticData data samples fisheries approriate columns appended specifying cells. See details. StoxLandingData StoxLandingData data landings fisheries approriate columns appended specifying cells. See details. FixedEffects optional, vector identifying column names treated fixed effects. See details RandomEffects optional, vector identifying column names treated random effects. See details UseCarEffect TRUE, CAR-effect (conditional autoregressive effect) used. CarEffect optional, character identifying column name treated CAR-effect. Mandatory 'UseCarEffect' TRUE. CarNeighbours CarNeighbours, mandatory 'carEffect' given. Identifies values carEffect considered neighbours. UseAgingError TRUE, aging, error parameters incorporated models. AgeErrorMatrix AgeErrorMatrix, optional, specifies probabilities misreading ages. mandatory UseAgingError TRUE. UseStockSplitting TRUE, models condigured provide estimates two stocks based otholitt-typing. See StockSplittingParameters. UseStockSplittingError TRUE, model error stock classification (otolithtypes) applied. StockSplittingParameters Parameters stock splitting. Mandatory 'UseStockSplitting' TRUE. May obtained DefineStockSplittingParameters. CellEffect Configures cell effect. Defaults . '', interaction term added covariates cell (whether fixed random effects). CAR-effect always included cell effect. MinAge optional, must match dimensions 'AgeErrorMatrix'. provided derived data. MaxAge optional, must match dimensions 'AgeErrorMatrix'. provided derived data. MaxLength optional, maximal fish length data cm. provided derived data. LengthResolution optional, resolution length measurements cm. provided modal value data used. HatchDay defaults Defaults 1. encoding day year fish consider transition one age next. 1 represents Jan 1st.","code":""},{"path":"/reference/PrepareRecaEstimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for Reca. — PrepareRecaEstimate","text":"RecaData Data prepared running Reca.","code":""},{"path":"/reference/PrepareRecaEstimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare data for Reca. — PrepareRecaEstimate","text":"Parameters obtained 'cells' using ParameterizeRecaModels applied landings-data predicting total catch--age using RunRecaModels.","code":""},{"path":"/reference/PrepareRecaEstimate.html","id":"cells","dir":"Reference","previous_headings":"","what":"Cells","title":"Prepare data for Reca. — PrepareRecaEstimate","text":"Reca conceptually decomposes fishery cells. Parameters estimated cell, later total catch age predicted cell. Cells must therefore defined census landings, samples. 'Cells' defined effects / covariates specified 'StoxLandingData' 'StoxBioticData' (effects specified one arguments: 'FixedEffects', 'RandomEffects', 'CarEffect'). variable included cell definition must always observed (containing NAs) coded coherently (coding system) 'StoxBioticData' 'StoxLandingData'.","code":""},{"path":"/reference/PrepareRecaEstimate.html","id":"covariates","dir":"Reference","previous_headings":"","what":"Covariates","title":"Prepare data for Reca. — PrepareRecaEstimate","text":"effects part cell definition may specified 'Fixed effect' 'CAR effect'. fixed effect values / levels effect must sampled. CAR effect, cell neighbouring cells (defined 'CarNeighbours') must sampled variable samples 'StoxBioticData' may included random effect long always observed (containing NAs). random effect identifying haul / landing always included Reca. add haul-identifiers covariates.","code":""},{"path":"/reference/PrepareRecaEstimate.html","id":"stock-splitting","dir":"Reference","previous_headings":"","what":"Stock splitting","title":"Prepare data for Reca. — PrepareRecaEstimate","text":"option UseStockSplitting requires Variable 'otolithtype' added table 'Individual' StoxBioticData. developed splitting coastal cod atlantic cod, reflected Reca documentation, abstracted StoX, stocks may encoded fit analysis. cases may even extended domains defined individual fish.","code":""},{"path":[]},{"path":"/reference/ReadLandingFDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Read landing files — ReadLandingFDA","title":"Read landing files — ReadLandingFDA","text":"function reads multiple landing files (sales-notes) list list tables file.  extends upon ReadLanding supports additional input formats.","code":""},{"path":"/reference/ReadLandingFDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read landing files — ReadLandingFDA","text":"","code":"ReadLandingFDA(   FileNames,   Format = c(\"landingerv2\", \"lss\", \"FDIR.2021\"),   FileEncoding = c(\"Default\", \"UTF-8\", \"Latin-1\") )"},{"path":"/reference/ReadLandingFDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read landing files — ReadLandingFDA","text":"FileNames paths landing files. Format file format landing files. FileEncoding encoding files read. given default encoding format used.","code":""},{"path":"/reference/ReadLandingFDA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read landing files — ReadLandingFDA","text":"Norwegian sales-notes data archived curated Norwegian Directorate Fisheries (FDIR).  Data made public transferred Institute Marine Research (IMR) various formats.  formats also archived Norwegian Marine Datacenter (NMD) IMR. supported formats missing columns supported LandingData,  columns set NA. Likewise formats additional columns, supported LandingData,  ignored. Formats may one following landingerv2 XML-files given namespace http://www.imr./formats/landinger/v2. Default encoding: UTF-8 (enforced format) lss Lss format, used official deliveries Fdir IMR (2005-). Default encoding: Latin-1 (iso-8859-1) FDIR.2021 Sales notes FDIRs open data sets, formatted 2021 release. Default encoding: UTF-8. Files format 'landingerv2' 'lss' may obtained NMD landings API IMR. lss format using various naming conventions. Data read colmn index, strict checking column names performed.","code":""},{"path":"/reference/RecaCatchAtAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Reca Results (RecaCatchAtAge) — RecaCatchAtAge","title":"Reca Results (RecaCatchAtAge) — RecaCatchAtAge","text":"Posterior distribution total catch age weight length parameters.","code":""},{"path":"/reference/RecaCatchAtAge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reca Results (RecaCatchAtAge) — RecaCatchAtAge","text":"list data tables: CatchAtAge data.table tabulating estimated catch--age length group Reca iteration (MCMC sample) MeanLength data.table tabulating mean length cm age Reca iteration (MCMC sample) MeanWeight data.table tabulating mean weight g age Reca iteration (MCMC sample) GroupingVariables data.table variables catch--age estimates partitioned             column 'GroupingVariables'. may correspond variables landings, maye variable 'Stock'            stock-splitting analysis perfomred. addition columns variables 'GroupingVariables', data tables 'CatchAtAge', 'MeanLength', 'MeanWeight' following variables: Age Age number years. Iteration Reca iteration (MCMC sample) estimates calculated 'CatchAtAge' also variables Length Upper limit length group cm CatchAtAge total catch age numbers 'MeanLength' variable: MeanIndividualLength Mean Length age cm 'MeanWeight' variable: MeanIndividualWeight Mean weight age g","code":""},{"path":"/reference/RecaCatchAtAgeExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Saithe landings 2021. — RecaCatchAtAgeExample","title":"Saithe landings 2021. — RecaCatchAtAgeExample","text":"Example data formatted RecaCatchAtAgeExample. Data obtained running Reca data StoxBioticDataExample, StoxLandingDataExample. order control size example data, Reca configured rather low length resolution 5 cm.","code":""},{"path":"/reference/RecaCatchAtAgeExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saithe landings 2021. — RecaCatchAtAgeExample","text":"","code":"data(RecaCatchAtAgeExample)"},{"path":"/reference/RecaCatchAtAgeExample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Saithe landings 2021. — RecaCatchAtAgeExample","text":"RecaCatchAtAge","code":""},{"path":"/reference/RecaCatchAtAgeExample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saithe landings 2021. — RecaCatchAtAgeExample","text":"","code":"RstoxFDA::ReportRecaCatchAtAge(RstoxFDA::RecaCatchAtAgeExample, PlusGroup = 13) #> $NbyAge #>     AgeGroup Age CatchAtAge     SD     Low    High #>  1:    Age 1   1      21492  31754     404   95927 #>  2:    Age 2   2      25084  40541      52   70750 #>  3:    Age 3   3     238764 110070  104672  422917 #>  4:    Age 4   4     987229 234699  653819 1429625 #>  5:    Age 5   5    6254131 786326 5115794 7344917 #>  6:    Age 6   6    3784386 561252 2921262 4766634 #>  7:    Age 7   7    3638165 487433 2904993 4491507 #>  8:    Age 8   8    4442624 523941 3664388 5323354 #>  9:    Age 9   9    1125128 235577  823717 1488910 #> 10:   Age 10  10     547490 148911  345107  826186 #> 11:   Age 11  11     385556 110394  249463  610248 #> 12:   Age 12  12     495272 123316  320967  695681 #> 13:  Age 13+  13     647093 151804  447239  914943 #>  #> $GroupingVariables #> Empty data.table (0 rows and 1 cols): GroupingVariables #>"},{"path":"/reference/RecaData.html","id":null,"dir":"Reference","previous_headings":"","what":"Reca Data (RecaData) — RecaData","title":"Reca Data (RecaData) — RecaData","text":"Data data parameters prepared running eca.estimate eca.predict via RunRecaEstimate.","code":""},{"path":"/reference/RecaData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reca Data (RecaData) — RecaData","text":"list five members: AgeLength input needed eca.estimate eca.predict. List data.table WeightLength input needed eca.estimate eca.predict. List data.table Landings input needed eca.estimate eca.predict. List data.table GlobalParameters input needed eca.estimate eca.predict. see details. List data.table CovariateMaps Mapping values covariate landings samples (including non-configurable catchId) integer value used R-ECA. List data.table","code":""},{"path":"/reference/RecaParameterData.html","id":null,"dir":"Reference","previous_headings":"","what":"Reca Parameter Data (RecaParameterData) — RecaParameterData","title":"Reca Parameter Data (RecaParameterData) — RecaParameterData","text":"Data data parameters prepared running various report functions invoke eca.predict.","code":""},{"path":"/reference/RecaParameterData.html","id":"model-fit","dir":"Reference","previous_headings":"","what":"model fit","title":"Reca Parameter Data (RecaParameterData) — RecaParameterData","text":"inspection analysis model fit, lists 'FitProportionAtAge',   'FitLengthGivenAge' 'FitWeightGivenLength' interest. stock-splitting analysis,  lists FitLengthGivenAgeCC FitWeightGivenLengthCC added well, corresponding one stocks.  lists correspond three Reca-models contain: LogLikeliehood data.table     tabulating logarithm likeliehood parameter set iteration ... data.table model effects (e.g. covariates). addition configurable covariates, models always contain constant effect (named 'constant'),  catch haul effect (named 'catchSample') effects fish measurments (named 'fish').   relevant following parameters may tabulated effect: Age Identifying age effect applies Level Identifying value level covariate effect applies Iteration Identifying iteration fit provided AgeIndex Age identifier used internally Reca LevelIndex Level identifier used internally Reca Slope value regression slope tau_Slope value tau parameter regression slope ar_Slope value regression slope autoregressive coefficient associated effect Intercept value regression intercept tau_Intercept value tau parameter regression intercept ar_Intercept value regression intercept autoregressive coefficient associated effect Consult Hirst et.al. 2005 description parameters @section data:  lists 'AgeLength', 'WeightLength', 'Landings', 'GlobalParameters' 'CovariateMaps'  may passed eca.predict functions consuming output function.  following lists can accessed RecaParameterData objects: FitProportionAtAge list data tables parameters Proportion--age model FitLengthGivenAge list data tables parameters Length-given-age model FitWeightGivenLength list data tables parameters Weight-given-length model AgeLength input needed eca.estimate eca.predict WeightLength input needed eca.estimate eca.predict Landings input needed eca.estimate eca.predict GlobalParameters input needed eca.estimate eca.predict. see details CovariateMaps Mapping values covariate landings samples (including non-configurable catchId) integer value used R-ECA.","code":""},{"path":"/reference/RecaResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Reca Results (RecaResult) — RecaResult","title":"Reca Results (RecaResult) — RecaResult","text":"Results running eca.estimate eca.predict via RunRecaEstimate.","code":""},{"path":"/reference/RecaResult.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reca Results (RecaResult) — RecaResult","text":"input input data parameters provided eca.estimate eca.predict fit returned eca.estimate prediction returned eca.predict covariateMaps list() mapping Reca covariate encoding values fed PrepareRecaEstimate. RecaData","code":""},{"path":"/reference/ReportFdaCatchAtAgeCovarianceData.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisheries dependent Catch At Age Covariance Report (ReportFdaCatchAtAgeCovarianceData) — ReportFdaCatchAtAgeCovarianceData","title":"Fisheries dependent Catch At Age Covariance Report (ReportFdaCatchAtAgeCovarianceData) — ReportFdaCatchAtAgeCovarianceData","text":"Covariances catch age estimations. Covariances presented  age groups, together additional grouping (aggregation variables),   gear, area, stock etc. list two members 'CovarianceNbyAge' 'Variables'.  'CovarianceNbyAge' data.table may following columns: VariableId1 Identifies one variables covariance calculated VariableId2 Identifies one variables covariance calculated Covariance covariance catch age numbers groups identified 'Variable1' 'Variable2'.  VariableId Identifier variable covariances provided . AgeGroup character. age group variable. May age plus group Age integer. lower age group variable. May age lower limit plus group (inclusive) ... aggregation variables. Units configurable, can inspected ~getUnit","code":""},{"path":"/reference/ReportFdaCatchAtAgeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisheries dependent Catch At Age Report (ReportFdaCatchAtAgeData) — ReportFdaCatchAtAgeData","title":"Fisheries dependent Catch At Age Report (ReportFdaCatchAtAgeData) — ReportFdaCatchAtAgeData","text":"list two members: 'NbyAge' 'GroupingVariables'.  NbyAge ReportFdaData table reported <Statistic> 'CatchAtAge': total catch age numbers. GroupingVariables specified Grouping variables. Units configurable, can inspected ~getUnit 'GroupingVariables' data.table column containing names aggregation variables.","code":""},{"path":"/reference/ReportFdaCatchAtLengthAndAgeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisheries dependent Catch At Age Report (ReportFdaCatchAtLengthAndAgeData) — ReportFdaCatchAtLengthAndAgeData","title":"Fisheries dependent Catch At Age Report (ReportFdaCatchAtLengthAndAgeData) — ReportFdaCatchAtLengthAndAgeData","text":"list two members: 'NbyLengthAge', 'GroupingVariables'.  NbyLengthAge ReportFdaData table reported <Statistic> 'CatchAtAgeLength': total catch length age numbers. GroupingVariables specified Grouping variables. Units configurable, can inspected ~getUnit 'GroupingVariables' data.table column containing names aggregation variables.","code":""},{"path":"/reference/ReportFdaCatchAtLengthData.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisheries dependent Catch At Age Report (ReportFdaCatchAtLengthData) — ReportFdaCatchAtLengthData","title":"Fisheries dependent Catch At Age Report (ReportFdaCatchAtLengthData) — ReportFdaCatchAtLengthData","text":"list two members: 'NbyLength', 'GroupingVariables'.  NbyLength ReportFdaData table reported <Statistic> 'CacthAtLength': total catch length numbers. GroupingVariables specified Grouping variables. Units configurable, can inspected ~getUnit 'GroupingVariables' data.table column containing names aggregation variables.","code":""},{"path":"/reference/ReportFdaData.html","id":null,"dir":"Reference","previous_headings":"","what":"Age group statistics (ReportFdaData) — ReportFdaData","title":"Age group statistics (ReportFdaData) — ReportFdaData","text":"Results catch age estimations. results may presented  decomposed combinations aggregation variables, gear, area, stock etc. ReportFdaData data.table may following columns: AgeGroup character. age group estimate reported . May age plus group Age integer. lower age estimate reported . May age lower limit plus group (inclusive) LengthGroup character. length group estimate reported . Length numeric. upper length length group. <Statistic> reported statistic SD Standard deviation reported statistic. Low lower limit estimated interval reported statistic. High higher limit estimated interval reported statistic. ... aggregation variables. names listed 'GroupingVariables' Units configurable, can inspected ~getUnit","code":""},{"path":"/reference/ReportFdaLandingData.html","id":null,"dir":"Reference","previous_headings":"","what":"Landings Report data (ReportFdaLandingData) — ReportFdaLandingData","title":"Landings Report data (ReportFdaLandingData) — ReportFdaLandingData","text":"list tow members: GroupingVariables data.table variables used aggregation 'FisheriesLandings' stored column 'GroupingVariables' FisheriesLandings data.table described . FisheriesLandings report landings partitions fishery.  report data.table columns: ... column provided Aggregation variables LandedRoundWeight Total landings kg","code":""},{"path":"/reference/ReportFdaLandings.html","id":null,"dir":"Reference","previous_headings":"","what":"Report FDA landings — ReportFdaLandings","title":"Report FDA landings — ReportFdaLandings","text":"Report landings partitions fisheries.","code":""},{"path":"/reference/ReportFdaLandings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report FDA landings — ReportFdaLandings","text":"","code":"ReportFdaLandings(   StoxLandingData,   GroupingVariables = character(),   Decimals = integer(),   Unit = RstoxData::getUnitOptions(\"mass\", conversionRange = c(1, 1e+12)) )"},{"path":"/reference/ReportFdaLandings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report FDA landings — ReportFdaLandings","text":"StoxLandingData StoxLandingData data landings fisheries approriate columns added identifying corresponding samples GroupingVariables Columns 'StoxBioticData' 'StoxLandingData' partitions fisheries. provided, single row landings produced. Decimals integer specifying number decimals report 'LandedRoundWeight' 'WeightOfSampledCatches'. Defaults 0. Unit unit weights 'LandedRoundWeight' 'WeightOfSampledCatches'. Defaults kg.","code":""},{"path":"/reference/ReportFdaLandings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report FDA landings — ReportFdaLandings","text":"ReportFdaLandingData","code":""},{"path":"/reference/ReportFdaLandings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Report FDA landings — ReportFdaLandings","text":"Landings reported partitioned provided 'GroupingVariables'. Landings sorted decreasing weight, except column 'CatchDate' used GroupingVariable. case Landings sorted increasing date, sorting Grouping variables. Rounding numbers according argument 'Decimals' done round, negative numbers specify rounding powers ten, rounding digit 5 towards even digit. units considered valid weights listed quantity 'mass' StoxUnits","code":""},{"path":"/reference/ReportFdaLandings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report FDA landings — ReportFdaLandings","text":"","code":"landingsreport <- RstoxFDA::ReportFdaLandings(RstoxFDA::StoxLandingDataExample,      GroupingVariables = c(\"Area\"), Unit=\"ton\")  landingsreport$FisheriesLandings #>    Area LandedRoundWeight #> 1:   05             20366 #> 2:   03             18374 #> 3:   04             13409 #> 4:   06              7514 #> 5:   00              6740"},{"path":"/reference/ReportFdaLengthAtAgeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisheries dependent Length At Age Report (ReportFdaLengthAtAgeData) — ReportFdaLengthAtAgeData","title":"Fisheries dependent Length At Age Report (ReportFdaLengthAtAgeData) — ReportFdaLengthAtAgeData","text":"list two members: 'MeanLengthByAge', 'GroupingVariables'.  MeanLengthByAge ReportFdaData table reported <Statistic> 'MeanIndividualLength': mean length. GroupingVariables specified Grouping variables. Units configurable, can inspected ~getUnit 'GroupingVariables' data.table column containing names aggregation variables. Note summary statistics reported summaries mean lengths,   e.g. SD report standard deviation means,  characterize length distribution fish.","code":""},{"path":"/reference/ReportFdaSOP.html","id":null,"dir":"Reference","previous_headings":"","what":"Report SOP test — ReportFdaSOP","title":"Report SOP test — ReportFdaSOP","text":"Report sum--product test (SOP-test) catch estimates. Mean weight age estimated catch (numbers) age used compute total catches  relative difference reported landings reported. Missing values (NAs) ignored  (exlcuded sums). report generated landings decomposed provided 'GroupingVariables'  must available 'ReportFdaCatchAtAgeData' 'ReportFdaWeightAtAgeData'  'StoxLandingData'. 'ReportFdaCatchAtAgeData' 'ReportFdaWeightAtAgeData' must decomposed  'GroupingVariables' must reported age groups Rounding numbers according argument 'Decimals' done round,  negative numbers specify rounding powers ten, rounding digit 5 towards even digit. units considered valid mean lengths listed quantity 'fraction' StoxUnits","code":""},{"path":"/reference/ReportFdaSOP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report SOP test — ReportFdaSOP","text":"","code":"ReportFdaSOP(   ReportFdaCatchAtAgeData,   ReportFdaWeightAtAgeData,   StoxLandingData,   GroupingVariables = character(),   DecimalWeight = integer(),   DecimalFraction = integer(),   UnitFraction = RstoxData::getUnitOptions(\"fraction\") )"},{"path":"/reference/ReportFdaSOP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report SOP test — ReportFdaSOP","text":"ReportFdaCatchAtAgeData ReportFdaCatchAtAgeData estimates total catch age ReportFdaWeightAtAgeData ReportFdaWeightAtAgeData estimates mean weight age individual fish StoxLandingData StoxLandingData data landings fisheries GroupingVariables Columns 'StoxLandingData' partitions landings groups SOP tests reported . DecimalWeight integer specifying number decimals report weights: 'TotalWeightEstimated', 'LandedWeight', 'Difference'. Defaults `r RstoxFDA:::stoxFunctionAttributes$ReportFdaSOP$functionParameterDefaults$DecimalWeight`. DecimalFraction integer specifying number decimals report 'RelativeDifference'. Defaults `r RstoxFDA:::stoxFunctionAttributes$ReportFdaSOP$functionParameterDefaults$DecimalFraction`. UnitFraction unit RelativeDifference. E.g. '0.' decimal notation '%' percent.","code":""},{"path":"/reference/ReportFdaSOP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report SOP test — ReportFdaSOP","text":"ReportFdaSopData","code":""},{"path":[]},{"path":"/reference/ReportFdaSOP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report SOP test — ReportFdaSOP","text":"","code":"catchAtAge <- RstoxFDA::ReportRecaCatchAtAge(RstoxFDA::RecaCatchAtAgeExample)  weightAtAge <- RstoxFDA::ReportRecaWeightAtAge(RstoxFDA::RecaCatchAtAgeExample)  sop <- ReportFdaSOP(catchAtAge, weightAtAge, RstoxFDA::StoxLandingDataExample,        DecimalFraction = 6)  sop$SopReport #>    TotalWeightEstimated LandedWeight Difference RelativeDifference #> 1:             66441823     66402706      39117           0.000589"},{"path":"/reference/ReportFdaSampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Report FDA sampling — ReportFdaSampling","title":"Report FDA sampling — ReportFdaSampling","text":"Report sampling fisheries landings partitions fisheries.","code":""},{"path":"/reference/ReportFdaSampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report FDA sampling — ReportFdaSampling","text":"","code":"ReportFdaSampling(   StoxBioticData,   StoxLandingData,   GroupingVariables = character(),   Decimals = integer(),   Unit = RstoxData::getUnitOptions(\"mass\", conversionRange = c(1, 1e+12)),   SamplingVariables = character() )"},{"path":"/reference/ReportFdaSampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report FDA sampling — ReportFdaSampling","text":"StoxBioticData StoxBioticData data samples fisheries approriate columns added identifying corresponding landings. StoxLandingData StoxLandingData data landings fisheries approriate columns added identifying corresponding samples GroupingVariables Columns 'StoxBioticData' 'StoxLandingData' partitions fisheries. provided, single row landings produced. Decimals integer specifying number decimals report 'LandedRoundWeight' 'WeightOfSampledCatches'. Defaults 0. Unit unit weights 'LandedRoundWeight' 'WeightOfSampledCatches'. Defaults kg SamplingVariables Columns 'StoxBioticData' identifying sampling variables use partition report. See details.","code":""},{"path":"/reference/ReportFdaSampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report FDA sampling — ReportFdaSampling","text":"ReportFdaSamplingData","code":""},{"path":"/reference/ReportFdaSampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Report FDA sampling — ReportFdaSampling","text":"Sampling reported partitioned provided 'GroupingVariables', must present samples (StoxBioticData) landings (StoxLandingData). samples encoded partitions fisheries landings. 'LandedRoundWeight' NA. may due recording errors filtering errors, may also due comparison similar unequal category-definitions. instance area coded landings dominant area fishing trip, -sea sampling record area fishing operation, catch area subsequently landed another area listed dominant area. Note columns Catches Vessels summarize number unique catches vessels partition / cell. depending grouping variables added, sum vessels correspond total sum vessels fleet. principle applies Catches, practice situation less commonly arise. addition sampling may reported partitioned provided 'SamplingVariables'. instance variable 'IndividualSex' may provided see many samples collected sex. NAs treated separate category. 'SamplingVariables' provided, partition specified 'GroupingVariables' reported several times, sum column 'LandedRoudnWeight' total landings. 'SamplingVariables' must columns present samples (StoxBioticData), landings (StoxLandingData). Rounding numbers according argument 'Decimals' done round, negative numbers specify rounding powers ten, rounding digit 5 towards even digit. units considered valid weights listed quantity 'mass' StoxUnits","code":""},{"path":"/reference/ReportFdaSampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report FDA sampling — ReportFdaSampling","text":"","code":"samplingreport <- RstoxFDA::ReportFdaSampling(RstoxFDA::StoxBioticDataExample,        RstoxFDA::StoxLandingDataExample, GroupingVariables = c(\"GearGroup\"), Unit = \"ton\")   samplingreport$FisheriesSampling #>    GearGroup LandedRoundWeight Catches Vessels WeightMeasurements #> 1:   D.Seine             35175      29      20                580 #> 2:   Gillnet             24135      30      30                528 #> 3:       Jig              5418      26      22                520 #> 4:    L.Line              1674       8       8                120 #>    LengthMeasurements AgeReadings WeightOfSampledCatches #> 1:                580         580                    343 #> 2:                568         568                     24 #> 3:                520         519                     25 #> 4:                120         119                      3"},{"path":"/reference/ReportFdaSamplingData.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling Report data (ReportFdaSamplingData) — ReportFdaSamplingData","title":"Sampling Report data (ReportFdaSamplingData) — ReportFdaSamplingData","text":"list tow members: GroupingVariables data.table variables used aggregation 'FisheriesSampling' stored column 'GroupingVariables' SamplingVariables data.table variables used partitioning samples 'FisheriesSampling' stored column 'SamplingVariables' FisheriesSampling data.table described . FisheriesSampling report sampling total landings partitions fishery.  report data.table columns: ... column provided Aggregation variables ... column provided Sampling variables LandedRoundWeight Total landings kg Catches Number unique catches sampled Vessels Number unique vessels sampled WeightMeasurements Number fished measured weight LengthMeasurements Number fished measured length AgeReadings Number fished age determined WeightOfSampledCatches Total weight sampled catches","code":""},{"path":"/reference/ReportFdaSopData.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum of Products report (ReportFdaSopData) — ReportFdaSopData","title":"Sum of Products report (ReportFdaSopData) — ReportFdaSopData","text":"Sum Products report (SOP-report), comparing total landed weight fish  product mean weight age estimates total number   age estimates list two members 'SopReport' 'GroupingVariables'.  'SopReport' data.table columns: TotalWeightEstimated Total round weight estimated kg LandedWeight Landed round weight reported kg Difference difference estimated reported landed weight kg RelativeDifference difference estimated reported landed weight relative reported weight ... aggregation variables. names listed 'GroupingVariables' 'GroupingVariables' data.table column containing names aggregation variables. unit RelativeDifference configurable, can inspected ~getUnit","code":""},{"path":"/reference/ReportFdaSummaryData.html","id":null,"dir":"Reference","previous_headings":"","what":"Total catch statistics (ReportFdaSummaryData) — ReportFdaSummaryData","title":"Total catch statistics (ReportFdaSummaryData) — ReportFdaSummaryData","text":"Results catch estimations. results may presented  decomposed combinations aggregation variables, gear, area, stock etc. list six members 'MeanAge', 'MeanWeight', 'MeanLength', 'TotalWeight',  'TotalNumber', 'GroupingVariables'.  'MeanAge', 'MeanWeight', 'MeanLength', 'TotalWeight',  'TotalNumber' data.tables columns: <Statistic> reported statistic, either 'MeanIndividualAge', 'MeanIndividualWeight', 'MeanIndividualLength', 'TotalWeight', 'TotalNumber' SD Standard deviation reported statistic. Low lower limit estimated interval reported statistic. High higher limit estimated interval reported statistic. ... aggregation variables. names listed 'GroupingVariables' Units configurable, can inspected ~getUnit 'GroupingVariables' data.table column containing names aggregation variables.","code":""},{"path":"/reference/ReportFdaWeightAtAgeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Reca Weight At Age Report (ReportFdaWeightAtAgeData) — ReportFdaWeightAtAgeData","title":"Reca Weight At Age Report (ReportFdaWeightAtAgeData) — ReportFdaWeightAtAgeData","text":"list two members: 'MeanWeightByAge', 'GroupingVariables'.  MeanWeightByAge ReportFdaData table reported <Statistic> 'MeanIndividualWeight': mean weight GroupingVariables specified Grouping variables. Units configurable, can inspected ~getUnit 'GroupingVariables' data.table column containing names aggregation variables. Note summary statistics reported summaries  mean weights, e.g. SD report standard deviation means,  characterize weight distribution fish.","code":""},{"path":"/reference/ReportParameterConvergence.html","id":null,"dir":"Reference","previous_headings":"","what":"Report convergence Statistics for parameter simulations — ReportParameterConvergence","title":"Report convergence Statistics for parameter simulations — ReportParameterConvergence","text":"multi-chain parameter simulations, intra-chain variance, inter-chain variance Gelman-Rubins R statistic reported. 'chains' respect refers statistically independent simulations.","code":""},{"path":"/reference/ReportParameterConvergence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report convergence Statistics for parameter simulations — ReportParameterConvergence","text":"","code":"ReportParameterConvergence(   ParameterizationSummaryData,   Tolerance = numeric(),   Decimals = integer() )"},{"path":"/reference/ReportParameterConvergence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report convergence Statistics for parameter simulations — ReportParameterConvergence","text":"ParameterizationSummaryData summary statistics Reca parameters Tolerance threshold reporting parameters. Defaults 0.1. See details Decimals integer specifying number decimals report 'GelmanRubinR'. Defaults 2.","code":""},{"path":"/reference/ReportParameterConvergence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report convergence Statistics for parameter simulations — ReportParameterConvergence","text":"ParameterConvergenceData","code":""},{"path":"/reference/ReportParameterConvergence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Report convergence Statistics for parameter simulations — ReportParameterConvergence","text":"parameters Gelman-Rubins R statistic deviates sufficiently 1 reported. accepted deviation controlled argument 'Tolerance'. Parameters reported differ 1 'Tolerance' , Tolerance 0 reports parameters. provided default Tolerance 0.1 used. Gelman-Rubins R described Gelman Rubin (Statistical Science, 1992): DOI: https://doi.org/10.1214/ss/1177011136 Gelman-Rubins R reported approximately specified Gelman Rubins Eq. 20, ignoring contribution factor (df/(df-2)). report InterVariance correspond B/n IntraVariance correspond W.","code":""},{"path":"/reference/ReportRecaCatchAtAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Report catch at age — ReportRecaCatchAtAge","title":"Report catch at age — ReportRecaCatchAtAge","text":"Tabulates summary statistics total catch (number) age MCMC simulations using Reca. MCMC simulations typically obtained RunRecaModels. Summary statistics obtained posterior distribution, interval reported equal-tailed credible intervals. 'RecaCatchAtAge' contains estimate set aggregation variables, area, gear, stock, etc., summary statistics presented similarly. Rounding numbers according argument 'Decimals' done round, negative numbers specify rounding powers ten, rounding digit 5 towards even digit. units considered valid catch age numbers listed quantity 'cardinaltiy' StoxUnits","code":""},{"path":"/reference/ReportRecaCatchAtAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report catch at age — ReportRecaCatchAtAge","text":"","code":"ReportRecaCatchAtAge(   RecaCatchAtAge,   PlusGroup = integer(),   IntervalWidth = numeric(),   Decimals = integer(),   Unit = RstoxData::getUnitOptions(\"cardinality\", conversionRange = c(1, 1e+12)) )"},{"path":"/reference/ReportRecaCatchAtAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report catch at age — ReportRecaCatchAtAge","text":"RecaCatchAtAge Results MCMC simulations (RecaCatchAtAge). PlusGroup given, ages 'PlusGroup' older included plus group. IntervalWidth width reported credible interval. value 0.9 gives 90 per cent credible intervals. Defaults 0.9 Decimals integer specifying number decimals report 'CatchAtAge', 'SD', 'Low' 'High'. Defaults 0. Unit unit 'CatchAtAge', 'SD', 'Low' 'High'","code":""},{"path":"/reference/ReportRecaCatchAtAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report catch at age — ReportRecaCatchAtAge","text":"ReportFdaCatchAtAgeData","code":""},{"path":[]},{"path":"/reference/ReportRecaCatchAtAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report catch at age — ReportRecaCatchAtAge","text":"","code":"catchAtAgeReport <- RstoxFDA::ReportRecaCatchAtAge(RstoxFDA::RecaCatchAtAgeExample,          PlusGroup = 13)   catchAtAgeReport$NbyAge #>     AgeGroup Age CatchAtAge     SD     Low    High #>  1:    Age 1   1      21492  31754     404   95927 #>  2:    Age 2   2      25084  40541      52   70750 #>  3:    Age 3   3     238764 110070  104672  422917 #>  4:    Age 4   4     987229 234699  653819 1429625 #>  5:    Age 5   5    6254131 786326 5115794 7344917 #>  6:    Age 6   6    3784386 561252 2921262 4766634 #>  7:    Age 7   7    3638165 487433 2904993 4491507 #>  8:    Age 8   8    4442624 523941 3664388 5323354 #>  9:    Age 9   9    1125128 235577  823717 1488910 #> 10:   Age 10  10     547490 148911  345107  826186 #> 11:   Age 11  11     385556 110394  249463  610248 #> 12:   Age 12  12     495272 123316  320967  695681 #> 13:  Age 13+  13     647093 151804  447239  914943"},{"path":"/reference/ReportRecaCatchAtAgeCovariance.html","id":null,"dir":"Reference","previous_headings":"","what":"Report covariance of catch at age — ReportRecaCatchAtAgeCovariance","title":"Report covariance of catch at age — ReportRecaCatchAtAgeCovariance","text":"Tabulates covariance age groups (number) age MCMC simulations using Reca. MCMC simulations typically obtained RunRecaModels. Covariances obtained posterior distribution. 'RecaCatchAtAge' contains estimate set aggregation variables, area, gear, stock, etc., covariances calculated age groups aggregation variables. Rounding numbers according argument 'Decimals' done round, negative numbers specify rounding powers ten, rounding digit 5 towards even digit. units considered valid catch age numbers listed quantity 'cardinaltiy' StoxUnits","code":""},{"path":"/reference/ReportRecaCatchAtAgeCovariance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report covariance of catch at age — ReportRecaCatchAtAgeCovariance","text":"","code":"ReportRecaCatchAtAgeCovariance(   RecaCatchAtAge,   PlusGroup = integer(),   Decimals = integer(),   Unit = RstoxData::getUnitOptions(\"cardinality\", conversionRange = c(1, 1e+12)) )"},{"path":"/reference/ReportRecaCatchAtAgeCovariance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report covariance of catch at age — ReportRecaCatchAtAgeCovariance","text":"RecaCatchAtAge Results MCMC simulations (RecaCatchAtAge). PlusGroup given, ages 'PlusGroup' older included plus group. Decimals integer specifying number decimals report 'Covariance'. Defaults 0. Unit unit 'CatchAtAge'. Covariance provided square unit.","code":""},{"path":"/reference/ReportRecaCatchAtAgeCovariance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report covariance of catch at age — ReportRecaCatchAtAgeCovariance","text":"ReportFdaCatchAtAgeCovarianceData","code":""},{"path":[]},{"path":"/reference/ReportRecaCatchAtAgeCovariance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report covariance of catch at age — ReportRecaCatchAtAgeCovariance","text":"","code":"covariances <- RstoxFDA::ReportRecaCatchAtAgeCovariance(RstoxFDA::RecaCatchAtAgeExample,          PlusGroup = 13)  covariances$CovarianceNbyAge #>      VariableId1 VariableId2   Covariance #>   1:       Age 1       Age 1   1008325267 #>   2:      Age 10       Age 1   -343051776 #>   3:      Age 11       Age 1    151223129 #>   4:      Age 12       Age 1   -187509543 #>   5:     Age 13+       Age 1    233715735 #>  ---                                      #> 165:       Age 5       Age 9 -69406163910 #> 166:       Age 6       Age 9   5930467623 #> 167:       Age 7       Age 9  -9485655460 #> 168:       Age 8       Age 9 -28954943730 #> 169:       Age 9       Age 9  55496753071"},{"path":"/reference/ReportRecaCatchAtLength.html","id":null,"dir":"Reference","previous_headings":"","what":"Report catch at length — ReportRecaCatchAtLength","title":"Report catch at length — ReportRecaCatchAtLength","text":"Tabulates summary statistics total catch (number) length MCMC simulations using Reca. MCMC simulations typically obtained RunRecaModels. Summary statistics obtained posterior distribution, interval reported equal-tailed credible intervals. Different length groups ones reported argument 'RecaCatchAtAge' may specified argument 'IntervalWidth'. specify equi-intervalled lengthgroups smallest lengthgroup starting 0. align length groups reported 'RecaCatchAtAge' length group assignment done highest overlapping length group. 'RecaCatchAtAge' contains estimate set aggregation variables, area, gear, stock, etc., summary statistics presented similarly. Rounding numbers according argument 'Decimals' done round, negative numbers specify rounding powers ten, rounding digit 5 towards even digit. units considered valid catch length numbers listed quantity 'cardinaltiy' StoxUnits","code":""},{"path":"/reference/ReportRecaCatchAtLength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report catch at length — ReportRecaCatchAtLength","text":"","code":"ReportRecaCatchAtLength(   RecaCatchAtAge,   IntervalWidth = numeric(),   Decimals = integer(),   Unit = RstoxData::getUnitOptions(\"cardinality\", conversionRange = c(1, 1e+12)),   LengthInterval = numeric() )"},{"path":"/reference/ReportRecaCatchAtLength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report catch at length — ReportRecaCatchAtLength","text":"RecaCatchAtAge Results MCMC simulations (RecaCatchAtAge). IntervalWidth width reported credible interval. value 0.9 gives 90 per cent credible intervals. Defaults 0.9. Decimals integer specifying number decimals report 'CatchAtLength', 'SD', 'Low' 'High'. Defaults 0. Unit unit 'CatchAtLength', 'SD', 'Low' 'High' LengthInterval width length bins cm. provided, interval 'RecaCatchAtAge' used.","code":""},{"path":"/reference/ReportRecaCatchAtLength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report catch at length — ReportRecaCatchAtLength","text":"ReportFdaCatchAtLengthData","code":""},{"path":[]},{"path":"/reference/ReportRecaCatchAtLength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report catch at length — ReportRecaCatchAtLength","text":"","code":"catchAtLength <- RstoxFDA::ReportRecaCatchAtLength(RstoxFDA::RecaCatchAtAgeExample,           LengthInterval = 10)  catchAtLength$NbyLength #>          LengthGroup Length     SD     Low    High CatchAtLength #>  1:    〈0.0, 10.0］     10      0       0       0             0 #>  2:   〈10.0, 20.0］     20      0       0       0             0 #>  3:   〈20.0, 30.0］     30  23659     115   38786         12961 #>  4:   〈30.0, 40.0］     40  40320      90   97133         30446 #>  5:   〈40.0, 50.0］     50 193010  317237  896786        596386 #>  6:   〈50.0, 60.0］     60 943351 6781295 9744108       8240461 #>  7:   〈60.0, 70.0］     70 728594 6918890 9274598       8039776 #>  8:   〈70.0, 80.0］     80 588850 3256985 5058065       4124220 #>  9:   〈80.0, 90.0］     90 162056  899154 1374071       1096964 #> 10:  〈90.0, 100.0］    100  99626  179844  495328        316871 #> 11: 〈100.0, 110.0］    110  62730   56932  253720        134328"},{"path":"/reference/ReportRecaCatchAtLengthAndAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Report catch at length and age — ReportRecaCatchAtLengthAndAge","title":"Report catch at length and age — ReportRecaCatchAtLengthAndAge","text":"Tabulates summary statistics total catch (number) age-length combinations MCMC simulations using Reca. MCMC simulations typically obtained RunRecaModels. Summary statistics obtained posterior distribution, interval reported equal-tailed credible intervals. Different length groups ones reported argument 'RecaCatchAtAge' may specified argument 'IntervalWidth'. specify equi-intervalled lengthgroups smallest lengthgroup starting 0. align length groups reported 'RecaCatchAtAge' length group assignment done highest overlapping length group. 'RecaCatchAtAge' contains estimate set aggregation variables, area, gear, stock, etc., summary statistics presented similarly. Rounding numbers according argument 'Decimals' done round, negative numbers specify rounding powers ten, rounding digit 5 towards even digit. units considered valid catch length numbers listed quantity 'cardinaltiy' StoxUnits","code":""},{"path":"/reference/ReportRecaCatchAtLengthAndAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report catch at length and age — ReportRecaCatchAtLengthAndAge","text":"","code":"ReportRecaCatchAtLengthAndAge(   RecaCatchAtAge,   PlusGroup = integer(),   LengthInterval = numeric(),   IntervalWidth = numeric(),   Decimals = integer(),   Unit = RstoxData::getUnitOptions(\"cardinality\", conversionRange = c(1, 1e+12)) )"},{"path":"/reference/ReportRecaCatchAtLengthAndAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report catch at length and age — ReportRecaCatchAtLengthAndAge","text":"RecaCatchAtAge Results MCMC simulations (RecaCatchAtAge). PlusGroup given, ages 'PlusGroup' older included plus group. LengthInterval width length bins cm. provided, interval 'RecaCatchAtAge' used. IntervalWidth width reported credible interval. value 0.9 gives 90 per cent credible intervals. Defaults 0.9 Decimals integer specifying number decimals report 'CatchAtAge', 'SD', 'Low' 'High'. Defaults 0. Unit unit 'CatchAtAge', 'SD', 'Low' 'High'","code":""},{"path":"/reference/ReportRecaCatchAtLengthAndAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report catch at length and age — ReportRecaCatchAtLengthAndAge","text":"ReportFdaCatchAtLengthAndAgeData","code":""},{"path":[]},{"path":"/reference/ReportRecaCatchAtLengthAndAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report catch at length and age — ReportRecaCatchAtLengthAndAge","text":"","code":"lengthAge <- ReportRecaCatchAtLengthAndAge(RstoxFDA::RecaCatchAtAgeExample, 13, 10)   lengthAge$NbyLengthAge #>      AgeGroup Age      LengthGroup Length    SD    Low   High CatchAtAgeLength #>   1:    Age 1   1    〈0.0, 10.0］     10     0      0      0                0 #>   2:    Age 1   1   〈10.0, 20.0］     20     0      0      0                0 #>   3:    Age 1   1   〈20.0, 30.0］     30 23659    115  38786            12961 #>   4:    Age 1   1   〈30.0, 40.0］     40 18349      1  51496             8530 #>   5:    Age 1   1   〈40.0, 50.0］     50     0      0      0                0 #>  ---                                                                           #> 139:  Age 13+  13   〈60.0, 70.0］     70     0      0      0                0 #> 140:  Age 13+  13   〈70.0, 80.0］     80   368      0     46               48 #> 141:  Age 13+  13   〈80.0, 90.0］     90 96931  92568 379081           215306 #> 142:  Age 13+  13  〈90.0, 100.0］    100 99512 167288 487483           297411 #> 143:  Age 13+  13 〈100.0, 110.0］    110 62730  56932 253720           134328"},{"path":"/reference/ReportRecaCatchStatistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Report catch statistics — ReportRecaCatchStatistics","title":"Report catch statistics — ReportRecaCatchStatistics","text":"Report summary statistics landed catches MCMC simulations using Reca. function reports estimated total catch, mean length, mean weight, mean age. 'RecaCatchAtAge' contains estimate set aggregation variables, area, gear, stock, etc., summary statistics presented similarly. units considered valid mean lengths listed quantity 'length' StoxUnits units considered valid weights listed quantity 'mass' StoxUnits units considered valid total catch numbers listed quantity 'cardinality' StoxUnits Summary statistics obtained posterior distribution, interval reported equal-tailed credible intervals reported. Rounding numbers according argument 'Decimals' done round, negative numbers specify rounding powers ten, rounding digit 5 towards even digit.","code":""},{"path":"/reference/ReportRecaCatchStatistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report catch statistics — ReportRecaCatchStatistics","text":"","code":"ReportRecaCatchStatistics(   RecaCatchAtAge,   IntervalWidth = numeric(),   UseDefaultDecimalOptions = TRUE,   DecimalTotalNumber = integer(),   DecimalTotalWeight = integer(),   DecimalMeanAge = integer(),   DecimalMeanWeight = integer(),   DecimalMeanLength = integer(),   UseDefaultUnitOptions = TRUE,   UnitTotalNumber = RstoxData::getUnitOptions(\"cardinality\", conversionRange = c(1,     1e+12)),   UnitTotalWeight = RstoxData::getUnitOptions(\"mass\", conversionRange = c(1, 1e+12)),   UnitMeanWeight = RstoxData::getUnitOptions(\"mass\", conversionRange = c(1e-04, 10)),   UnitMeanLength = RstoxData::getUnitOptions(\"length\", conversionRange = c(1e-04, 10)) )"},{"path":"/reference/ReportRecaCatchStatistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report catch statistics — ReportRecaCatchStatistics","text":"RecaCatchAtAge Results MCMC simulations (RecaCatchAtAge). IntervalWidth width reported credible interval. value 0.9 gives 90 per cent credible intervals. Defaults 0.9. UseDefaultDecimalOptions logical determining whether use default decimal options. DecimalTotalNumber integer specifying number decimals report 'TotalNumber', corresponding 'SD', 'Low' 'High'. Defaults 0. DecimalTotalWeight integer specifying number decimals report 'TotalWeightDefaults', corresponding 'SD', 'Low' 'High'. Defaults 0. DecimalMeanAge integer specifying number decimals report 'MeanIndividualAge', corresponding 'SD', 'Low' 'High'. 1. DecimalMeanWeight integer specifying number decimals report 'MeanIndividualWeight', corresponding 'SD', 'Low' 'High'. 3. DecimalMeanLength integer specifying number decimals report 'MeanIndividualLength', corresponding 'SD', 'Low' 'High'.3. UseDefaultUnitOptions logical determining whether use default unit options. UnitTotalNumber unit total catch numbers. 10^6 individuals. UnitTotalWeight unit weight total catch. kiloton. UnitMeanWeight unit mean weight. kg. UnitMeanLength unit mean length. cm.","code":""},{"path":"/reference/ReportRecaCatchStatistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report catch statistics — ReportRecaCatchStatistics","text":"ReportFdaSummaryData","code":""},{"path":[]},{"path":"/reference/ReportRecaCatchStatistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report catch statistics — ReportRecaCatchStatistics","text":"","code":"catchStats <- ReportRecaCatchStatistics(RstoxFDA::RecaCatchAtAgeExample)  catchStats$MeanAge #>    MeanIndividualAge  SD Low High #> 1:               6.9 0.1 6.7  7.1  catchStats$MeanWeight #>    MeanIndividualWeight    SD   Low  High #> 1:                2.943 0.104 2.775 3.085  catchStats$MeanLength #>    MeanIndividualLength   SD    Low   High #> 1:               64.827 0.71 63.707 65.855    #Note that there is no error on the total weight estimate, when there are no grouping variables  catchStats$TotalWeight #>    TotalWeight SD Low High #> 1:          66  0  66   66  catchStats$TotalNumber #>    TotalNumber SD Low High #> 1:          23  1  22   24"},{"path":"/reference/ReportRecaLengthAtAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Report length at age — ReportRecaLengthAtAge","title":"Report length at age — ReportRecaLengthAtAge","text":"Tabulates summary statistics mean length age MCMC simulations using Reca.  MCMC simulations typically obtained RunRecaModels.  Summary statistics obtained posterior distribution,  interval reported equal-tailed credible intervals reported. Mean length plus-groups weighted relative catch--age composite age group.  iterations plus-group ages zero catch age, weight defined,  summary statistics obtained remaining iterations. 'RecaCatchAtAge' contains estimate set aggregation variables,  area, gear, stock, etc., summary statistics presented similarly. Rounding numbers according argument 'Decimals' done round,  negative numbers specify rounding powers ten, rounding digit 5 towards even digit. units considered valid mean lengths listed quantity 'length' StoxUnits","code":""},{"path":"/reference/ReportRecaLengthAtAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report length at age — ReportRecaLengthAtAge","text":"","code":"ReportRecaLengthAtAge(   RecaCatchAtAge,   PlusGroup = integer(),   IntervalWidth = numeric(),   Decimals = integer(),   Threshold = numeric(),   Unit = RstoxData::getUnitOptions(\"length\", conversionRange = c(1e-07, 10)) )"},{"path":"/reference/ReportRecaLengthAtAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report length at age — ReportRecaLengthAtAge","text":"RecaCatchAtAge Results MCMC simulations (RecaCatchAtAge). PlusGroup given, ages 'PlusGroup' older included plus group. IntervalWidth width reported credible interval. value 0.9 gives 90 per cent credible intervals. Defaults `r stoxFunctionAttributes$ReportRecaLengthAtAge$functionParameterDefaults$IntervalWidth`. Decimals integer specifying number decimals report 'MeanIndividualLength', 'SD', 'Low' 'High'. Defaults `r stoxFunctionAttributes$ReportRecaLengthAtAge$functionParameterDefaults$Decimals`. Threshold threshold reporting mean weight. Rows estimated Catch Age (number individuals) lower NA reported mean length Defaults `r stoxFunctionAttributes$ReportRecaLengthAtAge$functionParameterDefaults$Threshold`. Unit unit 'MeanIndividualLength', 'SD', 'Low' 'High'","code":""},{"path":"/reference/ReportRecaLengthAtAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report length at age — ReportRecaLengthAtAge","text":"ReportFdaLengthAtAgeData","code":""},{"path":[]},{"path":"/reference/ReportRecaLengthAtAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report length at age — ReportRecaLengthAtAge","text":"","code":"lengthAtAge <- ReportRecaLengthAtAge(RstoxFDA::RecaCatchAtAgeExample,          PlusGroup = 13, Unit=\"cm\", Decimals = 0)   lengthAtAge$MeanLengthByAge #>     AgeGroup Age MeanIndividualLength SD Low High #>  1:    Age 1   1                   28  2  25   32 #>  2:    Age 2   2                   38  4  35   41 #>  3:    Age 3   3                   47  1  45   48 #>  4:    Age 4   4                   51  1  50   52 #>  5:    Age 5   5                   56  1  55   57 #>  6:    Age 6   6                   61  1  60   62 #>  7:    Age 7   7                   67  1  65   67 #>  8:    Age 8   8                   71  1  70   72 #>  9:    Age 9   9                   75  1  73   76 #> 10:   Age 10  10                   79  1  77   80 #> 11:   Age 11  11                   82  1  81   83 #> 12:   Age 12  12                   85  1  84   87 #> 13:  Age 13+  13                   95  2  92   98"},{"path":"/reference/ReportRecaParameterStatistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Report summary statistics for Reca paramters — ReportRecaParameterStatistics","title":"Report summary statistics for Reca paramters — ReportRecaParameterStatistics","text":"Reports means variances iterations run Reca parameterization, may used input convergence checks.","code":""},{"path":"/reference/ReportRecaParameterStatistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report summary statistics for Reca paramters — ReportRecaParameterStatistics","text":"","code":"ReportRecaParameterStatistics(   RecaParameterData,   ParameterizationSummaryData,   AppendReport = FALSE )"},{"path":"/reference/ReportRecaParameterStatistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report summary statistics for Reca paramters — ReportRecaParameterStatistics","text":"RecaParameterData Simulated Reca parameters ParameterizationSummaryData summary Reca parameters results appended . Optional. AppendReport true, results appended another report provided 'ParameterizationSummaryData'","code":""},{"path":"/reference/ReportRecaParameterStatistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report summary statistics for Reca paramters — ReportRecaParameterStatistics","text":"ParameterizationSummaryData","code":""},{"path":"/reference/ReportRecaParameterStatistics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Report summary statistics for Reca paramters — ReportRecaParameterStatistics","text":"Multiple chains may aggregated one summary table, repeatedly applying function aggregated result provided argument 'ParameterizationSummaryData'. requires chains different, run number iterations. Parameters summary identified following notation: \\<model name\\>-\\<covariate name\\>-\\<covariate value/level\\>:\\<Age group\\> \\<parameter type\\>, e.g: 'ProportionAtAgeModel-Area:47:Age:2 Intercept ' intercept age 2 area 47 Proportion--Age model.","code":""},{"path":[]},{"path":"/reference/ReportRecaWeightAtAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Report weight at age — ReportRecaWeightAtAge","title":"Report weight at age — ReportRecaWeightAtAge","text":"Tabulates summary statistics mean weights age MCMC simulations using Reca. 'RecaCatchAtAge' contains estimate set aggregation variables, area, gear, stock, etc., summary statistics presented similarly. Mean weight plus-groups weighted relative catch--age composite age group. iterations plus-group ages zero catch age, weight defined, summary statistics obtained remaining iterations. Rounding numbers according argument 'Decimals' done round, negative numbers specify rounding powers ten, rounding digit 5 towards even digit. units considered valid mean weights listed quantity 'mass' StoxUnits MCMC simulations typically obtained RunRecaModels. Summary statistics obtained posterior distribution, interval reported 90% equal-tailed credible intervals.","code":""},{"path":"/reference/ReportRecaWeightAtAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report weight at age — ReportRecaWeightAtAge","text":"","code":"ReportRecaWeightAtAge(   RecaCatchAtAge,   PlusGroup = integer(),   IntervalWidth = numeric(),   Decimals = integer(),   Threshold = numeric(),   Unit = RstoxData::getUnitOptions(\"mass\", conversionRange = c(1e-04, 10)) )"},{"path":"/reference/ReportRecaWeightAtAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report weight at age — ReportRecaWeightAtAge","text":"RecaCatchAtAge Results MCMC simulations (RecaCatchAtAge). PlusGroup given, ages 'PlusGroup' older included plus group. IntervalWidth width reported credible interval. value 0.9 gives 90 per cent credible intervals. Defaults 0.9. Decimals integer specifying number decimals report 'MeanIndividualWeight', 'SD', 'Low' 'High'. Defaults 2. Threshold threshold reporting mean weight. Rows estimated Catch Age (number individuals) lower NA reported mean weight. Defaults 0. Unit unit 'MeanIndividualWeight', 'SD', 'Low' 'High'","code":""},{"path":"/reference/ReportRecaWeightAtAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report weight at age — ReportRecaWeightAtAge","text":"ReportFdaWeightAtAgeData","code":""},{"path":[]},{"path":"/reference/ReportRecaWeightAtAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report weight at age — ReportRecaWeightAtAge","text":"","code":"weightAtAge <- RstoxFDA::ReportRecaWeightAtAge(RstoxFDA::RecaCatchAtAgeExample,         PlusGroup = 13, Threshold = 1000, Decimals = 0, Unit = \"g\")   weightAtAge #> $MeanWeightByAge #>     AgeGroup Age MeanIndividualWeight  SD  Low High #>  1:    Age 1   1                  271  67  185  388 #>  2:    Age 2   2                  632 106  468  758 #>  3:    Age 3   3                 1099  52 1013 1178 #>  4:    Age 4   4                 1421  55 1322 1510 #>  5:    Age 5   5                 1859  58 1768 1946 #>  6:    Age 6   6                 2351  67 2235 2447 #>  7:    Age 7   7                 2999  89 2844 3136 #>  8:    Age 8   8                 3544 107 3338 3697 #>  9:    Age 9   9                 4132 137 3847 4340 #> 10:   Age 10  10                 4771 193 4469 5021 #> 11:   Age 11  11                 5349 209 5006 5664 #> 12:   Age 12  12                 5940 245 5539 6362 #> 13:  Age 13+  13                 8232 562 7410 9150 #>  #> $GroupingVariables #> Empty data.table (0 rows and 1 cols): GroupingVariables #>"},{"path":"/reference/RstoxFDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisheries Dependent Analysis with RstoX — RstoxFDA","title":"Fisheries Dependent Analysis with RstoX — RstoxFDA","text":"Fisheries dependent analysis, including running Estimated Catch Age model Reca package developed Norwegian Computing Center. Fisheries dependent analysis, including running Estimated Catch Age model Reca package developed Norwegian Computing Center.","code":""},{"path":"/reference/RstoxFDA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fisheries Dependent Analysis with RstoX — RstoxFDA","text":"estimated catch age (ECA) model uses correlation structure fisheries dependent data distribute age readings cathes (samples) onto total reported landings. ECA model described Hirst, D., Aanes, S., Storvik, G., Huseby, R. B., & Tvete, . F. (2004). Estimating catch age market sampling data using Bayesian hierarchical model. Journal Royal Statistical Society: Series C (Applied Statistics), 53(1), 1-14. estimated catch age (ECA) model uses correlation structure fisheries dependent data distribute age readings cathes (samples) onto total reported landings. ECA model described Hirst, D., Aanes, S., Storvik, G., Huseby, R. B., & Tvete, . F. (2004). Estimating catch age market sampling data using Bayesian hierarchical model. Journal Royal Statistical Society: Series C (Applied Statistics), 53(1), 1-14.","code":""},{"path":[]},{"path":"/reference/RstoxFDA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fisheries Dependent Analysis with RstoX — RstoxFDA","text":"Maintainer: Arne Johannes Holmin arnejh@hi.Authors: Edvin Fuglebakk","code":""},{"path":"/reference/RunRecaEstimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Reca. — RunRecaEstimate","title":"Run Reca. — RunRecaEstimate","text":"function deprecated kept testing purposes. replaced ParameterizeRecaModels RunRecaModels","code":""},{"path":"/reference/RunRecaEstimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Reca. — RunRecaEstimate","text":"","code":"RunRecaEstimate(   RecaData,   Nsamples = integer(),   Burnin = integer(),   Thin = integer(),   Lgamodel = c(\"log-linear\", \"non-linear\"),   Resultdir = character(),   Delta.age = numeric(),   Seed = numeric(),   Caa.burnin = numeric() )"},{"path":"/reference/RunRecaEstimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Reca. — RunRecaEstimate","text":"RecaData RecaData returned PrepareRecaEstimate Nsamples number MCMC samples made available eca.predict. See documentation eca.estimate, Burnin number MCMC samples run discarded eca.estimate samples saved. See documentation eca.estimate. Thin controls many iterations run samples saved. Defaults 0. may set account autocorrelation introduced Metropolis-Hastings simulation. see documentation eca.estimate Lgamodel length age relationship use length-age fits (options: \"log-linear\", \"non-linear\": Schnute-Richards model). See documentation eca.estimate. Resultdir directory Reca may store temp-files eca.estimate eca.predict. . given temporary directory created. See documentation eca.estimate. Delta.age see documentation eca.estimate. Defaults 0.001. Seed see documentation eca.estimate. Defaults random seed. Caa.burnin see documentation eca.predict. Defaults 0.","code":""},{"path":"/reference/RunRecaEstimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Reca. — RunRecaEstimate","text":"RecaResult results Reca run.","code":""},{"path":"/reference/RunRecaEstimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Reca. — RunRecaEstimate","text":"eca.estimate performs Markov-chain Monte Carlo (MCMC) simulations determine maximum likelihood parameters given samples. eca.predict samples posterior distributions parameters estimated eca.estimate, order obtain proportions catches fish parameters. Using parameters given total landings, predictions distribution catch-parameter distributions calculated. resultdir NULL,  temporary directory created purpose. attempted removed execution. removal successful warning issued includes path temporary directory.","code":""},{"path":"/reference/RunRecaModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Reca Models — RunRecaModels","title":"Run Reca Models — RunRecaModels","text":"Runs prediction (catch--age estimate) parameterized Reca models.","code":""},{"path":"/reference/RunRecaModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Reca Models — RunRecaModels","text":"","code":"RunRecaModels(   RecaParameterData,   StoxLandingData,   GroupingVariables = character(),   TemporalResolution = c(\"Quarter\", \"Month\"),   Caa.burnin = numeric(),   CollapseLength = TRUE )"},{"path":"/reference/RunRecaModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Reca Models — RunRecaModels","text":"RecaParameterData Parameters Reca models. StoxLandingData Landings data (StoxLandingData). GroupingVariables character vector identifying columns 'StoxLandingData' results provided . TemporalResolution Code temporal resolution landings: \"Month\" \"Quarter\". Defaults Quarter. Regulates temporal resolution calculating fractional ages fish. confused temporal covariate. Caa.burnin see documentation eca.predict. Defaults 0. CollapseLength indicates whether length groups collapsed result. Defaults TRUE. See details.","code":""},{"path":"/reference/RunRecaModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Reca Models — RunRecaModels","text":"RecaCatchAtAge","code":""},{"path":"/reference/RunRecaModels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Reca Models — RunRecaModels","text":"Parameters may obtained ParameterizeRecaModels. function-parameter 'GroupingVariables' provided, predictions provided corresponding partitions landings. parameter 'StoxLandingData' may differ landings used parameterisation (passed ParameterizeRecaModels), long additional values / levels model covariates / effects introduced. models configured stock-splitting analysis. variable 'Stock' added 'GroupingVariables' return value (RecaCatchAtAge) 'GroupingVariables' specify large number partitions landings, function may exhaust available computer memory.","code":""},{"path":"/reference/RunRecaModels.html","id":"collapselength","dir":"Reference","previous_headings":"","what":"CollapseLength","title":"Run Reca Models — RunRecaModels","text":"default length groups collapsed one length group result. facilitate reporting length resolved data, length distributions. full age-length prediction may extracted setting parameter 'CollapseLength' FALSE. used combination several grouping variables, risk exhausting available computer memory.","code":""},{"path":[]},{"path":"/reference/SetAreaPositionsBiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Set position Biotic — SetAreaPositionsBiotic","title":"Set position Biotic — SetAreaPositionsBiotic","text":"Sets start position based area codes. Appropriate BioticData read NMDbiotic.","code":""},{"path":"/reference/SetAreaPositionsBiotic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set position Biotic — SetAreaPositionsBiotic","text":"","code":"SetAreaPositionsBiotic(   BioticData,   AreaPosition,   LocationVariable = c(\"None\", \"location\"),   System = character(),   Overwrite = F )"},{"path":"/reference/SetAreaPositionsBiotic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set position Biotic — SetAreaPositionsBiotic","text":"BioticData BioticData data positions set AreaPosition coordinates Area Location codes, see AreaPosition LocationVariable Specify column 'BioticData' represented 'Location' 'AreaPosition'. See details. System identifies area coding system used. Corresonds column 'system' 'fishstation' 'BioticData'. Overwrite True existing values 'latitudestart' 'longitudestart' overwritten. False postions latitude longitude kept .","code":""},{"path":"/reference/SetAreaPositionsBiotic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set position Biotic — SetAreaPositionsBiotic","text":"BioticData","code":""},{"path":"/reference/SetAreaPositionsBiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set position Biotic — SetAreaPositionsBiotic","text":"Positions filled columns 'latitudestart' 'longitudestart' 'fishstation' whenever value column 'system' 'fishstation' equal parameter 'System'. 'LocationVariable' specified 'None' area looked 'AreaPosition', using row 'Location' missing. 'LocationVariable' specified 'location', 'area' 'location' 'BioticData' looked 'Area' 'Location' 'AreaPosition'. modifications done rows missing values 'system' 'area' ('location', depending parameter 'LocationVariable'). rows areas coded another system specified parameter 'System' changed. columns table 'fishstation' data originating NMDBiotic (http://www.imr./formats/nmdbiotic/). bioticdata conform , modifications done.","code":""},{"path":[]},{"path":"/reference/SetShortGearBiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Set short gear codes biotic — SetShortGearBiotic","title":"Set short gear codes biotic — SetShortGearBiotic","text":"Set short gear codes stations. Appropriate BioticData read NMDbiotic.","code":""},{"path":"/reference/SetShortGearBiotic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set short gear codes biotic — SetShortGearBiotic","text":"","code":"SetShortGearBiotic(BioticData)"},{"path":"/reference/SetShortGearBiotic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set short gear codes biotic — SetShortGearBiotic","text":"BioticData BioticData data short gear codes set","code":""},{"path":"/reference/SetShortGearBiotic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set short gear codes biotic — SetShortGearBiotic","text":"BioticData","code":""},{"path":"/reference/SetShortGearBiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set short gear codes biotic — SetShortGearBiotic","text":"Set column 'gear' table 'fishstation' BioticData first two characters / digits,   rows gear code currently consist four characters. gear codes NMDBiotic conventionally organised hierarchically, two first characters denote gear group.  two character/digit system convenient work many circumstances. 'gear' table 'fishstation' data originating NMDBiotic (http://www.imr./formats/nmdbiotic/).  bioticdata conform , modifications done.","code":""},{"path":[]},{"path":"/reference/SetStartDateBiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Set startdate Biotic — SetStartDateBiotic","title":"Set startdate Biotic — SetStartDateBiotic","text":"Set start date stop date. Appropriate BioticData read NMDbiotic.","code":""},{"path":"/reference/SetStartDateBiotic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set startdate Biotic — SetStartDateBiotic","text":"","code":"SetStartDateBiotic(BioticData, Overwrite = F)"},{"path":"/reference/SetStartDateBiotic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set startdate Biotic — SetStartDateBiotic","text":"BioticData BioticData data time set Overwrite True existing values stationstartdate overwritten.","code":""},{"path":"/reference/SetStartDateBiotic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set startdate Biotic — SetStartDateBiotic","text":"BioticData","code":""},{"path":"/reference/SetStartDateBiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set startdate Biotic — SetStartDateBiotic","text":"Set column 'stationstartdate' table 'fishstation' BioticData value 'stationstopdate'. Setting stationstartdate facilitates conversion StoxBioticData using StoxBiotic, applicable daily resolution date time critical subsequent analysis. columns table 'fishstation' data originating NMDBiotic (http://www.imr./formats/nmdbiotic/). bioticdata conform , modifications done.","code":""},{"path":[]},{"path":"/reference/SetTimeBiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Set time Biotic — SetTimeBiotic","title":"Set time Biotic — SetTimeBiotic","text":"function deprecated, may replaced TranslateBiotic, VariableName: stationstarttime, TranslationTable: [{\"stationstarttime\":\"function(stationstarttime) .na(stationstarttime)\",\"NewValue\":\"12:00:00.000Z\"}]","code":""},{"path":"/reference/SetTimeBiotic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set time Biotic — SetTimeBiotic","text":"","code":"SetTimeBiotic(BioticData, Time = character(), Overwrite = F)"},{"path":"/reference/SetTimeBiotic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set time Biotic — SetTimeBiotic","text":"BioticData BioticData data time set Time character encoding time. Defaults 12:00:00Z given, otherwise provide UTC-time formatted strptime-string: %H:%M:%SZ, e.g. 12:00:00Z Overwrite True existing values stationstarttime overwritten.","code":""},{"path":"/reference/SetTimeBiotic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set time Biotic — SetTimeBiotic","text":"BioticData","code":""},{"path":"/reference/SetTimeBiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set time Biotic — SetTimeBiotic","text":"Set start time fixed time stations. Appropriate BioticData read NMDbiotic. Set column 'stationstarttime' table 'fishstation' BioticData fixed time. Setting fixed time stationstarttime facilitates conversion StoxBioticData using StoxBiotic, applicable hourly resolution date time necessary subsequent analysis. 'stationstarttime' table 'fishstation' data originating NMDBiotic (http://www.imr./formats/nmdbiotic/). bioticdata conform , modifications done.","code":""},{"path":[]},{"path":"/reference/StockSplittingParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Stock splitting parameters (StockSplittingParameters) — StockSplittingParameters","title":"Stock splitting parameters (StockSplittingParameters) — StockSplittingParameters","text":"Table (data.table) Defining parameters stock-splitting analysis Reca, including  parameters probability misclassifying determining stock membership specimen. stock splitting analysis allows catch age estimated two domains partition individuals,  observed age-determined specimens. developed disciminating Coastal Cod North East Arctic Cod,  based otholith growth patterns, naming conventions derived . adapted  stocks principle bipartite domain definitions (Sex). Two otolith patterns defined two stocks 'CC' 'S'. Otolith type 1 2 identifies  specimen belongs stock 'CC', interpreted otoloith readers 'certain' 'uncertain' CC, respectively.  Otolith type 4 5 identifies specimen belongs stock 'S', interpreted 'uncertain' 'certain' S, respectively.  StockNameCC Name stock identified CC StockNameS Name stock identified S ProbabilityType1As1 Probability classifying type 1 specimen type 1 (certain CC). ProbabilityType5As1 Probability classifying type 5 (certain S) specimen type 1 (certain CC). ProbabilityType2As2 Probability classifying type 2 (uncertain CC) specimen type 2 (uncertain CC). ProbabilityType4As2 Probability classifying type 4 (uncertain S) specimen type 2 (uncertain CC). ProbabilityType2As4 Probability classifying type 2 (uncertain CC) specimen type 4 (uncertain S). ProbabilityType4As4 Probability classifying type 4 (uncertain S) specimen type 4 (uncertain S). ProbabilityType1As5 Probability classifying type 1 (certain CC) specimen type 5 (certain S). ProbabilityType5As5 Probability classifying type 5 (certain S) specimen type 5 (certain S). probabilities different ways classify type must sum 1.  E.g.: ProbabilityType1As1 + ProbabilityType1As5 = 1. data table contains one row.","code":""},{"path":"/reference/StoxBioticDataExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Norwegian port sampling program. — StoxBioticDataExample","title":"Data from Norwegian port sampling program. — StoxBioticDataExample","text":"Example data formatted StoxBioticData, additional columns added AddGearGroupStoxBiotic, AddStratumStoxBiotic, AddPeriodStoxBiotic, AddToStoxBiotic. data contain saithe samples norwegian port-sampling 2021.","code":""},{"path":"/reference/StoxBioticDataExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Norwegian port sampling program. — StoxBioticDataExample","text":"","code":"data(StoxBioticDataExample)"},{"path":"/reference/StoxBioticDataExample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Norwegian port sampling program. — StoxBioticDataExample","text":"StoxBioticData","code":""},{"path":"/reference/StoxBioticDataExample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from Norwegian port sampling program. — StoxBioticDataExample","text":"","code":"RstoxFDA::plotArea(RstoxFDA::StoxBioticDataExample$Station,        areaDef=RstoxFDA::mainareaFdir2018,        latCol = \"Latitude\",        lonCol = \"Longitude\",        areaLabels = TRUE)"},{"path":"/reference/StoxLandingDataExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Saithe landings 2021. — StoxLandingDataExample","title":"Saithe landings 2021. — StoxLandingDataExample","text":"Example data formatted StoxLandingData, additional columns added AddGearGroupStoxLanding, AddStratumStoxLanding, AddAreaPositionStoxLanding, AddStratumStoxLanding, AddPeriodStoxLanding. data contain saithe landings Norwegian vessels areas (mainareaFdir2018) \"00\", \"03\", \"04\", \"05\",\"06\", 2021.","code":""},{"path":"/reference/StoxLandingDataExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saithe landings 2021. — StoxLandingDataExample","text":"","code":"data(StoxLandingDataExample)"},{"path":"/reference/StoxLandingDataExample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Saithe landings 2021. — StoxLandingDataExample","text":"StoxLandingData","code":""},{"path":"/reference/StoxLandingDataExample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Saithe landings 2021. — StoxLandingDataExample","text":"","code":"RstoxFDA::plotBubbleMap(RstoxFDA::StoxLandingDataExample$Landing,        \"Area\", \"RoundWeight\", RstoxFDA::mainareaFdir2018) #> Spherical geometry (s2) switched off #> Spherical geometry (s2) switched on"},{"path":"/reference/TemporalDefinition.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal Categories (TemporalDefinition) — TemporalDefinition","title":"Temporal Categories (TemporalDefinition) — TemporalDefinition","text":"Table (data.table) defining categorical variable grouping data based date.","code":""},{"path":"/reference/TemporalDefinition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Temporal Categories (TemporalDefinition) — TemporalDefinition","text":"TemporalCategory character() Value temporal category StartDay integer() Day month first day temporal category (1-based) StartMonth integer() Month first day temporal category (1-based) StartYear optional integer() Year category defined, omit column seasonal definitions. Start end year implied category delimitations included.  1st January defined start category,  taken included last category preceding year.","code":""},{"path":"/reference/TripPartition.html","id":null,"dir":"Reference","previous_headings":"","what":"Trip Partition — TripPartition","title":"Trip Partition — TripPartition","text":"Partitioning catch trip.","code":""},{"path":"/reference/TripPartition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trip Partition — TripPartition","text":"list two members 'fractions' 'groupDefinition' 'fractions' data.table columns: tripid trip identifier species species identifier groupid identifies group fraction provided . Groups specified 'groupDefinition' fraction fraction total catch species given group 'groupDefinition' data.table columns: groupid identifies group defintion provided . ... one custom columns definint group","code":""},{"path":"/reference/WeightConversionTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight Conversion Table (WeightConversionTable) — WeightConversionTable","title":"Weight Conversion Table (WeightConversionTable) — WeightConversionTable","text":"data.table factors approximating weight   desired product type (e.g. round fish)  weights fish products. Contains columns: 'Description' Free-text description product type 'Species' Identifier species conversion applies 'ProductType' Identifier type product conversion applies 'WeightFactor' scalar value weights given 'ProductType' can multiplied approximate desired product type (e.g. round fish). NA allowed 'WeightFactor', result NA weights conversion","code":""},{"path":"/reference/activityCensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Activity census — activityCensus","title":"Activity census — activityCensus","text":"Example activity census.","code":""},{"path":"/reference/activityCensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity census — activityCensus","text":"","code":"data(activityCensus)"},{"path":"/reference/activityCensus.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Activity census — activityCensus","text":"data.table columns gearFAO gear (FAO ISSCFG 1980). gearNS gear (code based NS 9400, Norwegian standard). targetFAO target species (FAO ASFIS). meshSize mesh size (mm, bar length). vesselLengthCategory length group vessels ranges m. species reported species (FAO ASFIS). wholeWeightKg total catch within activity group kg.","code":""},{"path":"/reference/activityCensus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Activity census — activityCensus","text":"","code":"data(activityCensus) sum(activityCensus$OfficialLandingsWeight) #> [1] 0"},{"path":"/reference/addLogbookColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns from logbooks — addLogbookColumns","title":"Add columns from logbooks — addLogbookColumns","text":"Add columns landings corresponding logbook entries.","code":""},{"path":"/reference/addLogbookColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns from logbooks — addLogbookColumns","text":"","code":"addLogbookColumns(   landings,   logbooks,   logbookColumns,   tripIdCol = \"tripid\",   catchIdCol,   speciesColLand = \"Art FAO (kode)\",   speciesColLog = \"FANGSTART_FAO\" )"},{"path":"/reference/addLogbookColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns from logbooks — addLogbookColumns","text":"landings data.table containing landings records, columns identifying trip catch ('tripIdCol', 'catchIdCol'). logbooks data.table containing logbook records, columns identifying trip catch ('tripIdCol', 'catchIdCol'). logbookColumns character() vector identifies columns logbooks added 'landings' tripIdCol character() identifies column 'landings' 'logbooks' contain trip ids catchIdCol character() identifies column 'landings' 'logbooks' contain catch ids speciesColLand character() identifies column 'landings' identify species landed speciesColLog character() identifies column 'logbooks' identify species caught.","code":""},{"path":"/reference/addLogbookColumns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add columns from logbooks — addLogbookColumns","text":"'landings' already imputed information individual catches.  columns 'tripIdCol' 'catchIdCol' must set 'landings' 'logbooks'. may achieved appendTripIdLogbooks, appendTripIdLandings imputeCatchesLandings. 'landings' may contain records correspond logbook entires ('tripIdCol' contains NAs).  added columns NA records.","code":""},{"path":[]},{"path":"/reference/appendAreaCode.html","id":null,"dir":"Reference","previous_headings":"","what":"Append area code — appendAreaCode","title":"Append area code — appendAreaCode","text":"Append area code","code":""},{"path":"/reference/appendAreaCode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append area code — appendAreaCode","text":"","code":"appendAreaCode(   table,   areaPolygons,   latName,   lonName,   colName,   StratumName = \"StratumName\",   strict = T )"},{"path":"/reference/appendAreaCode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append area code — appendAreaCode","text":"table data.table annotated. areaPolygons SpatialPolygonsDataFrame latName name WGS84 lat column 'table' lonName name WGS84 lon column 'table colName name column appended 'table' StratumName name column 'areaPolygons' identify area name strict logical determining whether run strict mode. See details.","code":""},{"path":"/reference/appendAreaCode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append area code — appendAreaCode","text":"'table' area appended column 'colName'","code":""},{"path":"/reference/appendAreaCode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Append area code — appendAreaCode","text":"Appends column area code table, based positions. polygons overlapping, one point may several polygons,   arbitrary choice made warning issued. default function run 'strict' mode, meaning halt  error positions provided polygons,  positions missing (NA). Turning strict-mode accepts  cases area code NA positions.","code":""},{"path":"/reference/appendMetier.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate metier — appendMetier","title":"Annotate metier — appendMetier","text":"annotates metier data table","code":""},{"path":"/reference/appendMetier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate metier — appendMetier","text":"","code":"appendMetier(   data,   metiertable,   gearColumn,   targetColumn = NULL,   meshSizeColumn = NULL,   selectivityDeviceColumn = NULL,   selectivityDeviceMeshSizeColumn = NULL,   metierColName = \"metier\" )"},{"path":"/reference/appendMetier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate metier — appendMetier","text":"data data.table data annotated metiertable MetierTable metier definitions, object can read readMetierTable gearColumn character() identifies column 'data' encodes gear. Gear definition must match metiertable$gearcode targetColumn character(), optional, identifies column 'data' encodes target species. Definition must match metiertable$target meshSizeColumn integer(), optional, identifies column 'data' encodes mesh size gear. selectivityDeviceColumn character(), optional, identifies column 'data' encodes selectivitydevices mounted gear. Definition must mathc metiertable$selectivityDevice selectivityDeviceMeshSizeColumn integer(), optional, identifies column 'data' encodes mesh size mounted selectivity device. metierColName character() name column appended 'data'","code":""},{"path":"/reference/appendMetier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate metier — appendMetier","text":"data.table 'data' column 'metierColName' appended (character).","code":""},{"path":"/reference/appendMetier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate metier — appendMetier","text":"Annotates data metier, given metier definition (MetierTable) selection data-columns idenitfies metier-defining variables.  Metier names defined column 'metier' 'metiertable', reflect information actually used annotation.  example, metiers type \"OTB_DEF\", indicating gear target assemblage, can configured based gear codes. metier-defining variables 'gearcode', 'target' 'selectivityDevice' (see MetierTable), missing values matches missing values.  , metier defined missing value 'target'  annotated otherwise matching data missing value 'targetColumn'.","code":""},{"path":"/reference/appendMetier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate metier — appendMetier","text":"","code":"data(metier4table)  data(activityCensus)   # annotate metier lvl 4 on the cencus based on gear, and compare with finer gear declaration.  annotated <- appendMetier(activityCensus,           metier4table,           \"gearNS\",           metierColName = \"metier4\")  table(annotated$metier4) #>  #>  FPO   GN  GNS  HAR  LHM   LL  LLD  LTL  MIS  OTB  OTM  OTT   PS  PTB  PTM  SSC  #>   12 1690  252    4    6  812   10    2   27 2069  282  144  855  324  239 2023  #>   SX  TBN  TBS   TX  #>    6   50  922 1508    data(metier5table)  # annotate metier lvl 5 on COD-catches based on only gear,  # and compare with declarations for shrimp fisheries  annotated <- appendMetier(activityCensus[activityCensus$species==\"COD\"],           metier5table,           \"gearNS\",           metierColName = \"metier5\")  annotatedShrimp <- annotated[annotated$targetFAO %in% c(\"PAN\", \"PRA\"),]  table(paste(annotatedShrimp$gearFAO, annotatedShrimp$targetFAO, sep=\"/\"),       annotatedShrimp$metier5) #>           #>           MIS_MIS OTB_CRU OTB_DEF PTB_DEF #>   OTB/PRA       0       0      21       0 #>   PTB/PRA       0       0       0       1 #>   TB/PRA        1       0       0       0 #>   TBN/PAN       0       1       0       0 #>   TBS/PAN       0       2       0       0 #>   TBS/PRA       0      22       0       0 #>   TM/PRA        1       0       0       0 #>   TMS/PRA       0       1       0       0   data(metier6table)  # annotate metier lvl 6 on COD-catches based on gear and mesh size,  # and compare with lvl 5 annotations from last example  annotated <- appendMetier(activityCensus[activityCensus$species==\"COD\"],           metier6table,           \"gearNS\",           meshSizeColumn = \"meshSize\",           metierColName = \"metier6\")  annotated <- appendMetier(annotated,            metier5table,            \"gearNS\",            metierColName = \"metier5\")  annotatedShrimp <- annotated[annotated$targetFAO %in% c(\"PAN\", \"PRA\"),]  table(annotatedShrimp$metier5, annotatedShrimp$metier6) #>           #>           OTB_CRU_16-31_0_0_all OTB_CRU_32-69_0_0_all OTB_DEF_>=120_0_0_all #>   MIS_MIS                     0                     2                     0 #>   OTB_CRU                     2                    22                     1 #>   OTB_DEF                     0                    16                     5 #>   PTB_DEF                     0                     1                     0 #>           #>           OTB_SPF_32-69_0_0_all #>   MIS_MIS                     0 #>   OTB_CRU                     1 #>   OTB_DEF                     0 #>   PTB_DEF                     0"},{"path":"/reference/appendPosition.html","id":null,"dir":"Reference","previous_headings":"","what":"Append positions — appendPosition","title":"Append positions — appendPosition","text":"Appends columns positions data table, based area code. Coordinates retrieved SpatialPolygonsDataFrame calculated  exact defintion coordinates depend polygons constructed. Datum projection enforced, warning issued 'areaPolygons' pass  checks verify planar projection.","code":""},{"path":"/reference/appendPosition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append positions — appendPosition","text":"","code":"appendPosition(   table,   areaPolygons,   areaName,   latColName,   lonColName,   StratumName = \"StratumName\" )"},{"path":"/reference/appendPosition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append positions — appendPosition","text":"table data.table annotated. areaPolygons SpatialPolygonsDataFrame areaName name column identifies area 'table' latColName name latitdue column appended 'table' lonColName name longitude column appended 'table' StratumName name column 'areaPolygons' identifies area.","code":""},{"path":"/reference/appendPosition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append positions — appendPosition","text":"'table' positions appended columns 'latColName' 'lonColName'.","code":""},{"path":"/reference/appendTripIdLandings.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign trip IDs — appendTripIdLandings","title":"Assign trip IDs — appendTripIdLandings","text":"Assigns trip IDs landings based vessel identifier date last catch.","code":""},{"path":"/reference/appendTripIdLandings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign trip IDs — appendTripIdLandings","text":"","code":"appendTripIdLandings(   landings,   tripIds = NULL,   vesselIdCol = \"Radiokallesignal (seddel)\",   lastCatchCol = \"Siste fangstdato\",   tripIdCol = \"tripid\" )"},{"path":"/reference/appendTripIdLandings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign trip IDs — appendTripIdLandings","text":"landings data.table containing landings records tripIds data.table columns 'vesselId', 'time' 'tripId' vesselIdCol character() identifies column 'landings' contain vessel id (e.g. radio call signal) landing vessel. Default compatible readLssFile. lastCatchCol character() identifies POSIXct column 'landings' contain time last catch record. Default compatible readLssFile. tripIdCol character() identifies column name append 'landings'","code":""},{"path":"/reference/appendTripIdLandings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign trip IDs — appendTripIdLandings","text":"data.table columns 'vesselId' 'time'","code":""},{"path":"/reference/appendTripIdLandings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign trip IDs — appendTripIdLandings","text":"'tripIds' NULL, trip IDs constructed landings using makeTripIds","code":""},{"path":"/reference/appendTripIdLandings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign trip IDs — appendTripIdLandings","text":"","code":"if (FALSE) {    #merge mesh size from first operation on a trip into landings    lssfile <- \"\" #set appropriately    logbfile <- \"\" #set appropriately    landings <- RstoxData::readLssFile(lssfile)    logbooks <- RstoxData::readErsFile(logbfile)    tripIds <- makeTripIds(landings)    logbooksWtripIds <- appendTripIdLogbooks(logbooks, tripIds)    landingsWtripIds <- appendTripIdLandings(landings, tripIds)     firstCatch <- logbooksWtripIds[!duplicated(logbooksWtripIds$tripid),]    landingsWmeshSize <- merge(landingsWtripIds,                               firstCatch[,c(\"tripid\", \"MASKEVIDDE\")],                               by=\"tripid\",                               all.x=T)  }"},{"path":"/reference/appendTripIdLogbooks.html","id":null,"dir":"Reference","previous_headings":"","what":"Assing trip ID to logbooks — appendTripIdLogbooks","title":"Assing trip ID to logbooks — appendTripIdLogbooks","text":"Assings trip ID logbooks based vessel identifier known last time operation trip.","code":""},{"path":"/reference/appendTripIdLogbooks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assing trip ID to logbooks — appendTripIdLogbooks","text":"","code":"appendTripIdLogbooks(   logbooks,   tripIds,   timeCol = \"STARTTIDSPUNKT\",   vesselIdCol = \"RC\",   tripIdCol = \"tripid\",   verbose = T )"},{"path":"/reference/appendTripIdLogbooks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assing trip ID to logbooks — appendTripIdLogbooks","text":"logbooks data.table containing logbook records tripIds data.table columns 'vesselId', 'time' 'tripId' timeCol character() identifies POSIXct column 'logbooks' contain time operation logbook record. Default compatible readErsFile. vesselIdCol character() identifies column 'logbooks' contain vessel id (e.g. radio call signal) reporting vessel. Default compatible readErsFile. tripIdCol character() identifies column name append 'logbooks' verbose logical() wheter message progress","code":""},{"path":"/reference/appendTripIdLogbooks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assing trip ID to logbooks — appendTripIdLogbooks","text":"'logbooks' column identified 'tripIDcol' added","code":""},{"path":"/reference/appendTripIdLogbooks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assing trip ID to logbooks — appendTripIdLogbooks","text":"'tripid' need complete sense vessels found 'tripid' assigned trip ID NA,  fishing operations last trip vessel assinged trip ID NA.  function however assign fishing operations vessel preceeding first trip time first trip. Runnning time proportional number trips 'logbooks', advantagous annotate relevant filtering.","code":""},{"path":"/reference/appendTripIdLogbooks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assing trip ID to logbooks — appendTripIdLogbooks","text":"","code":"if (FALSE) {    #make trip ids from landings and assign them to logbooks    lssfile <- \"\" #set appropriately    logbfile <- \"\" #set appropriately    landings <- RstoxData::readLssFile(lssfile)    logbooks <- RstoxData::readErsFile(logbfile)    tripIds <- makeTripIds(landings)    logbooksWtripIds <- appendTripIdLogbooks(logbooks, tripIds)  }"},{"path":"/reference/areaCodeConversionTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Make area code conversion table — areaCodeConversionTable","title":"Make area code conversion table — areaCodeConversionTable","text":"Make conversion table area code-definitions. Conversion tables constructed based geometric principles (based centroid positions, overlap). Whether produces complete correct mapping area codes depends shape size. instance, centroid may outside area odd shapes, areas different definitions may partly overlapping, areas one definition may subdivide another definition. best evaluated visual inspection area definitions. conversion table can constructed following methods (argument: 'method'): overlap area areaDef1 mapped area areaDef2 largest overlap. centroids Eac area areaDef1 mapped area areaDef2 contains centroid. Centroids may preferred performance reasons, depending shape areas, centroid may always good representation. Areas areaDef1 corresponding area areaDef2 omitted results.","code":""},{"path":"/reference/areaCodeConversionTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make area code conversion table — areaCodeConversionTable","text":"","code":"areaCodeConversionTable(   areaDef1,   areaDef2,   areaName1 = \"StratumName\",   areaName2 = areaName1,   method = c(\"overlap\", \"centroids\"),   dTolerance = 1 )"},{"path":"/reference/areaCodeConversionTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make area code conversion table — areaCodeConversionTable","text":"areaDef1 SpatialPolygonsDataFrame defining area codes areaDef2 SpatialPolygonsDataFrame defining area codes areaName1 column areaDef1 identifying name areas areaName2 column areaDef2 identifying name areas method method mapping area codes. See details. dTolerance tolerance parameter passed st_simplify method 'overlap'.","code":""},{"path":"/reference/areaCodeConversionTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make area code conversion table — areaCodeConversionTable","text":"list mapping area codes areaDef1 areaDef2","code":""},{"path":[]},{"path":"/reference/areaCodeConversionTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make area code conversion table — areaCodeConversionTable","text":"","code":"# map fdir areas to ICES areas by overlap  fdir.ICES.map <- areaCodeConversionTable(RstoxFDA::mainareaFdir2018, RstoxFDA::ICESareas)    # map fdir locations to ICES statistical rectangles, by centroids  loc.rectangles.map <- areaCodeConversionTable(RstoxFDA::locationsFdir2018,          RstoxFDA::ICESrectangles, method=\"centroids\")    # map selected statistical rectangles to ICES areas by overlap  data(catchsamples)  selectedRects <- RstoxFDA::ICESrectangles[              RstoxFDA::ICESrectangles$StratumName %in% catchsamples$LEstatRect,]  catchsamples$LEarea <- RstoxFDA::convertCodes(catchsamples$LEstatRect,               areaCodeConversionTable(selectedRects,               RstoxFDA::ICESareas))"},{"path":"/reference/calculateLogbookPartitionByTrip.html","id":null,"dir":"Reference","previous_headings":"","what":"Calcualte catch partition — calculateLogbookPartitionByTrip","title":"Calcualte catch partition — calculateLogbookPartitionByTrip","text":"Partitions total catch species trip provided grouping variables.  NAs weights ignored (treated zero).","code":""},{"path":"/reference/calculateLogbookPartitionByTrip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calcualte catch partition — calculateLogbookPartitionByTrip","text":"","code":"calculateLogbookPartitionByTrip(   logbooks,   groupCols,   tripCol = \"tripid\",   speciesCol = \"FANGSTART_FAO\",   weightCol = \"RUNDVEKT\" )"},{"path":"/reference/calculateLogbookPartitionByTrip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calcualte catch partition — calculateLogbookPartitionByTrip","text":"logbooks data.table logbooks groupCols character() vector names identifying grouping columns 'logbooks' tripCol character() identyfing column 'logbooks' identify trip speciesCol character() identyfing column 'logbooks' specify species. weightCol character() identifying column 'logbboks' specify live weight species.","code":""},{"path":"/reference/calculateLogbookPartitionByTrip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calcualte catch partition — calculateLogbookPartitionByTrip","text":"TripPartition","code":""},{"path":"/reference/calculateLogbookPartitionByTrip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calcualte catch partition — calculateLogbookPartitionByTrip","text":"Default parameters compatible readErsFile tripids annotated appendTripIdLogbooks. partitionings logbooks, consider tabulateFisheries.","code":""},{"path":"/reference/calculateLogbookPartitionByTrip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calcualte catch partition — calculateLogbookPartitionByTrip","text":"","code":"if (FALSE) {   #make calculate fractions in each area for each trip   lssfile <- \"\" #set appropriately   logbfile <- \"\" #set appropriately   landings <- RstoxData::readLssFile(lssfile)   logbooks <- RstoxData::readErsFile(logbfile)   tripIds <- makeTripIds(landings)   logbooksWtripIds <- appendTripIdLogbooks(logbooks, tripIds)    logbooksWtripIds$mainArea <- substring(logbooksWtripIds$LOKASJON_START,1,2)   fractions <- calculateLogbookPartitionByTrip(logbooksWtripIds, \"mainArea\")  }"},{"path":"/reference/catchsamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from Norwegian port sampling program. — catchsamples","title":"Data from Norwegian port sampling program. — catchsamples","text":"Norwegian port sampling Haddock landings 2018 fresh whitefish north Lat 64, covering Jig, Gillnet, Longline, Demershal Seining. Sampling implemented research vessel systematically sampling ports accepting fresh fish along northern Norwegian coast. Landings almost exclusively day-catches located small areas. Vessels intercepted landing, samples 30 fish taken stratified gear species. Length, weight age measured fish. Sex maturity presentation allows . Weight individual fish reported measured (presentation encoded SApres), total weight landing sample converted Whole-weight using constant factors standardized Norwegian Directorate Fisheries. Document mostly Norwegian, relevant table English well).","code":""},{"path":"/reference/catchsamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from Norwegian port sampling program. — catchsamples","text":"","code":"data(catchsamples)"},{"path":"/reference/catchsamples.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from Norwegian port sampling program. — catchsamples","text":"Column names defined RDBES data model version 1.17 (RDBES data model v 1.17)","code":""},{"path":"/reference/catchsamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from Norwegian port sampling program. — catchsamples","text":"","code":"data(catchsamples) table(catchsamples$SApres) #>  #> Gutted  Whole  #>    714   1336"},{"path":"/reference/categoriseDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Get temporal categories — categoriseDate","title":"Get temporal categories — categoriseDate","text":"define categorical variable based vector dates","code":""},{"path":"/reference/categoriseDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get temporal categories — categoriseDate","text":"","code":"categoriseDate(date, temporalType = \"quarter\", seasonal = T, FUN = NULL)"},{"path":"/reference/categoriseDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get temporal categories — categoriseDate","text":"date POSIXct() vector dates temporalType character() specify kind temporal category define: \"quarter\", \"week\" \"custom\" seasonal logical() specify whether temporal category seasonal (e.g. week 1 year x category week 1 year y) FUN function(day, month) mapping day (1-based integer()) month (1-based integer()) value (character()) categorical variable defined.","code":""},{"path":"/reference/categoriseDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get temporal categories — categoriseDate","text":"character() vector values categorical variable, corresponding dates 'date'","code":""},{"path":"/reference/categoriseDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get temporal categories — categoriseDate","text":"","code":"#get current quarter  quarter <- categoriseDate(Sys.time())   #get custom non-seasonal category  dates <- as.POSIXct(c(     \"2018-01-17 21:37:29 CET\",     \"2019-02-28 21:37:29 CET\",     \"2019-12-28 21:37:29 CET\"))  inDecember <- function(day, month){if(month==12){return(\"Yes\")};return(\"No\")}  categoriseDate(dates, temporalType = \"custom\", FUN=inDecember, seasonal = FALSE) #> [1] \"No-2018\"  \"No-2019\"  \"Yes-2019\""},{"path":"/reference/convertCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert codes. — convertCodes","title":"Convert codes. — convertCodes","text":"Apply conversion table, perform approriate checks return result.","code":""},{"path":"/reference/convertCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert codes. — convertCodes","text":"","code":"convertCodes(code, conversionTable, strict = T)"},{"path":"/reference/convertCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert codes. — convertCodes","text":"code character() original codes conversionTable list() mapping code converted code. strict logical() true, execution halts incomplete conversion tables. false unmapped codes set NA.","code":""},{"path":"/reference/convertCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert codes. — convertCodes","text":"character() converted codes","code":""},{"path":"/reference/convertCodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert codes. — convertCodes","text":"default. stop error codes can converted, entries NA.  Require codes (original converted) character().","code":""},{"path":"/reference/convertCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert codes. — convertCodes","text":"","code":"gearConversion <- list()  gearConversion[\"TBS\"] <- \"OTB\"  gearConversion[\"TBN\"] <- \"OTB\"  gearConversion[\"OTB\"] <- \"OTB\"  convertCodes(c(\"TBS\", \"TBN\", \"OTB\"), gearConversion) #> [1] \"OTB\" \"OTB\" \"OTB\""},{"path":"/reference/convertRecaData.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert RecaData — convertRecaData","title":"Convert RecaData — convertRecaData","text":"Converts RecaData prepared StoX-Reca input format accepted eca.estimate.  facilitates preparing input data StoX-project cusomized programs directly interfacing Reca.","code":""},{"path":"/reference/convertRecaData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert RecaData — convertRecaData","text":"","code":"convertRecaData(   RecaData,   nSamples = as.integer(NA),   burnin = as.integer(NA),   thin = as.integer(NA),   resultdir = as.character(NA),   lgamodel = as.character(NA),   delta.age = as.numeric(NA),   seed = as.numeric(NA),   fitfile = as.character(NA),   predictfile = as.character(NA) )"},{"path":"/reference/convertRecaData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert RecaData — convertRecaData","text":"RecaData RecaData, prepared PrepareRecaEstimate. nSamples nSamples specified eca.estimate burnin burnin specified eca.estimate thin thin specified eca.estimate resultdir resultdir specified eca.estimate lgamodel lgamodel specified eca.estimate delta.age delta.age specified eca.estimate seed seed specified eca.estimate fitfile fitfile specified eca.estimate predictfile predictfile specified eca.estimate","code":""},{"path":"/reference/convertRecaData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert RecaData — convertRecaData","text":"list 5 members:  AgeLength Data prepared argument AgeLength eca.estimate WeightLength Data prepared argument WeightLength eca.estimate Landings Data prepared argument Landings eca.estimate GlobalParameters Data prepared argument GlobalParameters eca.estimate, Completeness data structure depend whether optional parameters provided. CovariateMaps input Reca. Nested list, providing mapping integer encoding character encoding levels categorical variables.","code":""},{"path":"/reference/convertRecaData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert RecaData — convertRecaData","text":"StoX-function interfacing Reca-parameterisation (RunRecaModels) accepts data format  RecaData exactly compatible format accepted eca.estimate.  inconvenience introduced make sure output PrepareRecaEstimate adheres  restrictions StoX-user interface, results inspectable . Reca-input include model parameters options, PrepareRecaEstimate sets parameters  implications data formatting, parameters subsequently set instance RunRecaModels.   optional arguments function can used set parameters handled RunRecaModels StoX-workflow. Reca requires categorical variables encoded consecutive integers, starting 1. order keep track correspond representations,   function provides mapping list 'CovariateMaps'. CovariateMaps input Reca, provided assist book-keeping.","code":""},{"path":"/reference/convertToErsData.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert logbook data — convertToErsData","title":"Convert logbook data — convertToErsData","text":"Convert LstLogbookData format provided readErsFile. records can filled, left blank. LstLogbookData contains records fishing date, exact time, required conversion time information. order set start time fishing operations, time day need provided via parameter 'timestring' UTC times assumed.","code":""},{"path":"/reference/convertToErsData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert logbook data — convertToErsData","text":"","code":"convertToErsData(LstLogbookData, timestring = \"12:00:00\")"},{"path":"/reference/convertToErsData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert logbook data — convertToErsData","text":"LstLogbookData LstLogbookData converted timestring string representing time day (UTC) assume fishing operations. Format: %H:%M:%S.","code":""},{"path":"/reference/convertToErsData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert logbook data — convertToErsData","text":"data.table formatted return readErsFile.","code":""},{"path":"/reference/filterLogLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter length-weight outliers — filterLogLinear","title":"Filter length-weight outliers — filterLogLinear","text":"Removes fish records fall outside acceptable weight-length region  defined log-linear model weight=alfa\\*length^beta\\*exp(epsilon); epsilon~N(0,sigma^2) alfa=exp(logalfa), logalfa parameters corresponding arguments function.","code":""},{"path":"/reference/filterLogLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter length-weight outliers — filterLogLinear","text":"","code":"filterLogLinear(   individuals,   logalfa,   beta,   sigma,   kAl,   kAu = kAl,   weightCol = \"IndividualRoundWeight\",   lengthCol = \"IndividualTotalLength\" )"},{"path":"/reference/filterLogLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter length-weight outliers — filterLogLinear","text":"individuals data.table fish records logalfa alfa parameter (log scale) log-linear model beta beta parameter log-linear model sigma standard deviation weight log-linear model kAl Number standard deviations (log scale) defines lower limit acceptable region kAu Number standard deviations (log scale) defines upper limit acceptable region weightCol name column 'individuals' contain fish weight (unit corresponding alfa beta). Default correspond Individual level StoxBioticData, see details. lengthCol name column 'individuals' contain fish length (unit corresponding alfa beta). Default correspond Individual level StoxBioticData","code":""},{"path":"/reference/filterLogLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter length-weight outliers — filterLogLinear","text":"data.table, like individuals, records removed.","code":""},{"path":"/reference/filterLogLinear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter length-weight outliers — filterLogLinear","text":"function intended provide filtering offered ECA 3.x ECA 4.x  removing outliers based log-linear weight-length model,  function arguments named correspond naming convention used ECA. Records removed weights outside range :  alfa\\*L^beta\\*exp(kAu\\*sigma)   alfa\\*L^beta\\*exp(-kAl\\*sigma) records missing length weight removed. Note kAl kAu given log scale, acceptable region  symmetric around growth curve kAl=kAu.","code":""},{"path":"/reference/filterVonBsigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter length-age outliers — filterVonBsigma","title":"Filter length-age outliers — filterVonBsigma","text":"Removes fish records fall outside acceptable age-length region  defined von-Bertalanffy growth curve: length=Linf(1-exp(-K\\*age))\\*exp(epsilon); epsilon~N(0,sigma^2) parameters corresponding arguments function.","code":""},{"path":"/reference/filterVonBsigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter length-age outliers — filterVonBsigma","text":"","code":"filterVonBsigma(   individuals,   Linf,   K,   sigma,   kAl,   kAu = kAl,   ageCol = \"IndividualAge\",   lengthCol = \"IndividualTotalLength\" )"},{"path":"/reference/filterVonBsigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter length-age outliers — filterVonBsigma","text":"individuals data.table fish records Linf Asymptotic length von-Bertalanffy growth curve K growth coefficient von-Bertalanffy growth curve sigma standard deviation length von-Bertalanffy growth curve kAl Number standard deviations (log scale) defines lower limit acceptable region kAu Number standard deviations (log scale) defines upper limit acceptable region ageCol name column 'individuals' contain fish age decimal years. Default correspond Individual level StoxBioticData, see details. lengthCol name column 'individuals' contain fish length unit Linf sigma. Default correspond Individual level StoxBioticData","code":""},{"path":"/reference/filterVonBsigma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter length-age outliers — filterVonBsigma","text":"data.table, like individuals, records removed.","code":""},{"path":"/reference/filterVonBsigma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter length-age outliers — filterVonBsigma","text":"function intended provide filtering offered ECA 3.x ECA 4.x  removing outliers based von-Bertalanffy growth relationships,  function arguments named correspond naming convention used ECA. Fish lengths fall outside range :  Linf\\*(1-exp(-K\\*(AGE)))\\*exp(kAu\\*sigma)   Linf\\*(1-exp(-K\\*(AGE)))\\*exp(-kAl\\*sigma)  removed records missing length age removed. filtering may sensitive resolution age small fish.  age counting completed winter-ring growth,   acceptable resolution may achieved adding M/12 age fish,  M month-number date catch. Note kAl kAu given log scale, acceptable region  symmetric around growth curve kAl=kAu.","code":""},{"path":"/reference/getCovariateMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Covariate Map — getCovariateMap","title":"Make Covariate Map — getCovariateMap","text":"Constructs covariate map R-ECA","code":""},{"path":"/reference/getCovariateMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Covariate Map — getCovariateMap","text":"","code":"getCovariateMap(covariate, samples, landings)"},{"path":"/reference/getCovariateMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Covariate Map — getCovariateMap","text":"covariate character() name covariate make map samples data.table() samples covariate mapping defined (must contain column specified 'covariate') landings data.table() landings covariate mapping defined (may contain column specified 'covariate')","code":""},{"path":"/reference/getCovariateMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Covariate Map — getCovariateMap","text":"list() nth member represents RECA covariate value 'n', covarate 'cov', integer used value , covariateMaps[[cov]][[]] == ","code":""},{"path":"/reference/getCovariateMap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make Covariate Map — getCovariateMap","text":"RECA require covariate formatted integers.  order maintain connection formats covariates, converted back forth pre-defined covariate map","code":""},{"path":"/reference/getCovariateMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Covariate Map — getCovariateMap","text":"","code":"data(catchsamples)  data(landings)  catchsamples$Metier5 <- catchsamples$LEmetier5  landings$Metier5 <- landings$FishingActivityCategoryEuropeanLvl5  getCovariateMap(\"Metier5\", catchsamples, landings) #> [[1]] #> [1] \"LLS_DEF\" #>  #> [[2]] #> [1] \"SSC_DEF\" #>  #> [[3]] #> [1] \"GNS_DEF\" #>  #> [[4]] #> [1] \"OTB_DEF\" #>  #> [[5]] #> [1] \"LX_DEF\" #>  #> [[6]] #> [1] \"PS_DEF\" #>  #> [[7]] #> [1] \"OTT_DEF\" #>  #> [[8]] #> [1] \"PTB_DEF\" #>  #> [[9]] #> [1] \"LHM_DEF\" #>  #> [[10]] #> [1] \"LLD_DEF\" #>  #> [[11]] #> [1] \"GND_DEF\" #>  #> [[12]] #> [1] \"OTM_DEF\" #>  #> [[13]] #> [1] \"FPO_DEF\" #>  #> [[14]] #> [1] \"MIS_DEF\" #>"},{"path":"/reference/getLandings.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats landings for R-ECA. — getLandings","title":"Formats landings for R-ECA. — getLandings","text":"Prepares Landings object required eca.predict.","code":""},{"path":"/reference/getLandings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats landings for R-ECA. — getLandings","text":"","code":"getLandings(   landings,   covariates,   covariateMaps,   date = NULL,   month = NULL,   quarter = NULL )"},{"path":"/reference/getLandings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats landings for R-ECA. — getLandings","text":"landings data.table() total landings (prepRECA, rEcaDataReport), row corresponding one cell. Contains columns: LiveWeightKG numeric(). Total landings (Live/Round weight Kg) cell ... Additional columns used covariates. define cell. Type covariate must sepcified 'fixedEffects', 'randomEffects' 'carEffect' covariates character() vector covariates used model covariateMaps list() mapping covariate values integers used RECA values used 'landings'. covarate 'cov', integer used value , covariateMaps[[cov]][[]] == date POSIXct() vector, matching number rows 'landings', date catch, see details. month integer() vector, matching number rows 'landings', month catch (1 January, etc.), see details. quarter integer() vector, vector, matching number rows 'landings', quarter catch (1 Q1, etc.), see details.","code":""},{"path":"/reference/getLandings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats landings for R-ECA. — getLandings","text":"Landings object required eca.predict","code":""},{"path":"/reference/getLandings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Formats landings for R-ECA. — getLandings","text":"parameters 'date', 'month', 'quarter' used set temporal resolution catch age prediction.  Provide exactly one , set ones NULL.  Temporal resolution need match temporal covariate used.  One can example run month, even Quarter covariate model.","code":""},{"path":"/reference/getLandings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats landings for R-ECA. — getLandings","text":"","code":"data(catchsamples)  data(landings)  catchsamples$Metier5 <- catchsamples$LEmetier5  landings$Metier5 <- landings$FishingActivityCategoryEuropeanLvl5  covMap <- getCovariateMap(\"Metier5\", catchsamples, landings)  getLandings(landings, c(\"Metier5\"), covMap, month=landings$Month) #> $AgeLengthCov #>      constant Metier5  midseason #>   1:        1      NA 0.04166667 #>   2:        1      NA 0.04166667 #>   3:        1      NA 0.04166667 #>   4:        1      NA 0.04166667 #>   5:        1      NA 0.04166667 #>  ---                             #> 136:        1      NA 0.95833333 #> 137:        1      NA 0.95833333 #> 138:        1      NA 0.95833333 #> 139:        1      NA 0.95833333 #> 140:        1      NA 0.95833333 #>  #> $WeightLengthCov #>      constant Metier5  midseason #>   1:        1      NA 0.04166667 #>   2:        1      NA 0.04166667 #>   3:        1      NA 0.04166667 #>   4:        1      NA 0.04166667 #>   5:        1      NA 0.04166667 #>  ---                             #> 136:        1      NA 0.95833333 #> 137:        1      NA 0.95833333 #> 138:        1      NA 0.95833333 #> 139:        1      NA 0.95833333 #> 140:        1      NA 0.95833333 #>  #> $LiveWeightKG #>   [1]     286      25  250036    1830  194018 3273227 1748348      50 4185134 #>  [10]     431   47688  396872    5392       2  476648    3346  227733 3834393 #>  [19] 2074242 9918271     576     182    1502  517766     256      59  816156 #>  [28]    1722   42750 1708199  401854       9 8097981   28918    1487  949050 #>  [37]     284      56  644914   10132    6942 1941510   85133     164 4581130 #>  [46]   18510    2436       2       6 1446977      20   86741   10093    6660 #>  [55] 2252695  159199  952184    7145    1050      31    7610 3004477     403 #>  [64]   39027    5667   43964  878267  195451 1453760      90     809    3697 #>  [73] 1194960     106   46192   33292 1089375  667459  670795 1718245    5049 #>  [82]     412   10907 2680842     312   77216    9135  250326  553660  285489 #>  [91]  599404     145   14485 2040036     217     762   68714     990   31878 #> [100]  631597  374483  474991    1655     114    2714 1124215     257     286 #> [109]   97397    2543   44809 2217342  792741      28 2872604    1576    1850 #> [118]  464053     394      12  108891    4177   71908 4586319 1469352 1613570 #> [127]     965     216   14420  269620    1124   42722     483   52854 4263132 #> [136] 1071761 3355643     460   14715  211022 #>"},{"path":"/reference/imputeCatchesLandings.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute catches to landings — imputeCatchesLandings","title":"Impute catches to landings — imputeCatchesLandings","text":"Imputes landings represent individual catches species trip, redistributes selected values imputed landings.  mimics situation landings reported catch rather trip.  useful obtain higher resolution grouping variables consolidate logbook records landing records,   preserving data landings reported logbooks, preserving total value equal landings.","code":""},{"path":"/reference/imputeCatchesLandings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute catches to landings — imputeCatchesLandings","text":"","code":"imputeCatchesLandings(   landings,   logbooks,   tripIdCol = \"tripid\",   catchIdCol,   speciesColLand = \"Art FAO (kode)\",   speciesColLog = \"FANGSTART_FAO\",   weightCol = \"RUNDVEKT\",   valueColumns = c(\"Bruttovekt\", \"Produktvekt\", \"Rundvekt\") )"},{"path":"/reference/imputeCatchesLandings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute catches to landings — imputeCatchesLandings","text":"landings data.table containing landings records, column identifying trip caught landed catch ('tripIdCol'). logbooks data.table containing logbook records, columns identifying trip ('tripIdCol') catch ('catchIdCol'). tripIdCol character() identifies column 'landings' 'logbooks' contain trip ids catchIdCol character() identifies column 'logbooks' contain catch ids speciesColLand character() identifies column 'landings' contain species ids speciesColLog character() identifies column 'logbooks' contain species ids weightCol character() identifies column 'logbooks' contain weights use redistribution value columns. valueColumns character() vector names columns redistributed imputed landings","code":""},{"path":"/reference/imputeCatchesLandings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute catches to landings — imputeCatchesLandings","text":"data.table 'landings' artificial landings imputed, catch identified added column 'catchIdCol'.","code":""},{"path":"/reference/imputeCatchesLandings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute catches to landings — imputeCatchesLandings","text":"result imputation added lines corresponding catch logbooks,   'valueColumns' redistributed reflect fraction 'weightCol' catch   contributes total trip catch species ('speciesColLog'). Important: columns landings 'valueColumns'  duplicated exactly imputed catches.   means weight-column 'valueColumns' result duplicated total weights column.  also means identifiers / keys may copied thus rendered non-unique imputed landings. Landings trip can found 'logbooks' left untouched.  logbook entries corresponding landings ignored. Default values parameters 'speciesCol' 'valueColumns' suitable data read readLssFile.  Default values 'tripIdCol' corresponds defaults makeTripIds, appendTripIdLandings, appendTripIdLogbooks.","code":""},{"path":[]},{"path":"/reference/is.AgeErrorMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is AgeErrorMatrix — is.AgeErrorMatrix","title":"Check if argument is AgeErrorMatrix — is.AgeErrorMatrix","text":"Checks argument conforms specification AgeErrorMatrix","code":""},{"path":"/reference/is.AgeErrorMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is AgeErrorMatrix — is.AgeErrorMatrix","text":"","code":"is.AgeErrorMatrix(AgeErrorMatrix)"},{"path":"/reference/is.AgeErrorMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is AgeErrorMatrix — is.AgeErrorMatrix","text":"AgeErrorMatrix argument checked data conformity","code":""},{"path":"/reference/is.AgeErrorMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if argument is AgeErrorMatrix — is.AgeErrorMatrix","text":"logical, TRUE argument conforms specification AgeErrorMatrix","code":""},{"path":"/reference/is.AreaPosition.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is AreaPosition — is.AreaPosition","title":"Check if argument is AreaPosition — is.AreaPosition","text":"Checks argument conforms specification AreaPosition","code":""},{"path":"/reference/is.AreaPosition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is AreaPosition — is.AreaPosition","text":"","code":"is.AreaPosition(AreaPosition)"},{"path":"/reference/is.AreaPosition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is AreaPosition — is.AreaPosition","text":"AreaPosition argument checked data conformity","code":""},{"path":"/reference/is.AreaPosition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if argument is AreaPosition — is.AreaPosition","text":"logical, TRUE argument conforms specification AreaPosition","code":""},{"path":"/reference/is.CarNeighbours.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is CarNeighbours — is.CarNeighbours","title":"Check if argument is CarNeighbours — is.CarNeighbours","text":"Checks argument conforms specification CarNeighbours","code":""},{"path":"/reference/is.CarNeighbours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is CarNeighbours — is.CarNeighbours","text":"","code":"is.CarNeighbours(CarNeighbours)"},{"path":"/reference/is.CarNeighbours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is CarNeighbours — is.CarNeighbours","text":"CarNeighbours argument checked data conformity","code":""},{"path":"/reference/is.CarNeighbours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if argument is CarNeighbours — is.CarNeighbours","text":"logical, TRUE argument conforms specification CarNeighbours","code":""},{"path":"/reference/is.LengthConversionTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is LengthConversionTable — is.LengthConversionTable","title":"Check if argument is LengthConversionTable — is.LengthConversionTable","text":"Checks argument conforms specification LengthConversionTable","code":""},{"path":"/reference/is.LengthConversionTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is LengthConversionTable — is.LengthConversionTable","text":"","code":"is.LengthConversionTable(LengthConversionTable)"},{"path":"/reference/is.LengthConversionTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is LengthConversionTable — is.LengthConversionTable","text":"LengthConversionTable argument checked data conformity","code":""},{"path":"/reference/is.LengthConversionTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if argument is LengthConversionTable — is.LengthConversionTable","text":"logical, TRUE argument conforms specification LengthConversionTable","code":""},{"path":"/reference/is.ParameterConvergenceData.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is ParameterConvergenceData — is.ParameterConvergenceData","title":"Checks if argument is ParameterConvergenceData — is.ParameterConvergenceData","text":"Checks argument conforms specification ParameterConvergenceData","code":""},{"path":"/reference/is.ParameterConvergenceData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is ParameterConvergenceData — is.ParameterConvergenceData","text":"","code":"is.ParameterConvergenceData(ParameterConvergenceData)"},{"path":"/reference/is.ParameterConvergenceData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is ParameterConvergenceData — is.ParameterConvergenceData","text":"ParameterConvergenceData argument checked data conformity","code":""},{"path":"/reference/is.ParameterConvergenceData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if argument is ParameterConvergenceData — is.ParameterConvergenceData","text":"logical, TRUE argument conforms specification ParameterConvergenceData","code":""},{"path":"/reference/is.ParameterizationSummaryData.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is ParameterizationSummaryData — is.ParameterizationSummaryData","title":"Checks if argument is ParameterizationSummaryData — is.ParameterizationSummaryData","text":"Checks argument conforms specification ParameterizationSummaryData","code":""},{"path":"/reference/is.ParameterizationSummaryData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is ParameterizationSummaryData — is.ParameterizationSummaryData","text":"","code":"is.ParameterizationSummaryData(ParameterizationSummaryData)"},{"path":"/reference/is.ParameterizationSummaryData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is ParameterizationSummaryData — is.ParameterizationSummaryData","text":"ParameterizationSummaryData argument checked data conformity","code":""},{"path":"/reference/is.ParameterizationSummaryData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if argument is ParameterizationSummaryData — is.ParameterizationSummaryData","text":"logical, TRUE argument conforms specification ParameterizationSummaryData","code":""},{"path":"/reference/is.RecaCatchAtAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is RecaCatchAtAge — is.RecaCatchAtAge","title":"Check if argument is RecaCatchAtAge — is.RecaCatchAtAge","text":"Checks argument conforms specification RecaCatchAtAge","code":""},{"path":"/reference/is.RecaCatchAtAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is RecaCatchAtAge — is.RecaCatchAtAge","text":"","code":"is.RecaCatchAtAge(RecaCatchAtAge)"},{"path":"/reference/is.RecaCatchAtAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is RecaCatchAtAge — is.RecaCatchAtAge","text":"RecaCatchAtAge argument checked data conformity","code":""},{"path":"/reference/is.RecaCatchAtAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if argument is RecaCatchAtAge — is.RecaCatchAtAge","text":"logical, TRUE argument conforms specification RecaCatchAtAge","code":""},{"path":"/reference/is.RecaData.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is RecaData — is.RecaData","title":"Check if argument is RecaData — is.RecaData","text":"Checks argument conforms specification RecaData","code":""},{"path":"/reference/is.RecaData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is RecaData — is.RecaData","text":"","code":"is.RecaData(RecaData)"},{"path":"/reference/is.RecaData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is RecaData — is.RecaData","text":"RecaData argument checked data conformity","code":""},{"path":"/reference/is.RecaData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if argument is RecaData — is.RecaData","text":"logical, TRUE argument conforms specification RecaData","code":""},{"path":"/reference/is.RecaParameterData.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is RecaParameterData — is.RecaParameterData","title":"Check if argument is RecaParameterData — is.RecaParameterData","text":"Checks argument conforms specification RecaParameterData","code":""},{"path":"/reference/is.RecaParameterData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is RecaParameterData — is.RecaParameterData","text":"","code":"is.RecaParameterData(RecaParameterData)"},{"path":"/reference/is.RecaParameterData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is RecaParameterData — is.RecaParameterData","text":"RecaParameterData argument checked data conformity","code":""},{"path":"/reference/is.RecaParameterData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if argument is RecaParameterData — is.RecaParameterData","text":"logical, TRUE argument conforms specification RecaParameterData","code":""},{"path":"/reference/is.RecaResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is RecaResult — is.RecaResult","title":"Check if argument is RecaResult — is.RecaResult","text":"Checks argument conforms specification RecaResult","code":""},{"path":"/reference/is.RecaResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is RecaResult — is.RecaResult","text":"","code":"is.RecaResult(RecaResult)"},{"path":"/reference/is.RecaResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is RecaResult — is.RecaResult","text":"RecaResult argument checked data conformity","code":""},{"path":"/reference/is.RecaResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if argument is RecaResult — is.RecaResult","text":"logical, TRUE argument conforms specification RecaResult","code":""},{"path":"/reference/is.ReportFdaData.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is ReportFdaData — is.ReportFdaData","title":"Checks if argument is ReportFdaData — is.ReportFdaData","text":"Checks argument conforms specification ReportFdaData","code":""},{"path":"/reference/is.ReportFdaData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is ReportFdaData — is.ReportFdaData","text":"","code":"is.ReportFdaData(ReportFdaData)"},{"path":"/reference/is.ReportFdaData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is ReportFdaData — is.ReportFdaData","text":"ReportFdaData argument checked data conformity","code":""},{"path":"/reference/is.ReportFdaData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if argument is ReportFdaData — is.ReportFdaData","text":"logical, TRUE argument conforms specification ReportFdaData","code":""},{"path":"/reference/is.ReportFdaSOP.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is ReportFdaSOP — is.ReportFdaSOP","title":"Checks if argument is ReportFdaSOP — is.ReportFdaSOP","text":"Checks argument conforms specification ReportFdaSOP","code":""},{"path":"/reference/is.ReportFdaSOP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is ReportFdaSOP — is.ReportFdaSOP","text":"","code":"is.ReportFdaSOP(ReportFdaSOP)"},{"path":"/reference/is.ReportFdaSOP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is ReportFdaSOP — is.ReportFdaSOP","text":"ReportFdaSOP argument checked data conformity","code":""},{"path":"/reference/is.ReportFdaSOP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if argument is ReportFdaSOP — is.ReportFdaSOP","text":"logical, TRUE argument conforms specification ReportFdaSOP","code":""},{"path":"/reference/is.ReportFdaSamplingData.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is ReportFdaSamplingData — is.ReportFdaSamplingData","title":"Check if argument is ReportFdaSamplingData — is.ReportFdaSamplingData","text":"Checks argument conforms specification ReportFdaSamplingData","code":""},{"path":"/reference/is.ReportFdaSamplingData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is ReportFdaSamplingData — is.ReportFdaSamplingData","text":"","code":"is.ReportFdaSamplingData(ReportFdaSamplingData)"},{"path":"/reference/is.ReportFdaSamplingData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is ReportFdaSamplingData — is.ReportFdaSamplingData","text":"ReportFdaSamplingData argument checked data conformity","code":""},{"path":"/reference/is.ReportFdaSamplingData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if argument is ReportFdaSamplingData — is.ReportFdaSamplingData","text":"logical, TRUE argument conforms specification ReportFdaSamplingData","code":""},{"path":"/reference/is.StockSplittingParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is StockSplittingParameters — is.StockSplittingParameters","title":"Check if argument is StockSplittingParameters — is.StockSplittingParameters","text":"Checks argument conforms specification StockSplittingParameters","code":""},{"path":"/reference/is.StockSplittingParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is StockSplittingParameters — is.StockSplittingParameters","text":"","code":"is.StockSplittingParameters(StockSplittingParameters)"},{"path":"/reference/is.StockSplittingParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is StockSplittingParameters — is.StockSplittingParameters","text":"StockSplittingParameters argument checked data conformity","code":""},{"path":"/reference/is.StockSplittingParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if argument is StockSplittingParameters — is.StockSplittingParameters","text":"logical, TRUE argument conforms specification StockSplittingParameters","code":""},{"path":"/reference/is.TemporalDefinition.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is TemporalDefinition — is.TemporalDefinition","title":"Check if argument is TemporalDefinition — is.TemporalDefinition","text":"Checks argument conforms specification TemporalDefinition","code":""},{"path":"/reference/is.TemporalDefinition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is TemporalDefinition — is.TemporalDefinition","text":"","code":"is.TemporalDefinition(TemporalDefinition)"},{"path":"/reference/is.TemporalDefinition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is TemporalDefinition — is.TemporalDefinition","text":"TemporalDefinition argument checked data conformity","code":""},{"path":"/reference/is.TemporalDefinition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if argument is TemporalDefinition — is.TemporalDefinition","text":"logical, TRUE argument conforms specification TemporalDefinition","code":""},{"path":"/reference/is.Translation.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if argument is Translation — is.Translation","title":"Checks if argument is Translation — is.Translation","text":"Checks argument conforms specification Translation","code":""},{"path":"/reference/is.Translation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if argument is Translation — is.Translation","text":"","code":"is.Translation(Translation)"},{"path":"/reference/is.Translation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if argument is Translation — is.Translation","text":"Translation argument checked data conformity","code":""},{"path":"/reference/is.Translation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if argument is Translation — is.Translation","text":"logical, TRUE argument conforms specification Translation","code":""},{"path":"/reference/is.WeightConversionTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if argument is WeightConversionTable — is.WeightConversionTable","title":"Check if argument is WeightConversionTable — is.WeightConversionTable","text":"Checks argument conforms specification WeightConversionTable","code":""},{"path":"/reference/is.WeightConversionTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if argument is WeightConversionTable — is.WeightConversionTable","text":"","code":"is.WeightConversionTable(WeightConversionTable)"},{"path":"/reference/is.WeightConversionTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if argument is WeightConversionTable — is.WeightConversionTable","text":"WeightConversionTable argument checked data conformity","code":""},{"path":"/reference/is.WeightConversionTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if argument is WeightConversionTable — is.WeightConversionTable","text":"logical, TRUE argument conforms specification WeightConversionTable","code":""},{"path":"/reference/kommuner2022.html","id":null,"dir":"Reference","previous_headings":"","what":"Norwegian municipalities (kommune) — kommuner2022","title":"Norwegian municipalities (kommune) — kommuner2022","text":"Definitions Norwegian municipalities (kommune), current 2022. providing borders, official name official code.","code":""},{"path":"/reference/kommuner2022.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Norwegian municipalities (kommune) — kommuner2022","text":"","code":"data(kommuner2022)"},{"path":"/reference/kommuner2022.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Norwegian municipalities (kommune) — kommuner2022","text":"KommunePolygons, SpatialPolygonsDataFrame.","code":""},{"path":"/reference/kommuner2022.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Norwegian municipalities (kommune) — kommuner2022","text":"Norwegian landings data often list landing sites identifiers municipalities (kommunenummer). resource can used infer location code associated polygons coordinates, UN/LOCODES. Norwegian municipalities subject revision, resources may obtained completely handle data years.","code":""},{"path":"/reference/kommuner2022.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Norwegian municipalities (kommune) — kommuner2022","text":"","code":"# map kommune to locodes data(kommuner2022) data(portcodes2020) nocodes <- portcodes2020[portcodes2020$Country==\"NO\" & !is.na(portcodes2020$latitude),] locodemap <- RstoxFDA::appendAreaCode(nocodes, kommuner2022,          colName=\"kommune\",          latName = \"latitude\",          lonName = \"longitude\")[,c(\"kommune\", \"Location\")] # Note that kommune does not uniquely identify locode: locodemap[locodemap$kommune==4601,] #>    kommune Location #> 1:    4601      BGO #> 2:    4601      HGR #> 3:    4601      HRV #> 4:    4601      LVG #> 5:    4601      SKV #> 6:    4601      UME"},{"path":"/reference/landings.html","id":null,"dir":"Reference","previous_headings":"","what":"Landings of Haddock — landings","title":"Landings of Haddock — landings","text":"Aggregated landings Haddock Norwegian vessels 2018 reported salesnotes. Gear-codes converted national standard considered approximate.","code":""},{"path":"/reference/landings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Landings of Haddock — landings","text":"","code":"data(landings)"},{"path":"/reference/landings.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Landings of Haddock — landings","text":"RDB CL-table version 1.3 (RDBES exchange format v 1.13). data types may differ specification. Notably species, formatted character.","code":""},{"path":"/reference/landings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Landings of Haddock — landings","text":"","code":"data(landings) sum(landings$OfficialLandingsWeight) #> [1] 95363093"},{"path":"/reference/locationsFdir2017.html","id":null,"dir":"Reference","previous_headings":"","what":"Location codes (FDIR to 2017 incl.) — locationsFdir2017","title":"Location codes (FDIR to 2017 incl.) — locationsFdir2017","text":"Definition location coding system defined Norwegian directorate Fisheries 2017 (inclusive). Polygons defined WGS84 coordinates (unprojected).","code":""},{"path":"/reference/locationsFdir2017.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location codes (FDIR to 2017 incl.) — locationsFdir2017","text":"","code":"data(locationsFdir2017)"},{"path":"/reference/locationsFdir2017.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Location codes (FDIR to 2017 incl.) — locationsFdir2017","text":"SpatialPolygonsDataFrame location names identified column 'StratumName'. See StratumPolygon.","code":""},{"path":"/reference/locationsFdir2017.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location codes (FDIR to 2017 incl.) — locationsFdir2017","text":"","code":"# compare locations and ICES rectangles in Barents Sea  RstoxFDA::plotAreaComparison(     RstoxFDA::ICESrectangles,      RstoxFDA::locationsFdir2017,      xlim=c(20,30),      ylim=c(70,75),      linetype2 = \"dotted\",      polygonColor1 = \"green\",      areaLabels2 = TRUE)"},{"path":"/reference/locationsFdir2018.html","id":null,"dir":"Reference","previous_headings":"","what":"Location codes (FDIR from 2018 incl.) — locationsFdir2018","title":"Location codes (FDIR from 2018 incl.) — locationsFdir2018","text":"Definition location coding system defined Norwegian directorate Fisheries  (2018 revision). revision use fishery statistics 2018 (inclusive). Polygons defined WGS84 coordinates (unprojected).","code":""},{"path":"/reference/locationsFdir2018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Location codes (FDIR from 2018 incl.) — locationsFdir2018","text":"","code":"data(locationsFdir2018)"},{"path":"/reference/locationsFdir2018.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Location codes (FDIR from 2018 incl.) — locationsFdir2018","text":"SpatialPolygonsDataFrame location names identified column 'StratumName'. See StratumPolygon.","code":""},{"path":"/reference/locationsFdir2018.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Location codes (FDIR from 2018 incl.) — locationsFdir2018","text":"","code":"RstoxFDA::plotAreaComparison(RstoxFDA::mainareaFdir2017,       RstoxFDA::mainareaFdir2018,       xlim=c(0,20), ylim=c(50,60))"},{"path":"/reference/logbookAdjustment.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust landings by logbooks — logbookAdjustment","title":"Adjust landings by logbooks — logbookAdjustment","text":"imputes landings redistributes catch within quarter area mimic sales notes individual fishing operation (logbook record).  Applicable formats parsed readLssFile readErsFile","code":""},{"path":"/reference/logbookAdjustment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust landings by logbooks — logbookAdjustment","text":"","code":"logbookAdjustment(   landings,   logbooks,   gearCodes = character(),   speciesColLog = \"FANGSTART_FAO\",   speciesColLand = \"Art FAO (kode)\",   weightColLog = \"RUNDVEKT\",   valueColLand = c(\"Bruttovekt\", \"Produktvekt\", \"Rundvekt\"),   addColumns = character(),   activityTypes = c(\"FIS\", \"REL\", \"SCR\"),   polygons = RstoxFDA::mainareaFdir2018,   lineIdCol = \"Linjenummer\" )"},{"path":"/reference/logbookAdjustment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust landings by logbooks — logbookAdjustment","text":"landings landings returned e.g. readLssFile logbooks logbooks returned e.g. readErsFile gearCodes character() NS-9400 gear-codes logbook cleaning applied . provided, cleaning applied gear codes speciesColLog character() identifies column 'logbook' contain information species catch. speciesColLand character() identifies column 'landings' contain information species catch. weightColLog character() identifies column 'logbook' contain weights redistribution weights based . valueColLand character() vector identifies columns 'landings' contain values redistributed imputed landings (weight value columns) addColumns character() vector identifies columns 'logbooks' added 'landings' activityTypes character() vector activity types utilized logbook records ('AKTIVITET_KODE') polygons SpatialPolygonsDataFrame area names column 'StratumName'. provided, area (\"Hovedområde kode\") calculated position, rather fetched logbook records. lineIdCol character() identifies column 'landings' contain identifier line sales note.","code":""},{"path":"/reference/logbookAdjustment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust landings by logbooks — logbookAdjustment","text":"'landings' catches redistributed sales-note lines corresponding logbook-catch records / fishing operations.","code":""},{"path":"/reference/logbookAdjustment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust landings by logbooks — logbookAdjustment","text":"Imputes landings logbook records, redistributes catches, adds information logbooks.  See details utilized functions: imputeCatchesLandings,   sourceLogbookColumns, addLogbookColumns.  particular consult sourceLogbookColumns learn  columns 'landings' affected imputation. Logbook imputations applied logbook records gears 'gearCodes' given.  gearCodes given (default) available logbook records applied. Landings logbook records available, applied ('gearCode' restriction)  retained untouched returned landings. Sales-note lines identifiers made unique imputation redistribution ('lineIdCol').","code":""},{"path":"/reference/mainareaFdir2017.html","id":null,"dir":"Reference","previous_headings":"","what":"Main areas (FDIR to 2017 incl.) — mainareaFdir2017","title":"Main areas (FDIR to 2017 incl.) — mainareaFdir2017","text":"Definition area coding system defined Norwegian directorate Fisheries 2017 (inclusive). Polygons defined WGS84 coordinates (unprojected).","code":""},{"path":"/reference/mainareaFdir2017.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main areas (FDIR to 2017 incl.) — mainareaFdir2017","text":"","code":"data(mainareaFdir2017)"},{"path":"/reference/mainareaFdir2017.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Main areas (FDIR to 2017 incl.) — mainareaFdir2017","text":"SpatialPolygonsDataFrame area names identified column 'StratumName'. See StratumPolygon.","code":""},{"path":"/reference/mainareaFdir2017.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main areas (FDIR to 2017 incl.) — mainareaFdir2017","text":"","code":"RstoxFDA::plotAreaComparison(RstoxFDA::mainareaFdir2017,       RstoxFDA::mainareaFdir2018,       xlim=c(0,20), ylim=c(50,60))"},{"path":"/reference/mainareaFdir2018.html","id":null,"dir":"Reference","previous_headings":"","what":"Main areas (FDIR from 2018 incl.) — mainareaFdir2018","title":"Main areas (FDIR from 2018 incl.) — mainareaFdir2018","text":"Definition area coding system defined Norwegian directorate Fisheries (2018 revision). revision use fishery statistics 2018 (inclusive). Polygons defined WGS84 coordinates (unprojected).","code":""},{"path":"/reference/mainareaFdir2018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main areas (FDIR from 2018 incl.) — mainareaFdir2018","text":"","code":"data(mainareaFdir2018)"},{"path":"/reference/mainareaFdir2018.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Main areas (FDIR from 2018 incl.) — mainareaFdir2018","text":"SpatialPolygonsDataFrame area names identified column 'StratumName'. See StratumPolygon.","code":""},{"path":"/reference/mainareaFdir2018.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main areas (FDIR from 2018 incl.) — mainareaFdir2018","text":"","code":"RstoxFDA::plotArea(areaDef = RstoxFDA::mainareaFdir2018)"},{"path":"/reference/makeAgeTracesRECA.html","id":null,"dir":"Reference","previous_headings":"","what":"Catch at age traces — makeAgeTracesRECA","title":"Catch at age traces — makeAgeTracesRECA","text":"Compiles traces age groups. value total catch age iteration eca.predict","code":""},{"path":"/reference/makeAgeTracesRECA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catch at age traces — makeAgeTracesRECA","text":"","code":"makeAgeTracesRECA(prediction, unit = \"millions\", plusGroup = NULL)"},{"path":"/reference/makeAgeTracesRECA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Catch at age traces — makeAgeTracesRECA","text":"prediction returned eca.predict runRECA. unit unit traced estimates. See details. plusGroup Fish age older grouped one trace.","code":""},{"path":"/reference/makeAgeTracesRECA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Catch at age traces — makeAgeTracesRECA","text":"data.table() one column age (plus group), one row iteration eca.predict.","code":""},{"path":"/reference/makeAgeTracesRECA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Catch at age traces — makeAgeTracesRECA","text":"number iterations eca.predict  determined parameter 'nSamples' eca.estimate runRECA  parameter 'caa.burnin' (different parameter 'burnin') eca.predict runRECA parameter 'unit' supports: number Catch age number fish thousands Catch age number fish thousands millions Catch age number fish millions kg Catch age mass kilogrammes T Catch age mass tons kT Catch age mass kilotonnes","code":""},{"path":"/reference/makeAgeTracesRECA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Catch at age traces — makeAgeTracesRECA","text":"","code":"data(recaPrediction)  makeAgeTracesRECA(recaPrediction, plusGroup=13) #>            2        3        4        5        6        7         8         9 #>  1: 5.071436 57.52779 157.2190 49.13707 17.90393 6.670291 2.0559312 0.4991370 #>  2: 6.748423 55.24290 145.8560 46.99602 23.01269 7.917396 2.3648727 0.6610583 #>  3: 7.321326 65.41784 150.4459 42.91064 23.27061 6.567285 2.3985501 0.7675303 #>  4: 7.597182 56.39696 151.1578 55.97815 16.74334 8.541702 1.2456728 0.4381584 #>  5: 7.877592 72.62752 140.9677 46.70734 19.94819 7.020340 0.8478461 0.7655145 #>  6: 6.528875 62.79681 149.4854 46.99648 19.26803 6.740761 1.6851874 1.0920434 #>  7: 4.293750 73.08370 144.4609 46.18798 19.52897 6.541902 2.1690896 1.0238879 #>  8: 3.733232 62.05030 151.7276 46.84826 18.67632 7.624992 3.5723253 1.2046359 #>  9: 3.121939 62.78314 159.5012 40.39313 19.26004 6.768792 2.3022494 1.7607639 #> 10: 4.022617 68.41884 141.1321 51.47981 20.13147 8.184323 1.9370136 1.1923242 #> 11: 4.190463 62.59433 143.4548 52.33711 18.80929 7.358876 1.8556586 1.3782049 #> 12: 5.460523 70.86194 135.3595 52.57318 21.08608 6.950138 1.5939303 1.6721217 #> 13: 6.542439 57.90061 149.3361 44.33587 23.80260 6.560222 2.0832829 2.3353937 #> 14: 7.042423 59.59119 157.6821 48.25705 16.84770 6.796558 2.5172785 1.9308792 #> 15: 5.604691 63.46678 145.0272 46.74550 22.93742 5.315149 3.4076541 2.2946706 #> 16: 4.929835 57.39144 152.3403 43.74899 17.71521 6.780860 2.4607543 2.0223970 #> 17: 5.364131 51.70178 151.2191 50.61327 19.63723 6.239793 2.9911022 2.1954029 #> 18: 5.908145 65.56397 143.4936 46.84448 21.82124 7.024807 2.5761218 1.6359209 #> 19: 5.712961 63.32671 141.0058 53.12444 21.59879 6.504901 2.9211724 1.9044963 #> 20: 6.128067 65.93401 148.4191 44.32358 18.60884 6.149501 2.3475305 2.1413553 #> 21: 4.164608 64.18252 149.5307 52.50690 18.11855 5.007737 2.0195596 1.7734386 #> 22: 4.528860 75.05659 135.7944 51.88694 15.59514 6.122143 2.9722324 1.6671924 #> 23: 5.153530 59.16048 143.0562 54.39939 20.42541 5.172893 3.2385877 1.2980825 #> 24: 5.369316 65.44632 137.9879 50.33092 18.07390 7.626326 3.0974696 1.1416621 #> 25: 7.395269 65.37642 146.6788 49.70483 16.74613 6.258194 2.3330227 0.7026741 #> 26: 6.975377 62.48815 147.9744 45.33445 20.52193 5.387252 2.1436035 1.3995638 #> 27: 4.729653 66.28890 143.0541 48.25146 19.69965 6.503520 2.8543996 1.9872122 #> 28: 5.630833 48.87601 155.3567 49.21233 21.10252 7.047630 4.7795140 1.2666304 #> 29: 5.877816 61.46920 150.7409 50.05002 18.46491 6.397042 3.2287542 1.5830577 #> 30: 4.939111 58.38904 153.0760 47.86543 18.66318 7.617063 2.8305008 1.7062701 #> 31: 6.858497 75.00919 139.7398 45.91215 17.20359 9.373313 2.8127556 1.6350333 #> 32: 4.841475 68.75061 134.2295 55.80227 18.37724 8.860029 2.5046351 0.8445977 #> 33: 5.524771 65.32981 144.1201 52.92920 18.89557 7.049977 2.4429431 1.0579736 #> 34: 5.704655 65.17603 159.2678 43.89994 16.83023 7.768336 2.8471866 1.0555871 #> 35: 5.494653 61.89987 141.6850 47.24739 20.25099 7.527318 2.1813132 1.7732306 #> 36: 4.938364 63.68857 140.3199 46.96721 21.77508 5.430538 2.4653339 2.4858685 #> 37: 4.934527 60.08507 155.4755 46.21513 21.22857 4.621337 2.1725778 2.1679303 #> 38: 3.297387 73.50411 150.3488 44.24361 17.05974 4.643883 1.7255429 1.8185118 #> 39: 3.844261 64.04685 154.7931 45.88875 18.73706 8.191418 2.1978583 2.0499367 #> 40: 3.948560 67.06793 150.8472 43.97370 16.05150 8.411872 2.1358632 1.5869472 #> 41: 4.618407 58.66643 135.9670 57.55610 22.26289 7.085175 1.9030166 1.2970883 #> 42: 3.861240 61.37838 145.3992 50.93027 19.24546 6.708574 1.9868694 1.9775288 #> 43: 3.602793 55.67180 147.9914 52.23408 22.49276 8.391988 1.3312130 1.1922926 #> 44: 3.649253 65.10792 145.2303 40.92316 21.69071 9.624586 1.9222380 2.4141120 #> 45: 4.482321 52.17636 155.8123 49.97792 19.52461 7.288277 1.2714825 2.1021133 #> 46: 4.913193 52.93883 156.7286 47.38942 19.64794 5.301782 1.6810399 2.0681667 #> 47: 4.784660 62.48634 148.4956 45.87648 18.68233 8.034028 2.2043470 1.5077839 #> 48: 4.864327 67.13014 135.9789 52.34357 23.29429 6.909578 2.2946289 2.1153921 #> 49: 4.915051 54.00304 143.6959 60.94825 20.65901 6.215670 1.9823930 2.6315814 #> 50: 4.827608 68.98072 144.4407 48.40054 16.77356 7.143069 2.0929583 2.1556835 #>            2        3        4        5        6        7         8         9 #>     10           11           12          13+ #>  1:  0 5.358476e-01 5.235632e-02 2.574511e-03 #>  2:  0 3.746864e-01 9.829235e-02 1.577620e-03 #>  3:  0 3.970121e-01 7.230164e-02 3.041278e-04 #>  4:  0 3.993252e-01 2.537726e-02 3.619289e-03 #>  5:  0 5.322943e-01 4.107091e-03 1.387163e-02 #>  6:  0 8.467851e-01 3.907370e-04 5.673688e-03 #>  7:  0 3.222895e-01 1.420120e-05 4.119028e-03 #>  8:  0 1.232903e-01 0.000000e+00 3.595313e-04 #>  9:  0 1.376769e-01 3.613194e-05 4.156555e-03 #> 10:  0 5.201187e-02 0.000000e+00 3.110813e-03 #> 11:  0 8.012253e-02 0.000000e+00 4.303536e-04 #> 12:  0 1.841865e-01 1.304262e-03 1.203585e-02 #> 13:  0 9.143089e-02 8.009456e-03 6.342044e-02 #> 14:  0 1.206305e-01 8.072043e-02 8.818020e-02 #> 15:  0 1.034273e-01 6.230199e-02 4.979702e-02 #> 16:  0 1.238170e-01 6.378653e-02 3.979492e-02 #> 17:  0 2.485960e-01 7.471258e-02 5.202473e-02 #> 18:  0 1.721069e-01 7.526831e-02 2.152834e-02 #> 19:  0 3.579559e-01 2.819907e-02 1.773465e-02 #> 20:  0 2.825361e-01 9.746262e-03 3.592062e-03 #> 21:  0 2.734809e-01 1.900538e-02 3.050258e-03 #> 22:  0 2.849947e-01 9.705439e-02 8.726843e-03 #> 23:  0 1.288097e-01 4.751068e-02 8.352989e-04 #> 24:  0 5.559850e-02 2.273069e-02 5.046907e-03 #> 25:  0 1.828175e-02 2.125931e-02 1.447473e-02 #> 26:  0 5.337439e-03 4.240766e-02 2.362282e-02 #> 27:  0 2.163786e-05 8.580752e-03 8.331207e-02 #> 28:  0 0.000000e+00 2.049944e-02 5.919618e-02 #> 29:  0 0.000000e+00 1.101308e-01 7.039411e-02 #> 30:  0 3.419798e-05 1.299411e-01 4.425388e-02 #> 31:  0 1.852677e-03 2.694129e-02 8.776073e-02 #> 32:  0 3.271555e-03 1.795180e-02 3.418712e-02 #> 33:  0 7.359879e-03 4.021518e-02 7.920021e-02 #> 34:  0 9.226291e-03 5.134233e-02 3.729445e-02 #> 35:  0 4.137360e-02 2.386780e-02 5.442972e-02 #> 36:  0 3.578867e-02 1.843442e-02 1.208877e-01 #> 37:  0 1.619796e-02 2.765894e-03 4.369335e-02 #> 38:  0 6.628398e-03 1.245390e-03 8.743570e-03 #> 39:  0 2.932724e-03 2.074712e-02 5.107857e-03 #> 40:  0 5.133491e-03 2.923605e-02 7.094264e-05 #> 41:  0 1.064962e-01 3.131209e-02 2.814087e-03 #> 42:  0 2.243847e-01 1.505943e-02 2.487310e-03 #> 43:  0 2.094689e-01 3.107703e-02 7.739626e-05 #> 44:  0 2.206065e-01 8.049682e-02 2.361194e-03 #> 45:  0 7.956321e-02 3.518543e-02 2.606357e-03 #> 46:  0 3.598420e-02 2.699982e-02 4.732701e-04 #> 47:  0 1.766134e-02 1.948988e-02 3.597995e-05 #> 48:  0 2.554516e-02 2.844892e-02 9.588896e-04 #> 49:  0 7.162600e-02 5.526441e-02 2.982786e-05 #> 50:  0 6.614665e-02 4.390141e-02 4.158394e-04 #>     10           11           12          13+"},{"path":"/reference/makeResultTableRECA.html","id":null,"dir":"Reference","previous_headings":"","what":"Catch at Age result table — makeResultTableRECA","title":"Catch at Age result table — makeResultTableRECA","text":"Produces common reported statistics Catch--Age estimation.","code":""},{"path":"/reference/makeResultTableRECA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catch at Age result table — makeResultTableRECA","text":"","code":"makeResultTableRECA(   prediction,   unit = \"millions\",   plusGroup = NULL,   alpha = 0.05 )"},{"path":"/reference/makeResultTableRECA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Catch at Age result table — makeResultTableRECA","text":"prediction returned eca.predict runRECA. unit unit reported estimates. See details. plusGroup Fish age older grouped report alpha value percentiles.","code":""},{"path":"/reference/makeResultTableRECA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Catch at Age result table — makeResultTableRECA","text":"data.table() columns: age Age statistics reported total Estimated total catch age group unit Unit total catch standard deviation estimated total sd Standard deviation estimated total cv Coefficient variation estimated total lowerQuantile Lower quantile (100*alpha/2 percentile) estimated total UpperQuantile Upper quantile: (100*(1-alpha/2) percentile) estimated total alpha alpha quantiles.","code":""},{"path":"/reference/makeResultTableRECA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Catch at Age result table — makeResultTableRECA","text":"parameter 'unit' supports: number Catch age number fish thousands Catch age number fish thousands millions Catch age number fish millions kg Catch age mass kilogrammes T Catch age mass tons kT Catch age mass kilotonnes","code":""},{"path":"/reference/makeResultTableRECA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Catch at Age result table — makeResultTableRECA","text":"","code":"data(recaPrediction)  makeResultTableRECA(recaPrediction, plusGroup=13) #>     age        total     unit upperQuantile lowerQuantile alpha #>  1:   2   5.23740860 millions    7.55175127  3.366104e+00  0.05 #>  2:   3  62.89020409 millions   74.67054655  5.180856e+01  0.05 #>  3:   4 147.06215922 millions  158.91098719  1.354573e+02  0.05 #>  4:   5  48.71480282 millions   57.20106384  4.137034e+01  0.05 #>  5:   6  19.57404860 millions   23.28896437  1.620716e+01  0.05 #>  6:   7   6.91958273 millions    9.25782397  4.725750e+00  0.05 #>  7:   8   2.33974128 millions    3.53527429  1.251480e+00  0.05 #>  8:   9   1.58758079 millions    2.46972328  5.355693e-01  0.05 #>  9:  10   0.00000000 millions    0.00000000  0.000000e+00  0.05 #> 10:  11   0.14879672 millions    0.53504808  4.868518e-06  0.05 #> 11:  12   0.03552055 millions    0.10746717  0.000000e+00  0.05 #> 12: 13+   0.02368909 millions    0.08808582  4.384655e-05  0.05"},{"path":"/reference/makeTripIds.html","id":null,"dir":"Reference","previous_headings":"","what":"Make trip IDs — makeTripIds","title":"Make trip IDs — makeTripIds","text":"Extracts trip IDs landings.","code":""},{"path":"/reference/makeTripIds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make trip IDs — makeTripIds","text":"","code":"makeTripIds(   landings,   vesselIdCol = \"Radiokallesignal (seddel)\",   lastCatchCol = \"Siste fangstdato\" )"},{"path":"/reference/makeTripIds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make trip IDs — makeTripIds","text":"landings data.table containing landings records vesselIdCol character() identifies column 'landings' contain vessel id (e.g. radio call signal) landing vessel. Default compatible readLssFile. lastCatchCol character() identifies Date column 'landings' contain date last catch record. Default compatible readLssFile.","code":""},{"path":"/reference/makeTripIds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make trip IDs — makeTripIds","text":"data.table columns 'vesselId', 'time' (POSIXct time zone 'landings') 'tripId'","code":""},{"path":"/reference/makeTripIds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make trip IDs — makeTripIds","text":"","code":"if (FALSE) {    #make trip ids for landings    lssfile <- \"\" #set appropriately    landings <- RstoxData::readLssFile(lssfile)    tripIds <- makeTripIds(landings)  }"},{"path":"/reference/mergePolygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Merges polygons — mergePolygons","title":"Merges polygons — mergePolygons","text":"Merge SpatialPolygonsDataFrame, StratumPolygon","code":""},{"path":"/reference/mergePolygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merges polygons — mergePolygons","text":"","code":"mergePolygons(shape, mergeCol)"},{"path":"/reference/mergePolygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merges polygons — mergePolygons","text":"shape SpatialPolygonsDataFrame stratadefinition convert mergeCol name column used merging, polygons value column merged one.","code":""},{"path":"/reference/mergePolygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merges polygons — mergePolygons","text":"SpatialPolygonsDataFrame polygons merged","code":""},{"path":"/reference/mergePolygons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merges polygons — mergePolygons","text":"columns must value polygons merged. columns consistent regard, error raised.","code":""},{"path":"/reference/metier4table.html","id":null,"dir":"Reference","previous_headings":"","what":"MetierTable lvl 4 example — metier4table","title":"MetierTable lvl 4 example — metier4table","text":"Example metier table assigning fishing activity Metier level 4. universal conversion table, example table made particular purpose. gear assignments done assumptions, considering exact metier codes acceptable data recipients.","code":""},{"path":"/reference/metier4table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MetierTable lvl 4 example — metier4table","text":"","code":"data(metier4table)"},{"path":"/reference/metier4table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MetierTable lvl 4 example — metier4table","text":"MetierTable column 'gearcode' identifying gear codes used Norwegian fisheries data (derived NS 9400)","code":""},{"path":"/reference/metier4table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MetierTable lvl 4 example — metier4table","text":"","code":"data(metier4table) data(activityCensus) annotated <- appendMetier(activityCensus, metier4table, \"gearNS\", metierColName = \"metier4\") table(annotated$gearFAO, annotated$metier4) #>       #>        FPO   GN  GNS  HAR  LHM   LL  LLD  LTL  MIS  OTB  OTM  OTT   PS  PTB #>   DRB    0    0    0    0    0    0    0    0    2    0    0    0    0    0 #>   FPO   12    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   GEN    0 1080    0    0    0    0    0    0    0    0    0    0    0    0 #>   GN     0  571    0    0    0    0    0    0    0    0    0    0    0    0 #>   GNC    0   39    0    0    0    0    0    0    0    0    0    0    0    0 #>   GNS    0    0  252    0    0    0    0    0    0    0    0    0    0    0 #>   HAR    0    0    0    4    0    0    0    0    0    0    0    0    0    0 #>   HMP    0    0    0    0    0    0    0    0    1    0    0    0    0    0 #>   LA     0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   LHM    0    0    0    0    4    0    0    0    0    0    0    0    0    0 #>   LHP    0    0    0    0    2    0    0    0    0    0    0    0    0    0 #>   LL     0    0    0    0    0  358    0    0    0    0    0    0    0    0 #>   LLD    0    0    0    0    0    0   10    0    0    0    0    0    0    0 #>   LLS    0    0    0    0    0  454    0    0    0    0    0    0    0    0 #>   LTL    0    0    0    0    0    0    0    2    0    0    0    0    0    0 #>   OT     0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   OTB    0    0    0    0    0    0    0    0    0 2069    0    0    0    0 #>   OTM    0    0    0    0    0    0    0    0    0    0  282    0    0    0 #>   OTT    0    0    0    0    0    0    0    0    0    0    0  144    0    0 #>   PS     0    0    0    0    0    0    0    0    0    0    0    0  228    0 #>   PS1    0    0    0    0    0    0    0    0    0    0    0    0  558    0 #>   PS2    0    0    0    0    0    0    0    0    0    0    0    0   69    0 #>   PT     0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   PTB    0    0    0    0    0    0    0    0    0    0    0    0    0  324 #>   PTM    0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   SDN    0    0    0    0    0    0    0    0   24    0    0    0    0    0 #>   SPR    0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   SSC    0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   SV     0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   SX     0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   TB     0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   TBN    0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   TBS    0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   TM     0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   TMS    0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>   TX     0    0    0    0    0    0    0    0    0    0    0    0    0    0 #>       #>        PTM  SSC   SX  TBN  TBS   TX #>   DRB    0    0    0    0    0    0 #>   FPO    0    0    0    0    0    0 #>   GEN    0    0    0    0    0    0 #>   GN     0    0    0    0    0    0 #>   GNC    0    0    0    0    0    0 #>   GNS    0    0    0    0    0    0 #>   HAR    0    0    0    0    0    0 #>   HMP    0    0    0    0    0    0 #>   LA     0    0    3    0    0    0 #>   LHM    0    0    0    0    0    0 #>   LHP    0    0    0    0    0    0 #>   LL     0    0    0    0    0    0 #>   LLD    0    0    0    0    0    0 #>   LLS    0    0    0    0    0    0 #>   LTL    0    0    0    0    0    0 #>   OT     0    0    0    0    0   12 #>   OTB    0    0    0    0    0    0 #>   OTM    0    0    0    0    0    0 #>   OTT    0    0    0    0    0    0 #>   PS     0    0    0    0    0    0 #>   PS1    0    0    0    0    0    0 #>   PS2    0    0    0    0    0    0 #>   PT     0    0    0    0    0   48 #>   PTB    0    0    0    0    0    0 #>   PTM  239    0    0    0    0    0 #>   SDN    0    9    0    0    0    0 #>   SPR    0  105    0    0    0    0 #>   SSC    0 1342    0    0    0    0 #>   SV     0  567    0    0    0    0 #>   SX     0    0    3    0    0    0 #>   TB     0    0    0    0    0 1057 #>   TBN    0    0    0   50    0    0 #>   TBS    0    0    0    0  896    0 #>   TM     0    0    0    0    0  333 #>   TMS    0    0    0    0   26    0 #>   TX     0    0    0    0    0   58"},{"path":"/reference/metier5table.html","id":null,"dir":"Reference","previous_headings":"","what":"MetierTable lvl 5 example — metier5table","title":"MetierTable lvl 5 example — metier5table","text":"Example metier table assigning fishing activity Metier level 5, based gear codes. universal conversion table, example table made particular purpose. gear assignments done assumptions, considering exact metier codes acceptable data recipients.","code":""},{"path":"/reference/metier5table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MetierTable lvl 5 example — metier5table","text":"","code":"data(metier5table)"},{"path":"/reference/metier5table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MetierTable lvl 5 example — metier5table","text":"MetierTable column 'gearcode' identifying gear codes used Norwegian fisheries data (derived NS 9400)","code":""},{"path":"/reference/metier5table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MetierTable lvl 5 example — metier5table","text":"example NS9400 codes nephrops shrimp trawls, necessarilly distinguish pelagic shrimp trawls bottom shrimp trawls. Also data recipient accept FAO codes nephrops shrimp trawls, gears assigned OTB, target assemblage set either \"DEF\" (demershal fish) \"CRU\" (crustaceans). examples pragmatic code-mapping well. particular one explained order caution indiscriminate use. code example annotates activity census COD-catches FAO-gearcode declarations target sepcies declarations, compares annotated metiers codes used reporting catch shrimp declared target.","code":""},{"path":"/reference/metier5table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MetierTable lvl 5 example — metier5table","text":"","code":"data(metier5table) data(activityCensus) annotated <- appendMetier(activityCensus[activityCensus$species==\"COD\"],          metier5table,          \"gearNS\",          metierColName = \"metier5\") annotatedShrimp <- annotated[annotated$targetFAO %in% c(\"PAN\", \"PRA\"),] table(paste(annotatedShrimp$gearFAO, annotatedShrimp$targetFAO, sep=\"/\"),       annotatedShrimp$metier5) #>           #>           MIS_MIS OTB_CRU OTB_DEF PTB_DEF #>   OTB/PRA       0       0      21       0 #>   PTB/PRA       0       0       0       1 #>   TB/PRA        1       0       0       0 #>   TBN/PAN       0       1       0       0 #>   TBS/PAN       0       2       0       0 #>   TBS/PRA       0      22       0       0 #>   TM/PRA        1       0       0       0 #>   TMS/PRA       0       1       0       0"},{"path":"/reference/metier6table.html","id":null,"dir":"Reference","previous_headings":"","what":"MetierTable lvl 6 example — metier6table","title":"MetierTable lvl 6 example — metier6table","text":"Example metier table assigning fishing activity Metier level 6, based gear codes mesh-sizes. universal conversion table, example table made particular purpose. gear assignments done assumptions, considering exact metier codes acceptable data recipients.","code":""},{"path":"/reference/metier6table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MetierTable lvl 6 example — metier6table","text":"","code":"data(metier6table)"},{"path":"/reference/metier6table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"MetierTable lvl 6 example — metier6table","text":"MetierTable column 'gearcode' identifying gear codes used Norwegian fisheries data (derived NS 9400)","code":""},{"path":"/reference/metier6table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MetierTable lvl 6 example — metier6table","text":"example agreed data recipient bottom trawls reported OTB, paired trawl explicitly grouped otter trawls. examples pragmatic code-mapping well. particular one explained order caution indiscriminate use. code example annotates activity census COD-catches FAO-gearcode declarations target sepcies declarations, compares annotated metiers codes used reporting catch shrimp declared target.","code":""},{"path":"/reference/metier6table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MetierTable lvl 6 example — metier6table","text":"","code":"data(metier6table) data(activityCensus) annotated <- appendMetier(activityCensus[activityCensus$species==\"COD\"],         metier6table,         \"gearNS\",         meshSizeColumn = \"meshSize\",         metierColName = \"metier6\") annotatedShrimp <- annotated[annotated$targetFAO %in% c(\"PAN\", \"PRA\"),] table(paste(annotatedShrimp$gearFAO, annotatedShrimp$targetFAO, sep=\"/\"),      annotatedShrimp$metier6) #>           #>           OTB_CRU_16-31_0_0_all OTB_CRU_32-69_0_0_all OTB_DEF_>=120_0_0_all #>   OTB/PRA                     0                    16                     5 #>   PTB/PRA                     0                     1                     0 #>   TB/PRA                      0                     1                     0 #>   TBN/PAN                     0                     0                     0 #>   TBS/PAN                     0                     2                     0 #>   TBS/PRA                     2                    19                     1 #>   TM/PRA                      0                     1                     0 #>   TMS/PRA                     0                     1                     0 #>           #>           OTB_SPF_32-69_0_0_all #>   OTB/PRA                     0 #>   PTB/PRA                     0 #>   TB/PRA                      0 #>   TBN/PAN                     1 #>   TBS/PAN                     0 #>   TBS/PRA                     0 #>   TM/PRA                      0 #>   TMS/PRA                     0"},{"path":"/reference/plotAgeTraces.html","id":null,"dir":"Reference","previous_headings":"","what":"Traceplot — plotAgeTraces","title":"Traceplot — plotAgeTraces","text":"Plots paneled plot traces age groups. value total catch age iteration eca.predict","code":""},{"path":"/reference/plotAgeTraces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Traceplot — plotAgeTraces","text":"","code":"plotAgeTraces(   prediction,   unit = \"millions\",   plusGroup = NULL,   nclust = 4,   iter.max = 20,   nstart = 10,   agecolors = NULL,   lowerquant = 0.05,   upperquant = 0.95,   catlimit = 8,   title = \"\" )"},{"path":"/reference/plotAgeTraces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Traceplot — plotAgeTraces","text":"prediction returned eca.predict runRECA. unit unit traced estimates. See details. plusGroup Fish age older grouped one trace. nclust number plots distribute ages plus group iter.max maximal number iterations k-means clustering deciding ages plotted plot. nstart number random sets chosen k-means clustering agecolors named vector matching ages colors, null default color scheme used lowerquant lower quantile age group plot points upperquant upper quantile age group plot points catlimit upper limit number ages plot using categorical coloring. Plots number ages use gradient coloring scheme title main title plot","code":""},{"path":"/reference/plotAgeTraces.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Traceplot — plotAgeTraces","text":"number iterations eca.predict  determined parameter 'nSamples' eca.estimate runRECA  parameter 'caa.burnin' (different parameter 'burnin') eca.predict runRECA parameter 'unit' supports: number Catch age number fish thousands Catch age number fish thousands millions Catch age number fish millions kg Catch age mass kilogrammes T Catch age mass tons kT Catch age mass kilotonnes order trade readability plots number panels needed. traces clustered simple clustering algorithm  grouped plots accordingly. Adjust clustering parameters, get fewer plots.","code":""},{"path":"/reference/plotAgeTraces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Traceplot — plotAgeTraces","text":"","code":"data(recaPrediction)  plotAgeTraces(recaPrediction, plusGroup=13, nclust = 6)"},{"path":"/reference/plotArea.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot area definitions on a map — plotArea","title":"Plot area definitions on a map — plotArea","text":"Plots area polygons map, may plot set positions well.","code":""},{"path":"/reference/plotArea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot area definitions on a map — plotArea","text":"","code":"plotArea(   data = NULL,   latCol = NULL,   lonCol = NULL,   groupCol = NULL,   areaDef = NULL,   areaNameCol = \"StratumName\",   areaLabels = is.null(data),   xlim = NULL,   ylim = NULL,   areaLabelSize = 2,   pointColor = \"darkred\",   pointShape = 23,   pointSize = 1,   title = \"\",   projection = NULL,   polygonColor = \"blue\" )"},{"path":"/reference/plotArea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot area definitions on a map — plotArea","text":"data data.frame points plotted latCol character() identifing column 'data' specify latitudes (WGS84) lonCol character() identifing column 'data' specify longitudes (WGS84) groupCol character() identifying column 'daat' specify grouping points areaDef SpatialPolygonsDataFrame areaNameCol identifies column 'areaDef' label names areas areaLabels logical whether plot area labels xlim x axis limits degrees longitude ylim y axis limits degrees latitude areaLabelSize size area labels pointColor color points plotted. pointShape ggplot2 shape points plotted pointSize size points plotted title plot title projection proj4string EPSG code specifying desired projection, see st_crs. Defaults mercator projection. polygonColor color used plotting polygons.","code":""},{"path":"/reference/plotArea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot area definitions on a map — plotArea","text":"Map ranges plot specified 'xlim' 'ylim'. always given lon/lat.  given derived order include positions 'data'.  'data given derived bounding box 'areaDef'.  allow flexible projection, space added around 'xlim' 'ylim'. 'areaDef' 'data' optional, function may used plot position without area defintion,   even just plot maps xlim ylim provided. Colors can specified understood ggplot2. E.g. one listed colors.","code":""},{"path":"/reference/plotArea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot area definitions on a map — plotArea","text":"","code":"# plot ICES areas with default projection  data(ICESareas)  plotArea(areaDef=ICESareas)    data(mainareaFdir2018)  data(NAFOareas)  # plot mainarea and NAFO areas combined in a Lambert Conformal Conic projection.  plotArea(title=\"Main area + NAFO\",           areaDef=rbind(mainareaFdir2018[,c(\"StratumName\")],                   NAFOareas[,c(\"StratumName\")]),           projection=\"+proj=lcc +lat_1=43 +lat_2=62 +lat_0=30            +lon_0=10 +x_0=0 +y_0=0 +ellps=intl +units=m +no_defs\")"},{"path":"/reference/plotAreaComparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare area definitions — plotAreaComparison","title":"Compare area definitions — plotAreaComparison","text":"Plots two area defintions top comparison","code":""},{"path":"/reference/plotAreaComparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare area definitions — plotAreaComparison","text":"","code":"plotAreaComparison(   areaDef1,   areaDef2,   areaNameCol1 = \"StratumName\",   areaNameCol2 = areaNameCol1,   areaLabels1 = F,   areaLabels2 = F,   xlim = NULL,   ylim = NULL,   areaLabelSize = 2,   title = \"\",   projection = NULL,   polygonColor1 = \"blue\",   polygonColor2 = \"red\",   linetype1 = \"solid\",   linetype2 = \"dotdash\" )"},{"path":"/reference/plotAreaComparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare area definitions — plotAreaComparison","text":"areaDef1 SpatialPolygonsDataFrame. area definition plotted first (\"behind\" one) areaDef2 SpatialPolygonsDataFrame. area definition plotted second (\"top \" one) areaNameCol1 column areaDef1 provides names used labeling areas areaNameCol2 column areaDef2 provides names used labeling areas areaLabels1 logical, specifying whether labels plotted areaDef1. plotted first (\"behind\" labels plotted areaDef2) areaLabels2 logical, specifying whether labels plotted areaDef2. second (\"top \" labels plotted areaDef1) xlim x axis limits degrees longitude ylim y axis limits degrees latitudeD areaLabelSize size area labels title plot title projection proj4string EPSG code specifying desired projection, see st_crs. Defaults mercator projection. polygonColor1 color used plotting areaDef1 polygons. polygonColor2 color used plotting areaDef2 polygons. linetype1 linetype used plotting areaDef1 polygons. linetype2 linetype used plotting areaDef2 polygons.","code":""},{"path":"/reference/plotAreaComparison.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare area definitions — plotAreaComparison","text":"Map ranges plot specified 'xlim' 'ylim'. always given lon/lat.  given derived bounding box 'areaDef'.  allow flexible projection, space added around 'xlim' 'ylim'. Colors can specified understood ggplot2. E.g. one listed colors.  Linetypes can specified understood ggplot2. E.g: \"solid\", \"dashed\", \"dotted\", \"dotdash\", \"longdash\", \"twodash\".","code":""},{"path":"/reference/plotAreaComparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare area definitions — plotAreaComparison","text":"","code":"#illustratting the difference between to similar area coding systems:  plotAreaComparison(RstoxFDA::mainareaFdir2017,                      RstoxFDA::mainareaFdir2018,                      xlim=c(0,12),                      ylim=c(54,60),                      areaLabels2 = TRUE,                      title=\"Comparing Fdir main area definitions, before and as of 2018\")"},{"path":"/reference/plotBubbleMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots bubble plot on map — plotBubbleMap","title":"Plots bubble plot on map — plotBubbleMap","text":"Plots scalar nonegative quantities associated area code, bubbles map.","code":""},{"path":"/reference/plotBubbleMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots bubble plot on map — plotBubbleMap","text":"","code":"plotBubbleMap(   data,   areaCol,   quantityCol,   areaDef,   areaNameCol = \"StratumName\",   legendTitle = quantityCol,   areaLabels = T,   xlim = NULL,   ylim = NULL,   areaLabelSize = 2,   bubbleColor = \"darkred\",   bubbleSize = 10,   bubbleShape = 21,   title = \"\",   projection = NULL )"},{"path":"/reference/plotBubbleMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots bubble plot on map — plotBubbleMap","text":"data data.frame quantities plotted areaCol character() identifing column 'data' specify area codes, must correspond 'areaNameCol' quantityCol character() identifing column 'data' specify quantities plotted areaDef SpatialPolygonsDataFrame areaNameCol identifies column 'areaDef' label names areas, must correspond 'areaCol' legendTitle title legend (explains quantities ) areaLabels logical whether plot area labels xlim x axis limits degrees longitude ylim y axis limits degrees latitude areaLabelSize size area labels bubbleColor color bubbles bubbleSize size bubbles bubbleShape shape \"bubbles\". Default circle (21). Use e.g. 22 squares (consult list pch values) title plot title projection proj4string EPSG code specifying desired projection, see st_crs. Defaults mercator projection","code":""},{"path":"/reference/plotBubbleMap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plots bubble plot on map — plotBubbleMap","text":"quantities (quantityCol) aggregated (summed, ignoring NAs) combinations area group ('areaCol' 'groupCol') (given)  Bubble areas proportional quantities.","code":""},{"path":"/reference/plotBubbleMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots bubble plot on map — plotBubbleMap","text":"","code":"data(landings)  data(ICESareas)  plotBubbleMap(landings, \"Area\", \"LiveWeightKG\",        areaDef = ICESareas, areaNameCol = \"Area_Full\",        bubbleSize = 20, title=\"Landings on ICES areas\") #> Spherical geometry (s2) switched off #> Spherical geometry (s2) switched on"},{"path":"/reference/plotCatchAtAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Catch at Age plot — plotCatchAtAge","title":"Catch at Age plot — plotCatchAtAge","text":"Plots estimated total catch age age group.  Constructs equal tailed credibility intervals (probability mass interval approximatelty ).","code":""},{"path":"/reference/plotCatchAtAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catch at Age plot — plotCatchAtAge","text":"","code":"plotCatchAtAge(   prediction,   unit = \"millions\",   plusGroup = NULL,   credibility = 0.95,   title = NULL )"},{"path":"/reference/plotCatchAtAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Catch at Age plot — plotCatchAtAge","text":"prediction returned eca.predict runRECA. unit unit reported estimates. See details. plusGroup Fish age older grouped plot credibility desired credibility credibility intervals. title Title plot","code":""},{"path":"/reference/plotCatchAtAge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Catch at Age plot — plotCatchAtAge","text":"parameter 'unit' supports: number Catch age number fish thousands Catch age number fish thousands millions Catch age number fish millions kg Catch age mass kilogrammes T Catch age mass tons kT Catch age mass kilotonnes","code":""},{"path":"/reference/plotCatchAtAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Catch at Age plot — plotCatchAtAge","text":"","code":"data(recaPrediction)  plotCatchAtAge(recaPrediction)"},{"path":"/reference/portcodes2020.html","id":null,"dir":"Reference","previous_headings":"","what":"UN Location codes for ports — portcodes2020","title":"UN Location codes for ports — portcodes2020","text":"Table United Nations Codes Trade Transport Locations (UN/LOCODE) seaport. Updated ca 2020.","code":""},{"path":"/reference/portcodes2020.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UN Location codes for ports — portcodes2020","text":"","code":"data(portcodes2020)"},{"path":"/reference/portcodes2020.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"UN Location codes for ports — portcodes2020","text":"LocodeTable.","code":""},{"path":"/reference/portcodes2020.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UN Location codes for ports — portcodes2020","text":"considerable lag national adaptation new locodes updates UN/LOCODE lists. Norwegian institution coordinates new needs LOCODES Norwegian Coastal Administration (Kystverket).","code":""},{"path":"/reference/portcodes2020.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UN Location codes for ports — portcodes2020","text":"","code":"data(portcodes2020) nocodes <- portcodes2020[portcodes2020$Country==\"NO\" & !is.na(portcodes2020$latitude),] RstoxFDA::plotArea(nocodes, \"latitude\", \"longitude\", areaDef=RstoxFDA::mainareaFdir2017)"},{"path":"/reference/prepRECA.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for R-ECA — prepRECA","title":"Prepare data for R-ECA — prepRECA","text":"Checks reformats data preparation running runRECA RunRecaEstimate  confused PrepareRecaEstimate, primarily intended including Stox projects.","code":""},{"path":"/reference/prepRECA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for R-ECA — prepRECA","text":"","code":"prepRECA(   samples,   landings,   fixedEffects,   randomEffects,   carEffect = NULL,   neighbours = NULL,   nFish = NULL,   ageError = NULL,   minAge = NULL,   maxAge = NULL,   maxLength = NULL,   lengthResolution = NULL,   testMax = 1000,   date = NULL,   month = NULL,   quarter = NULL,   hatchDay = 1,   interaction = NULL )"},{"path":"/reference/prepRECA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for R-ECA — prepRECA","text":"samples data.table() samples, row corresponding one sampled fish. Contains columns: catchId Column identifying catch sample taken . Typically haul landing. sampleId Column identifying sample. one sample taken catch. can set equal catchId date POSIXct() Date catch Age integer() Age fish Length numeric() Length fish cm. Must complete (NAs) Weight numeric() Weight fish kg. Fish missing values included Weight-given-length model. Otolithtype integer(), optional, Code identifying stock-classification, may contain integers 1,2,4 5. ... Additional columns may used covariates covariates. Type covariate must sepcified 'fixedEffects', 'randomEffects' 'carEffect' landings data.table() total landings, row corresponding one cell. Contains columns: LiveWeightKG numeric(). Total landings (Live/Round weight Kg) cell ... Additional columns may used covariates. Covariates landings define cell. Type covariate must sepcified 'fixedEffects', 'randomEffects' 'carEffect' fixedEffects character() vector specifying fixed effects. Corresponding columns must exists samples landings. randomEffects character() vector specifying random effects. Corresponding columns must exists samples (may also exist landings). carEffect character() specifying random effect conditional autoregressive coefficient. Corresponding columns must exists samples (may also exist landings). neighbours list() specifying neighbourhood-structure carEffect. neighbours[] provide vector neighbours . May NULL carEffect used. nFish data.table() columns 'sampleId' 'count', specifying number fish part catch sample taken . always needed. See details. ageError matrix() specifying probability read age (rows), given true age (columns). Row column names specify ages. NULL, unit matrix assumed (error age reading). minAge lowest age include model. NULL, minimal age samples used. Age range must match age error matrix provided (ageError) maxAge highest age include model. NULL, maximal age samples used. Age range must match age error matrix provided (ageError) maxLength longest length include model.  NULL, maximal length samples used. lengthResolution desired resolution length groups. NULL minimal difference first testMax records used. testMax largest number record inspect deriving lengthResolution. date POSIXct() vector, matching number rows 'landings', date catch, see details. month integer() vector, matching number rows 'landings', month catch (1 January, etc.), see details. quarter integer() vector, vector, matching number rows 'landings', quarter catch (1 Q1, etc.), see details. hatchDay integer(), encoding day year fish consider transition one age next. interaction character vector specifying effects included interaction term. Must correspond effects specified parameters 'fixedEffects', 'randomEffects', 'carEffect' sampleID Column idenitfying sample, defined 'samples' count Estimated number fish part catch sample taken ","code":""},{"path":"/reference/prepRECA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for R-ECA — prepRECA","text":"RecaData Data data related parameters prepared running Reca.","code":""},{"path":"/reference/prepRECA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare data for R-ECA — prepRECA","text":"cell definition specified 'landings'.  type covariates specified fixedEffects, randomEffects carEffect.  fixed effects, well car-effect, must included cell definition.  covariates must occur samples. parameters 'date', 'month', 'quarter' used set temporal resolution catch age prediction.  Provide exactly one , set ones NULL.  Temporal resolution need match temporal covariate used.  One can example run month, even Quarter covariate model.  Note resolution sensitive data volume. get errors prediction E_p() = nan,  consider trying quarter. neighbours must symetric, b %% neighbours[], implies %% neighbours[b] nfish needed several samples may taken catch.  stratified way (e.g. pre-sorting size sex), estimate strata sizes must given (column 'count'), sample (column 'sampleId').  replicate samples selection frame, estimate total catch may given. column 'Otolithtype' provided, data prepared running stock-splitting analysis.  Support 4 otolithtypes, type 1 2 correspond one stock, type 4 5 correspond another  review documentation eca.estimate eca.predict,  information configure running stock splitting, interpret results. output GlobalParameters: outputs AgeLength, WeightLength Landings complete ready R-ECA runs.  function populates list GlobalParameters partially. Run parameters added afterwards.","code":""},{"path":"/reference/prepRECA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for R-ECA — prepRECA","text":"","code":"data(catchsamples)  catchsamples$catchId <- catchsamples$LEid  catchsamples$sampleId <- catchsamples$SAid  catchsamples$date <- catchsamples$LEdate  catchsamples$Metier5 <- catchsamples$LEmetier5   data(landings)  landings$LiveWeightKG <- landings$OfficialLandingsWeight  landings$Metier5 <- landings$FishingActivityCategoryEuropeanLvl5   # inspect data  rEcaDataReport(catchsamples, landings, c(\"Metier5\", \"VDencrCode\")) #>     Metier5 LiveWeightKG LiveWeightCumFraction NVDencrCode Ndate Ncatch Nsample #>  1: OTB_DEF     39822917             0.4175925           1     1      1       1 #>  2: LLS_DEF     26807800             0.6987055          34    16     34      35 #>  3: SSC_DEF     14299890             0.8486575          29    23     29      29 #>  4:  LX_DEF      9328848             0.9464820           0     0      0       0 #>  5: GNS_DEF      2754654             0.9753680          17     9     17      17 #>  6: LLD_DEF      2063217             0.9970034           0     0      0       0 #>  7: PTB_DEF       118092             0.9982417           0     0      0       0 #>  8: LHM_DEF        83410             0.9991164           0     0      0       0 #>  9: OTM_DEF        63339             0.9997806           0     0      0       0 #> 10: FPO_DEF         9051             0.9998755           0     0      0       0 #> 11:  PS_DEF         5267             0.9999307           0     0      0       0 #> 12: OTT_DEF         5155             0.9999848           0     0      0       0 #> 13: GND_DEF         1202             0.9999974           0     0      0       0 #> 14: MIS_DEF          251             1.0000000           0     0      0       0 #>     Nage Nweight Nlength #>  1:   29      29      29 #>  2:  962     962     962 #>  3:  721     721     721 #>  4:    0       0       0 #>  5:  338     338     338 #>  6:    0       0       0 #>  7:    0       0       0 #>  8:    0       0       0 #>  9:    0       0       0 #> 10:    0       0       0 #> 11:    0       0       0 #> 12:    0       0       0 #> 13:    0       0       0 #> 14:    0       0       0   # define sampling frame  landings <- landings[landings$Metier5 %in% c(\"GNS_DEF\", \"LLS_DEF\", \"LX_DEF\", \"SSC_DEF\"),]  landings <- landings[landings$Area %in% c(\"27.2.a.2\", \"27.1.b\"),]  catchsamples <- catchsamples[catchsamples$Metier5 != \"OTB_DEF\",]   # merge gear groups  landings[landings$Metier5 == \"LX_DEF\", \"Metier5\"] <- \"LSS_LX_DEF\"  landings[landings$Metier5 == \"LLS_DEF\", \"Metier5\"] <- \"LSS_LX_DEF\"  catchsamples[catchsamples$Metier5 == \"LX_DEF\", \"Metier5\"] <- \"LSS_LX_DEF\"  catchsamples[catchsamples$Metier5 == \"LLS_DEF\", \"Metier5\"] <- \"LSS_LX_DEF\"   # inspect data  rEcaDataReport(catchsamples, landings, c(\"Metier5\", \"VDencrCode\")) #>       Metier5 LiveWeightKG LiveWeightCumFraction NVDencrCode Ndate Ncatch #> 1: LSS_LX_DEF     31558580             0.7190532          34    16     34 #> 2:    SSC_DEF      9827412             0.9429679          29    23     29 #> 3:    GNS_DEF      2503085             1.0000000          17     9     17 #>    Nsample Nage Nweight Nlength #> 1:      35  962     962     962 #> 2:      29  721     721     721 #> 3:      17  338     338     338   #attempt prepRECA, gives error  if (FALSE) prepRECA(catchsamples,    landings,    c(\"Metier5\"),    NULL,    quarter = landings$Quarter)   #get catch count estimates  meanWeights <- stats::aggregate(list(meanW=catchsamples$Weight),    by=list(sampleId=catchsamples$sampleId),    FUN=mean)  #total weight is unique for sampleID, hence the FUN=mean  totalWeights <- stats::aggregate(list(totalW=catchsamples$SAtotalWtLive),    by=list(sampleId=catchsamples$sampleId),    FUN=mean)  nFish <- merge(totalWeights, meanWeights)  nFish$count <- nFish$totalW / nFish$meanW  nFish <- nFish[,c(\"sampleId\", \"count\")]   #prepRECA (produce recaData as in data(recaDataExample))  recaDataExample <- prepRECA(catchsamples,    landings,    c(\"Metier5\"),    NULL,    nFish = nFish,    quarter = landings$Quarter)"},{"path":"/reference/processPropertyFormats.html","id":null,"dir":"Reference","previous_headings":"","what":"Define the process property formats for inclusion in stox UI — processPropertyFormats","title":"Define the process property formats for inclusion in stox UI — processPropertyFormats","text":"Define process property formats inclusion stox UI","code":""},{"path":"/reference/processPropertyFormats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define the process property formats for inclusion in stox UI — processPropertyFormats","text":"","code":"processPropertyFormats"},{"path":"/reference/processPropertyFormats.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Define the process property formats for inclusion in stox UI — processPropertyFormats","text":"object class list length 11.","code":""},{"path":"/reference/rEcaDataReport.html","id":null,"dir":"Reference","previous_headings":"","what":"Data report for R-ECA preparation — rEcaDataReport","title":"Data report for R-ECA preparation — rEcaDataReport","text":"Generates overview samples inform sample availability potential cell definitions.  Informs columns maybe used fixed effect covariates, grouping covariates best done random effects. covariates landings define cells.  cell covariates defining cell reported, total landed weight, along number unique occurances covariates landings (including catchId sampleId).  Lastly number fish measurements Age, Weight Length reported.","code":""},{"path":"/reference/rEcaDataReport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data report for R-ECA preparation — rEcaDataReport","text":"","code":"rEcaDataReport(samples, landings, covariates)"},{"path":"/reference/rEcaDataReport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data report for R-ECA preparation — rEcaDataReport","text":"samples data.table() samples (prepRECA), row corresponding one sampled fish. Contains columns: catchId Column identifying catch sample taken . Typically haul landing. sampleId Column identifying sample. one sample taken catch. can set equal catchId Age integer() Age fish. Length numeric() Length fish. Must complete (NAs) Weight numeric() Weight fish. ... Additional columns may used covariates. landings data.table() total landings (prepRECA), row corresponding one cell. Contains columns: LiveWeightKG numeric(). Total landings (Live/Round weight Kg) cell ... Additional columns may used covariates. define cell. covariates character() vector columns consider covariates.","code":""},{"path":"/reference/rEcaDataReport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data report for R-ECA preparation — rEcaDataReport","text":"data.table() columns <Covariates landings> one column . Defines cells. LiveWeightKG total weight (kg) cell. LiveWeightCumFraction fraction landings cell cells higher total weight cell. <Count covariates landings> Count unique values covariate. one column . Column name covariate name (samples) prefixed N Ncatch number unique catches sampled cell. Nsample number unique catch-samples cell. Nage number age readings cell. Nweight number fish weight measurements cell. Nlength number fish length measurements cell.","code":""},{"path":"/reference/rEcaDataReport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data report for R-ECA preparation — rEcaDataReport","text":"","code":"data(catchsamples)  catchsamples$catchId <- catchsamples$LEid  catchsamples$sampleId <- catchsamples$SAid  catchsamples$date <- catchsamples$LEdate  catchsamples$Metier5 <- catchsamples$LEmetier5   data(landings)  landings$LiveWeightKG <- landings$OfficialLandingsWeight  landings$Metier5 <- landings$FishingActivityCategoryEuropeanLvl5   rEcaDataReport(catchsamples, landings, c(\"Metier5\", \"VDencrCode\")) #>     Metier5 LiveWeightKG LiveWeightCumFraction NVDencrCode Ndate Ncatch Nsample #>  1: OTB_DEF     39822917             0.4175925           1     1      1       1 #>  2: LLS_DEF     26807800             0.6987055          34    16     34      35 #>  3: SSC_DEF     14299890             0.8486575          29    23     29      29 #>  4:  LX_DEF      9328848             0.9464820           0     0      0       0 #>  5: GNS_DEF      2754654             0.9753680          17     9     17      17 #>  6: LLD_DEF      2063217             0.9970034           0     0      0       0 #>  7: PTB_DEF       118092             0.9982417           0     0      0       0 #>  8: LHM_DEF        83410             0.9991164           0     0      0       0 #>  9: OTM_DEF        63339             0.9997806           0     0      0       0 #> 10: FPO_DEF         9051             0.9998755           0     0      0       0 #> 11:  PS_DEF         5267             0.9999307           0     0      0       0 #> 12: OTT_DEF         5155             0.9999848           0     0      0       0 #> 13: GND_DEF         1202             0.9999974           0     0      0       0 #> 14: MIS_DEF          251             1.0000000           0     0      0       0 #>     Nage Nweight Nlength #>  1:   29      29      29 #>  2:  962     962     962 #>  3:  721     721     721 #>  4:    0       0       0 #>  5:  338     338     338 #>  6:    0       0       0 #>  7:    0       0       0 #>  8:    0       0       0 #>  9:    0       0       0 #> 10:    0       0       0 #> 11:    0       0       0 #> 12:    0       0       0 #> 13:    0       0       0 #> 14:    0       0       0"},{"path":"/reference/readFdirLandingsArchive.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads landings archive — readFdirLandingsArchive","title":"Reads landings archive — readFdirLandingsArchive","text":"Reads aggregated sales notes archive format deliver FDIR IMR. E.g. sluttseddel_1978_2004_medVerdi.csv","code":""},{"path":"/reference/readFdirLandingsArchive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads landings archive — readFdirLandingsArchive","text":"","code":"readFdirLandingsArchive(filename, encoding = \"Latin-1\")"},{"path":"/reference/readFdirLandingsArchive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads landings archive — readFdirLandingsArchive","text":"filename file read archive encoding encoding file identified filename, must accepted fread.","code":""},{"path":"/reference/readFdirLandingsArchive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads landings archive — readFdirLandingsArchive","text":"LandingsArchiveData","code":""},{"path":"/reference/readLstFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Parses logbooks (lst) — readLstFile","title":"Parses logbooks (lst) — readLstFile","text":"Parses logbooks tabular format (.lst) delivered Directorate Fisheries (FDIR).  format matched WMS records contains less detail format read  readErsFile","code":""},{"path":"/reference/readLstFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parses logbooks (lst) — readLstFile","text":"","code":"readLstFile(filename, encoding = \"Latin-1\")"},{"path":"/reference/readLstFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parses logbooks (lst) — readLstFile","text":"filename file read logbook records encoding encoding file identified filename, must accepted fread.","code":""},{"path":"/reference/readLstFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parses logbooks (lst) — readLstFile","text":"LstLogbookData","code":""},{"path":"/reference/readLstFile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parses logbooks (lst) — readLstFile","text":"variant .lst provide headers. read assumed standard order headers,  warning issued.","code":""},{"path":"/reference/readMetierTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Read metier table — readMetierTable","title":"Read metier table — readMetierTable","text":"Reads table metier definitions.","code":""},{"path":"/reference/readMetierTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read metier table — readMetierTable","text":"","code":"readMetierTable(filename, encoding = \"UTF8\")"},{"path":"/reference/readMetierTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read metier table — readMetierTable","text":"filename character() path file contains metier definitions. See details format. encoding character encoding file identified 'filename'","code":""},{"path":"/reference/readMetierTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read metier table — readMetierTable","text":"MetierTable containing metier definitions.","code":""},{"path":"/reference/readMetierTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read metier table — readMetierTable","text":"file identified 'filename' must tab-separated file, must provided headers must match column names MetierTable gearnotation:  file format allows shorthand notation metiers defined way different unmeshed gearcodes targets.  may written one line, different gear codes separated commas different targets separated commas. Optional columns may omitted. interpreted NA.  Comments may provided lines leading '#'.  Logical values ('meshedGear' 'meshedSelectivityDevice') encoded 'T' true 'F' false.","code":""},{"path":"/reference/recaDataExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data for Reca — recaDataExample","title":"Example data for Reca — recaDataExample","text":"Example produced prepRECA suited input runRECA","code":""},{"path":"/reference/recaDataExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data for Reca — recaDataExample","text":"","code":"data(recaDataExample)"},{"path":"/reference/recaDataExample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data for Reca — recaDataExample","text":"see prepRECA.","code":""},{"path":"/reference/recaDataExample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data for Reca — recaDataExample","text":"","code":"data(recaDataExample) if (FALSE) recaResult <- RunRecaEstimate(recaDataExample, 500, 5000)"},{"path":"/reference/recaPrediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Example result from Reca — recaPrediction","title":"Example result from Reca — recaPrediction","text":"Example produced runRECA","code":""},{"path":"/reference/recaPrediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example result from Reca — recaPrediction","text":"","code":"data(recaPrediction)"},{"path":"/reference/recaPrediction.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example result from Reca — recaPrediction","text":"see element prediction return runRECA.","code":""},{"path":"/reference/recaPrediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example result from Reca — recaPrediction","text":"","code":"data(recaPrediction) plotCatchAtAge(recaPrediction)"},{"path":"/reference/runRECA.html","id":null,"dir":"Reference","previous_headings":"","what":"Run R-ECA — runRECA","title":"Run R-ECA — runRECA","text":"Runs eca.estimate eca.predict.  confused RunRecaEstimate,  primarily intended including Stox projects.","code":""},{"path":"/reference/runRECA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run R-ECA — runRECA","text":"","code":"runRECA(   RecaObj,   nSamples,   burnin,   lgamodel = \"log-linear\",   fitfile = \"fit\",   predictfile = \"pred\",   resultdir = NULL,   thin = 10,   delta.age = 0.001,   seed = NULL,   caa.burnin = 0 )"},{"path":"/reference/runRECA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run R-ECA — runRECA","text":"RecaObj RecaData returned prepRECA PrepareRecaEstimate nSamples number MCMC samples made available eca.predict. See documentation eca.estimate, burnin number MCMC samples run discarded eca.estimate samples saved. See documentation eca.estimate. lgamodel length age relationship use length-age fits (options: \"log-linear\", \"non-linear\": Schnute-Richards model). See documentation eca.estimate. fitfile name output files resultdir. See documentation eca.estimate. predictfile name output files resultdir. See documentation eca.predict. resultdir directory Reca may store temp-files eca.estimate eca.predict. . NULL, temporary directory created. See documentation eca.estimate. thin controls many iterations run samples saved. may set account autocorrelation introduced Metropolis-Hastings simulation. see documentation eca.estimate delta.age see documentation eca.estimate seed see documentation eca.estimate caa.burnin see documentation eca.predict","code":""},{"path":"/reference/runRECA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run R-ECA — runRECA","text":"RecaResult results Reca run.","code":""},{"path":"/reference/runRECA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run R-ECA — runRECA","text":"eca.estimate performs Markov-chain Monte Carlo (MCMC) simulations determine maximum likelihood parameters given samples. eca.predict samples posterior distributions parameters estimated eca.estimate,  order obtain proportinos catches fish parameters.  Using parameters given total landings, predictions distribution catch-parameter distributions calculated. resultdir NULL, temporary directory created purpose.  attempted removed execution.  removal successful warning issued includes path temporary directory.","code":""},{"path":"/reference/runRECA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run R-ECA — runRECA","text":"","code":"data(recaDataExample)   # run (produce recaPrediction as in data(recaPrediction))  if (FALSE) recaPrediction <- runRECA(recaDataExample, 500, 5000)$prediction"},{"path":"/reference/sanitizeRecaInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Input sanitation for Reca — sanitizeRecaInput","title":"Input sanitation for Reca — sanitizeRecaInput","text":"Performs input sanitation Reca","code":""},{"path":"/reference/sanitizeRecaInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input sanitation for Reca — sanitizeRecaInput","text":"","code":"sanitizeRecaInput(   AgeLength = NULL,   WeightLength = NULL,   Landings = NULL,   GlobalParameters = NULL,   stage = c(\"dataprep\", \"parameterize\", \"predict\") )"},{"path":"/reference/sanitizeRecaInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input sanitation for Reca — sanitizeRecaInput","text":"AgeLength list provided AgeLength argument eca.estimate eca.predict WeightLength list provided AgeLength argument eca.estimate eca.predict Landings list provided AgeLength argument eca.estimate eca.predict GlobalParameters list provided AgeLength argument eca.estimate eca.predict stage character specifying stage sanitation performed . See details.","code":""},{"path":"/reference/sanitizeRecaInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Input sanitation for Reca — sanitizeRecaInput","text":"main interfaces Reca-package eca.estimate eca.predict.  strict formatting requirements, well documented help pages functions,  perform much input sanitation.   function checks data formatted accordance requirements. input formats shared eca.estimate eca.predict  formatting requirements largely overlapping. Sanitation therefore conseptually divided three stages,  checks performed controlled argument 'stage'. three stages : dataprep check data correctly consistently formatted, check global parameters implications data formatting provided. parameterize check arguments valid input eca.estimate predict check arguments valid input eca.predict Errors warnings raised issue, function meaningful return value. inputs Reca-functions may provided sanitation, available checks run accordingly.  Reca impose restriction consistency formatting different arguments,  checks require certain combination arguments provided. instance, checks  consistent encoding variables 'AgeLength' 'Landings' performed 'AgeLength' 'Landings' provided.","code":""},{"path":"/reference/sourceLogbookColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill in values from logbooks — sourceLogbookColumns","title":"Fill in values from logbooks — sourceLogbookColumns","text":"Fills selected columns imputed landings corresponding logbook records","code":""},{"path":"/reference/sourceLogbookColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill in values from logbooks — sourceLogbookColumns","text":"","code":"sourceLogbookColumns(   landings,   logbooks,   tripIdCol = \"tripid\",   catchIdCol,   speciesColLand = \"Art FAO (kode)\",   speciesColLog = \"FANGSTART_FAO\" )"},{"path":"/reference/sourceLogbookColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill in values from logbooks — sourceLogbookColumns","text":"landings data.table containing landings records, columns identifying trip catch ('tripIdCol', 'catchIdCol'). logbooks data.table containing logbook records, columns identifying trip catch ('tripIdCol', 'catchIdCol'). tripIdCol character() identifies column 'landings' 'logbooks' contain trip ids catchIdCol character() identifies column 'landings' 'logbooks' contain catch ids speciesColLand character() identifies column 'landings' identify species landed speciesColLog character() identifies column 'logbooks' identify species caught.","code":""},{"path":"/reference/sourceLogbookColumns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill in values from logbooks — sourceLogbookColumns","text":"following columns 'landings' may altered. others left untouched: Hovedområde (kode) set corresponding value logbooks Hovedområde set NA landings corresponding entries logbooks Lokasjon (kode) set corresponding value logbooks Siste fangstdato set corresponding value logbooks Redskap set corresponding value logbooks 'landings' already imputed information individual catches.  columns 'tripIdCol' 'catchIdCol' must set 'landings' 'logbooks'. may achieved appendTripIdLogbooks, appendTripIdLandings imputeCatchesLandings. function sets values gear, area codes, date last catch logbooks.  Landings corresponding logbook records left untouched","code":""},{"path":[]},{"path":"/reference/stoxFunctionAttributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Function specification for inclusion in StoX UI — stoxFunctionAttributes","title":"Function specification for inclusion in StoX UI — stoxFunctionAttributes","text":"Function specification inclusion StoX UI","code":""},{"path":"/reference/stoxFunctionAttributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function specification for inclusion in StoX UI — stoxFunctionAttributes","text":"","code":"stoxFunctionAttributes"},{"path":"/reference/stoxFunctionAttributes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Function specification for inclusion in StoX UI — stoxFunctionAttributes","text":"object class list length 49.","code":""},{"path":"/reference/tabulateFisheries.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate fisheries — tabulateFisheries","title":"Tabulate fisheries — tabulateFisheries","text":"Tabulates fisheries based custom cell definitions","code":""},{"path":"/reference/tabulateFisheries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate fisheries — tabulateFisheries","text":"","code":"tabulateFisheries(   data,   weightCol = \"LiveWeightKG\",   cellCols = c(\"Metier5\", \"quarter\", \"Area\"),   complete = F )"},{"path":"/reference/tabulateFisheries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate fisheries — tabulateFisheries","text":"data data.frame containg fisheries data weightCol character() column 'data' contains catch weights cellCols character() vector columns 'data' defining cells complete logical() whether combinations columns cellCols tabulated, even contain catch.","code":""},{"path":"/reference/tabulateFisheries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate fisheries — tabulateFisheries","text":"data.table cells specified cellCols tabulated decreasing weight columns 'weight', 'frac' 'cumFrac' containing weight cells fraction cumulative fraction total weight cell.","code":""},{"path":"/reference/tabulateFisheries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabulate fisheries — tabulateFisheries","text":"fishery decomposed cells, within total weight reported.","code":""},{"path":"/reference/tabulateFisheries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate fisheries — tabulateFisheries","text":"","code":"data(landings)  tabulateFisheries(landings) #>      Metier5 quarter      Area   weight         frac   cumFrac #>   1: OTB_DEF      Q1  27.2.a.2 16657454 1.746740e-01 0.1746740 #>   2: OTB_DEF      Q4  27.2.b.2  6551725 6.870294e-02 0.2433770 #>   3: LLS_DEF      Q4    27.1.b  6292260 6.598213e-02 0.3093591 #>   4: OTB_DEF      Q2  27.2.a.2  5414982 5.678278e-02 0.3661419 #>   5: LLS_DEF      Q1  27.2.a.2  5221458 5.475345e-02 0.4208953 #>  ---                                                           #> 189: FPO_DEF      Q1 27.3.a.20        7 7.340366e-08 0.9999999 #> 190: PTB_DEF      Q2 27.3.a.20        5 5.243119e-08 0.9999999 #> 191: LHM_DEF      Q3    27.4.b        5 5.243119e-08 1.0000000 #> 192: LHM_DEF      Q4 27.3.a.20        1 1.048624e-08 1.0000000 #> 193: OTB_DEF      Q2 27.14.b.2        0 0.000000e+00 1.0000000"},{"path":"/reference/writeSpDataFrameAsWKT.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes shape files as WKT files — writeSpDataFrameAsWKT","title":"Writes shape files as WKT files — writeSpDataFrameAsWKT","text":"Writes SpatialPolygonsDataFrame, StratumPolygon Stox-WKT files (stratafiles)","code":""},{"path":"/reference/writeSpDataFrameAsWKT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes shape files as WKT files — writeSpDataFrameAsWKT","text":"","code":"writeSpDataFrameAsWKT(shape, output, namecol = \"StratumName\")"},{"path":"/reference/writeSpDataFrameAsWKT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes shape files as WKT files — writeSpDataFrameAsWKT","text":"shape SpatialPolygonsDataFrame stratadefinition convert output filename save output namecol name column 'shape' used strata names. Defaults 'StratumName' pr definition StratumPolygon","code":""},{"path":"/news/index.html","id":"rstoxfda-v121-9001","dir":"Changelog","previous_headings":"","what":"RstoxFDA v1.2.1-9001","title":"RstoxFDA v1.2.1-9001","text":"Fixed issue DefineCarNeighbours format column headers differently depending chosen DefinitionMethods. column header ‘CarValue’ now consistently written singular form, means output DefinitionMethod ‘StratumPolygon’ changed, json schema CarNeighbours changed. Fixed behavior AddStratumStoxLanding assigns area NA, rather halting error, positions assigned area. Fixed behaviour ReportFdaSampling count catches unique hauls (column Haul StoxBiotic$Haul), rather stations. Improved documentation function. Added checking validity IntervalWidths report functions report Reca-credible intervals Clarified various warnings error messages. Made provision area definition optional PlotArea, function can used examine spatial distribution data without providing spatial coding system, just make maps without providing either data area definitions. Refactored get rid usages ggplot::aes_string soft deprecated ggplot. Added guidance vignettes deal several hauls assigned station field ‘station’ correctly filled NMDbiotic. Added workaround non-linear option lgamodel can used version Reca.","code":""},{"path":"/news/index.html","id":"rstoxfda-v120-2023-01-24","dir":"Changelog","previous_headings":"","what":"RstoxFDA v1.2.0 (2023-01-24)","title":"RstoxFDA v1.2.0 (2023-01-24)","text":"Bumped version number order get latest release line semantic versioning","code":""},{"path":"/news/index.html","id":"rstoxfda-v110-9001-2022-12-16","dir":"Changelog","previous_headings":"","what":"RstoxFDA v1.1.0-9001 (2022-12-16)","title":"RstoxFDA v1.1.0-9001 (2022-12-16)","text":"Fixed bug secondary axis Sampling plot (#77) Changed secondary axis plot elements different color main axis PlotSamplingCoverage PlotSamplingVariable Clarified error messages ConvertWeightBiotic (#79) Improved handling ResultDirectory ParameterizeRecaModels (#78) Fixed json-schema AgeErrorMatrix (#75)","code":""},{"path":"/news/index.html","id":"rstoxfda-v110-2022-11-26","dir":"Changelog","previous_headings":"","what":"RstoxFDA v1.1.0 (2022-11-26)","title":"RstoxFDA v1.1.0 (2022-11-26)","text":"contrary version numbers indicate, released v1.1.0-9001.","code":""}]
